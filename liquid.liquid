<head>
	<meta charset="utf-8">
	<title>Van</title>
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<style>
		.threejs-container {
			position: relative;
			background: linear-gradient(180deg, #fff 60%, #e4e4e4) !important;
			margin: 0;
			color: #333;
			font-family: Monospace;
			font-size: 13px;
			line-height: 24px;
			overscroll-behavior: none;
			-webkit-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			user-select: none;
			overflow: hidden;
      width: 96vw;
      margin: 0 auto;
      margin-bottom: 50px;
      border-radius: 20px;
		}

		.d-flex {
			display: flex;
		}

		.items-container {
			position: absolute;
			bottom: 16px;
			left: 50%;
			transform: translateX(-50%);
		}

		.item-box {
			margin-left: 8px;
			margin-right: 8px;
			border-radius: 15px;
			text-align: center;
			cursor: grab;
			opacity: 0.8;
			transition: opacity .15s ease-in-out, transform .08s linear;
			position: relative;
		}

		.item-box .carted-item {
			position: absolute;
			top: -5px;
			right: -5px;
			background-color: red;
			border-radius: 50%;
			align-items: center;
			display: flex;
			justify-content: center;
			width: 25px;
			height: 25px;
			color: white;
      display: none;
		}

		.item-box:active {
			cursor: grabbing;
			cursor: -moz-grabbing;
			cursor: -webkit-grabbing;
		}

		.item-box:hover {
			opacity: 1;
			transform: scale(1.04);
		}

		.item-img {
			width: 100px;
			height: 100px;
			border-radius: 15px;
			background-size: cover;
			box-shadow: 0.6px 0.6px 1.9px rgba(0, 0, 0, .035), 5px 5px 15px rgba(0, 0, 0, .07);
		}

		p {
			font-size: 11px;
			line-height: 1.5;
			margin-bottom: 12px;
		}

		#airconditioner {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/airconditioner.jpg?v=1711798448');
			display: block;
		}

		#maxxair {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/maxxair.jpg?v=1711798448');
			display: block;
		}

		#solar_panel200 {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/200W.jpg?v=1711798448');
			display: block;
		}

		#solar_panel50 {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/55W.jpg?v=1711798448');
			display: block;
		}

		#solar_panel30 {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/30W.jpg?v=1711798448');
			display: block;
		}

    #ladder {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/ladder.jpg?v=1714006260');
			display: block;
		}

		button {
			cursor: pointer;
		}

		#deleteButton {
			position: absolute;
			top: 0;
			right: 0;
			display: none;
			justify-content: center;
			align-items: center;
			background-color: transparent;
			border: 0;
			cursor: pointer;
			color: #ff0000;
			padding: 5px;
			opacity: 0.8;
			transition: opacity ease .3s;
		}

		#deleteButton:hover {
			opacity: 1;
		}

		#deleteButton svg {
			padding-right: 4px;
		}

		.action-btn-list {
			position: absolute;
			bottom: 125px;
			right: 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
		}

		.action-btn-list button {
			width: 40px;
			height: 40px;
			display: flex;
			align-items: center;
			justify-content: center;
			background: #333;
			border-radius: 22px;
			border: none;
		}

		.text-center {
			text-align: center;
		}

		.mb-3 {
			margin-bottom: 8px;
		}

		.text-title1 {
			color: #333;
			opacity: 0;
			animation: textAnimation 2s linear 3s infinite alternate;
		}

		.text-body1 {
			color: #333;
			font-size: 20px;
		}

		.items-container>div:first-child {
			position: relative;
			text-align: center;
      margin-bottom: 20px;
		}

		@keyframes textAnimation {
			0% {
				opacity: 0;
			}

			100% {
				opacity: 0.7;
			}
		}
    #configurator-container {
      position: relative;
      border-radius: 20px;
    }

    .item-container .announce-bar {
      margin-bottom: 20px !important;
    }

		.van-detail {
			position: absolute;
			top: 20px;
			left: 50%;
			transform: translateX(-50%);
		}

		#rack_title {
			font-size: 24px;
			text-shadow: 0px 0px 4px #fff;
			color: black;
		}
		.vans-list {
			position: absolute;
			top: 50%;
			transform: translateY(-50%);
			left: 20px;
		}
		.van-item {
			cursor: pointer;
			width: 100px;
			height: 75px;
			border-radius: 10px;
			box-shadow: rgba(17, 12, 46, 1) 0px 0px 15px 0px;
			margin: 25px 0px;
			border-radius: 10px;
			border: 1px solid #fff;
			position: relative;
      display: flex;
		}
		.van-item img {
			width: 100%;
			height: 100%;
			object-fit: cover;
			border-radius: 10px;
		}
		.vans-list .list-title {
			text-align: center;
			font-size: 20px;
			font-weight: bold;
			text-shadow: 0px 0px 4px #fff;
			color: black;
		}

		.tooltip .tooltiptext {
			visibility: hidden;
			width: 120px;
			background-color: rgba(17, 12, 46, 1);
			color: #fff;
			text-align: center;
			border-radius: 6px;
			padding: 5px 0;
			top: 35%;
    	margin-left: 10px;
			position: absolute;
			z-index: 1;
			transform: translateY(-23%);
      left: 100%;
		}

		.tooltip:hover .tooltiptext {
			visibility: visible;
		}
		.tooltip .tooltiptext:before {
			content: "";
			display: block;
			width: 0;
			height: 0;
			border-top: 9px solid transparent;
			border-bottom: 9px solid transparent;
			border-left: 9px solid rgba(17,9, 46, 1);
			position: absolute;
			left: -9px;
			top: 50%;
			transform: rotate(180deg) translateY(50%);
		}
	</style>
</head>
<div class="threejs-container">
	<div id="configurator-container">
    <div class="van-detail">
      <h2 id="rack_title">Ford Transit Roof Rack - HSLD - 148 High Roof</h2>
    </div>
    <div class="vans-list">
      <p class="list-title">Vans</p>
      <div class="van-item tooltip">
        <img src="https://cdn.shopify.com/s/files/1/0412/9898/5124/files/ford-transit-820-rack.jpg?v=1714572993" draggable="false"/>
        <span class="tooltiptext">Ford Transit 820</span>
      </div>
    </div>
		<div id="container"></div>
		<div class="items-container">
			<div class="text-center announce-bar" >
				<h2 class="text-title1">Drag & drop items onto van roof</h2>
				<button id="deleteButton">
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 40 40">
						<path fill="#ff0000"
							d="M21.499 19.994L32.755 8.727a1.064 1.064 0 0 0-.001-1.502c-.398-.396-1.099-.398-1.501.002L20 18.494L8.743 7.224c-.4-.395-1.101-.393-1.499.002a1.05 1.05 0 0 0-.309.751c0 .284.11.55.309.747L18.5 19.993L7.245 31.263a1.064 1.064 0 0 0 .003 1.503c.193.191.466.301.748.301h.006c.283-.001.556-.112.745-.305L20 21.495l11.257 11.27c.199.198.465.308.747.308a1.058 1.058 0 0 0 1.061-1.061c0-.283-.11-.55-.31-.747z" />
					</svg>
					Delete
				</button>
			</div>
			<div class="d-flex">
				<div class="item-box">
					<div class="item-img" id="airconditioner" draggable="true">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Air Conditioner</p>
					</div>
				</div>
				<div class="item-box">
					<div class="item-img" id="maxxair" draggable="true">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Maxxair</p>
					</div>
				</div>
				<div class="item-box">
					<div class="item-img" id="solar_panel200" draggable="true">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Solar Panel<br />(200W)</p>
					</div>
				</div>
				<div class="item-box">
					<div class="item-img" id="solar_panel50" draggable="true">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Solar Panel<br />(55W)</p>
					</div>
				</div>
				<div class="item-box">
					<div class="item-img" id="solar_panel30" draggable="true">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Solar Panel<br />(30W)</p>
					</div>
				</div>
        <div class="item-box">
          <div class="item-img" id="ladder" draggable="true">
            <div class="carted-item">1</div>
          </div>
          <div class="item-name">
            <p>Ladder</p>
          </div>
        </div>
			</div>
		</div>
		<div class="action-btn-list">
			<div>
				<p class="text-body1">$<span id="total_price">800</span></p>
			</div>
      <button id="addCartBtn" class="mb-3">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 14 14"><path fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" d="M10.946 13.5a.5.5 0 1 1 0-1a.5.5 0 0 1 0 1m-6.5 0a.5.5 0 1 1 0-1a.5.5 0 0 1 0 1m5.158-7h-3m1.5-1.5v3M.5.5H3L3.263 3m0 0l.643 6.105A1 1 0 0 0 4.9 10h6.32a1 1 0 0 0 .97-.757l1.25-5A1 1 0 0 0 12.47 3z"/></svg>
      </button>

			<button class="mb-3" id="imgDownloadBtn">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
					<g fill="none" stroke="#ffffff" stroke-linecap="round" stroke-width="1.5">
						<path stroke-linejoin="round"
							d="M21.25 13V8.5a5 5 0 0 0-5-5h-8.5a5 5 0 0 0-5 5v7a5 5 0 0 0 5 5h6.26" />
						<path stroke-linejoin="round"
							d="m3.01 17l2.74-3.2a2.2 2.2 0 0 1 2.77-.27a2.2 2.2 0 0 0 2.77-.27l2.33-2.33a4 4 0 0 1 5.16-.43l2.47 1.91M8.01 10.17a1.66 1.66 0 1 0-.02-3.32a1.66 1.66 0 0 0 .02 3.32" />
						<path stroke-miterlimit="10" d="M18.707 20v-5" />
						<path stroke-linejoin="round" d="m16.414 17.895l1.967 1.967a.459.459 0 0 0 .652 0L21 17.895" />
					</g>
				</svg>
			</button>

      
			<button id="camChangeBtn">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 72 72">
					<circle cx="22.258" cy="26.11" r="3" fill="#ffffff" />
					<circle cx="46.153" cy="26.11" r="3" fill="#ffffff" />
					<path fill="none"
						d="M46.153 16.11c-5.514 0-10 4.486-10 10s4.486 10 10 10s10-4.485 10-10s-4.485-10-10-10m0 13c-1.654 0-3-1.346-3-3s1.346-3 3-3s3 1.346 3 3s-1.345 3-3 3m-23.895-13c-5.514 0-10 4.486-10 10s4.486 10 10 10s10-4.485 10-10c0-5.514-4.486-10-10-10m0 13c-1.655 0-3-1.346-3-3s1.345-3 3-3s3 1.346 3 3s-1.346 3-3 3m-1.829 15.127l6.998.815c.376-.147 2.842-.37 2.842-.37s2.814 1.782 3.188 4.571c.375 2.79-4.643 3.815-4.869 3.815c-2.515 0-3.628-4.56-3.632-4.603l-4.527-.695l.57 2.249c.285 1.13.424 2.292.413 3.458l-.016 1.613c0 .447 1.387 1.808 1.865 1.808h24.826V40.031H20.43z" />
					<path fill="#fff" d="m51.727 42.827l-.005.003l.164-.057z" />
					<path fill="#fff"
						d="m61.183 54.97l-.238-13.608s-9.289 1.498-9.246 1.482c.008-.003.015-.01.023-.014l-3.445.983v9.22l3.629 1.034l-.142-.043c-.018-.005 9.418.946 9.418.946" />
					<path fill="#ffffff"
						d="M24.218 48.465c.113.02 2.597 3.539 2.675 3.603c.064.054 3.39 1.027 3.602 1c.21-.029 2.295-2.027 2.353-2.135c.019-.034 1.175-1.76.83-3.2c-.243-1.01-2.005-1.881-2.07-1.93c-.158-.121-3.69-.735-3.7-.737c0 0-15.537-2.56-15.65-2.638l-4.365-3.515l-1.332 8.05l4.745-.735c.111-.017 12.912 2.236 12.912 2.236" />
					<g fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
						<path d="M21.396 40.03h26.692v16.868H23.26c-1.03 0-1.865-.81-1.865-1.808v-3.124" />
						<path
							d="m7.915 39.39l-1.152 7.573l5.017-.779l13.594 2.492a4.105 4.105 0 1 0 2.359-3.435l-15.268-2.799z" />
						<circle cx="46.154" cy="26.11" r="10" />
						<circle cx="46.154" cy="26.11" r="3" />
						<circle cx="22.258" cy="26.11" r="10" />
						<circle cx="22.258" cy="26.11" r="3" />
						<path d="m52.053 53.068l8.892 2.113v-13.82l-8.892 2.412" />
					</g>
				</svg>
			</button>
		</div>
	</div>
</div>


<script type="importmap" async>
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js"
    }
  }
</script>

<script async src="https://unpkg.com/es-module-shims@1.3.0/dist/es-module-shims.js"></script>

<script type="module">
  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js';
  import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/controls/OrbitControls.js';
  import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/loaders/GLTFLoader.js';
  import { DRACOLoader } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/loaders/DRACOLoader.js';
  import { ViewHelper } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/helpers/ViewHelper.js';

  

  let vanPrice = 0;
  let airConPrice = 0;
  let maxxAirPrice = 0;
  let solar200Price = 0;
  let solar55Price = 0;
  let solar30Price = 0;
  let totalPrice = 0;

  let vanArea = [-16.535, 101.968];
  let addedState = [];
  let selectedIndexOfState = -1;
  let solar35Area = [];
  let solar50Area = [];

  let availableProducts = [
    {htmlId: '', type: 'rack', handle: 'transithsld148-roof-rack', id: 43238854328539, price: 0, quantity: 1, xRadius: null},
    {htmlId: 'airconditioner', type: 'air_conditioner', handle: 'dometic-rtx-2000', id: 43261478764763, price: 0, quantity: 0, xRadius: 16.9},
    {htmlId: 'maxxair', type: 'maxxair', handle: 'maxxair-fan-deluxe', id: 40771325264036, price: 0, quantity: 0, xRadius: 13.11},
    {htmlId: 'solar_panel200', type: 'solar200', handle: 'new-powa-200w-monocrystalline-solar-panel-12v', id: 42641211228379, price: 0, quantity: 0, xRadius: 14.323},
    {htmlId: 'solar_panel50', type: 'solar55', handle: 'rich-solar-50w-solar-panel', id: 45081892683995, price: 0, quantity: 0, xRadius: 13.11},
    {htmlId: 'solar_panel30', type: 'solar30', handle: '', id: null, price: 0, quantity: 0, xRadius: 16.889},
    {htmlId: '', type: 'ac_cross', handle: 'ford-transit-hsld-roof-rack-maxxfan-cross-bars-1', id: 44018089623771, price: 0, quantity: 0},
    {htmlId: '', type: 'solar_cross', handle: 'ford-transit-high-speed-low-drag-roof-rack-cross-bars', id: 43279255503067, price: 0, quantity: 0},
    {htmlId: '', type: 'max_cross', handle: 'ford-transit-hsld-roof-rack-maxxfan-cross-bars', id: 44018083234011, price: 0, quantity: 0},
    {htmlId: 'ladder', type: 'ladder', handle: 'transit-side-mount-ladder-high-roof', id: 44020238385371, price: 0, quantity: 0},
  ]


  function getPrices() {
    const dataPromises = availableProducts.map(async (product) => {
       const response = await fetch(window.Shopify.routes.root + `products/${product.handle}.js`);
       const productData = await response.json();
       return productData;
    });
   
    Promise.all(dataPromises)
      .then(data => {
        const priceProducts = availableProducts.map((product, index) => {
          let productPrice = 0;
          const productData = data[index];

          if (productData.id === product.id) {
            productPrice = productData.price / 100;
          } else {
            const variant = productData.variants.find(variant => variant.id === product.id);
            if (variant) {
              productPrice = variant.price / 100;
            }
          }
          if(product.type == 'rack') {
            totalPrice = productPrice;
            document.getElementById('total_price').innerHTML = productPrice;
          }
          return { ...product, price: productPrice };
         });
   
         availableProducts = priceProducts
       })
       .catch(error => console.error('Error fetching product data:', error));
  }
   
  getPrices();

  let canvas, camera, scene, renderer;
  let cameraType = "perspective";
  let canvasContainer = document.getElementById("container");

  let grid;
  let controls;

  let selectedFeature;
  var targetForDragging;

  let isDragging = false;

  let intersects;
  let raycaster;
  let workPlane;

  let edges;
  let line;
  let edgeLine = null;
  const lineMaterial = new THREE.LineBasicMaterial({ color: "#fff" });

  let vanItem;
  let cloneVanItem = null;
  let loadItemDirectory;

  let carModel;
  let shodowMesh;
  let model = null;

  const shadow = new THREE.TextureLoader().load('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/ford_ao.png?v=1711858184');

  let helper;
  let clock;
  let offsetTopCanvas

  
  let selectedItem = '';
  let ladderPlane;
  const cutOffArea = [3.19, 25.7, 32.09, 64.72, 71.11, 85.19];
  const vanDiff = 3.2

  let delelteBtn = document.getElementById("deleteButton")

  document.addEventListener('dragstart', function (event) {
    model = null;
    vanItem = event.target;
    selectedItem = availableProducts.filter(product => product.htmlId == event.target.id)[0]?.type ?? event.target.id;
    //Hide the default drag image
    event.dataTransfer.setDragImage(document.createElement('div'), 0, 0);

    cloneVanItem = vanItem.cloneNode(true);
    cloneVanItem.style.position = "fixed";
    cloneVanItem.style.display = "none"; // Hide the clone initially
    document.body.appendChild(cloneVanItem);

    switch (event.target.id) {
      case "airconditioner":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/4ffe214498ea4572/airconditioner.glb";
        break;
      case "maxxair":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/79d9acc725fd9588/maxxair.glb";
        break;
      case "solar_panel200":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/5cfa600915383f66/200W.glb";
        break;
      case "solar_panel50":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/e69c7ddeafcf261c/55W.glb";
        break;
      case "solar_panel30":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/2a9229deef12ff01/30W.glb";
        break;
      case "ladder":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/055283c9ebf899d6/ladder.glb";
        break;
    }

    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath('https://res.cloudinary.com/dbloegsbv/raw/upload/v1/jsm/');


    const loader = new GLTFLoader();
    loader.setDRACOLoader(dracoLoader);

    // loader.load(loadItemDirectory, function (gltf) {
    // 	model = gltf.scene;
    // });
    const loadModel = (url) => {
      return new Promise((resolve, reject) => {
        loader.load(url, function (gltf) {
          resolve(gltf.scene);
        }, undefined, reject);
      });
    };

    // Usage example
    loadModel(loadItemDirectory)
      .then((modelItem) => {
        // Do something with the loaded model
        model = modelItem;
        console.log("loaded")
      })
      .catch((error) => {
        console.error('An error occurred while loading the model:', error);
      });
  });
  document.addEventListener('dragover', function (event) {

    offsetTopCanvas = canvasContainer.getBoundingClientRect().top;
    let a = 2 * event.clientX / window.innerWidth - 1;
    let b = 1 - 2 * (event.clientY - offsetTopCanvas) / window.innerHeight;

    let positionX = 0;
    let positionY = 0;
    let positionZ = 0;

    if(selectedItem == 'ladder') {
      raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
      intersects = raycaster.intersectObjects([ladderPlane]);

      event.preventDefault();

      // positionX = -0.85216;
      positionX = -0.6;
      positionY = 1.1717;
      positionZ = -0.97864;
    } else {
      

      raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
      intersects = raycaster.intersectObjects([workPlane]);

      event.preventDefault();
      
      positionY = 2.35;
      positionZ = 0;

    }

    if (intersects.length > 0) {

      event.preventDefault();
      cloneVanItem.style.display = "none";

      let item = intersects[0];
      let objectHit = item.object;

      let locationX = item.point.x;
      let locationZ = item.point.z;
      let coords = new THREE.Vector3(locationX, 0, locationZ);
      scene.worldToLocal(coords);

      const modelName = model.children[0].name;

      let checkCollision = true;

      if(selectedItem != 'ladder' && modelName != 'solar30' && modelName != 'solar55'){
        checkCollision = checkIsAvailable(coords.x, modelName, 1);
      }

      if(modelName == "air_conditioner"){
        if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 7.2, vanDiff) >= 0 && checkCollision) {
          updateSolarArea(coords.x, modelName, 1);

          if (model) {
            scene.remove(model);
            model.position.x = selectedItem == 'ladder' ? positionX: coords.x;
            model.position.y = positionY;
            model.position.z = positionZ;
            scene.add(model);
          }
        } 
      } else if(modelName == 'maxxair'){
        if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 7, vanDiff) >= 0 && checkCollision){
          updateSolarArea(coords.x, modelName, 1)
          if (model) {
            scene.remove(model);
            model.position.x = selectedItem == 'ladder' ? positionX: coords.x;
            model.position.y = positionY;
            model.position.z = positionZ;
            scene.add(model);
          }
        } 
      } else if(modelName == 'solar30') {
        if (model) {
          
          scene.remove(model);
          model.position.x = -1 * solar35Area[0] * 0.0254;
          model.position.y = positionY;
          model.position.z = positionZ;
          scene.add(model);
        }
      } else if(modelName == 'solar55') {
        if (model) {
          
          scene.remove(model);
          model.position.x = -1 * solar50Area[0] * 0.0254;
          model.position.y = positionY;
          model.position.z = positionZ;
          scene.add(model);
        }
      } else {
        if (model && checkCollision) {
            scene.remove(model);
            model.position.x = selectedItem == 'ladder' ? positionX: coords.x;
            model.position.y = positionY;
            model.position.z = positionZ;
            scene.add(model);
          }
      }

    } else {
      console.log("remove model")
      cloneVanItem.style.display = "block";
      cloneVanItem.style.left = event.clientX + 'px';
      cloneVanItem.style.top = event.clientY + 'px';
      cloneVanItem.style.transform = "translate(-50%,-50%)";
      if (model) {
        scene.remove(model);
      }
    }
  });

  document.addEventListener('dragend', function (event) {
    if (cloneVanItem) {
      document.body.removeChild(cloneVanItem);
    }
    if (model) {
      scene.remove(model);
    }
    event.preventDefault();
    let a = 2 * event.clientX / window.innerWidth - 1;
    let b = 1 - 2 * (event.clientY - offsetTopCanvas) / window.innerHeight;

    let positionX = 0;
    let positionY = 0;
    let positionZ = 0;

    if(selectedItem == 'ladder') {
      raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
      intersects = raycaster.intersectObjects([ladderPlane]);

      event.preventDefault();

      // positionX = -0.85216;
      positionX = -0.602;
      positionY = 1.1717;
      positionZ = -0.97864;
    } else {
      
      raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
      intersects = raycaster.intersectObjects([workPlane]);

      event.preventDefault();
      
      positionY = 2.35;
      positionZ = 0;

    }
  
    if (intersects.length == 0) {
      return false;
    }
    else {
      let item = intersects[0];
      let objectHit = item.object;

      let locationX = item.point.x;
      let locationZ = item.point.z;
      let coords = new THREE.Vector3(locationX, 0, locationZ);
      scene.worldToLocal(coords);

      const dracoLoader = new DRACOLoader();
      dracoLoader.setDecoderPath('https://res.cloudinary.com/dbloegsbv/raw/upload/v1/jsm/');

      const loader = new GLTFLoader();
      loader.setDRACOLoader(dracoLoader);

      loader.load(loadItemDirectory, function (gltf) {
        const itemModel = gltf.scene;

        console.log(selectedItem)
        itemModel.position.x = selectedItem == 'ladder' ? positionX: model.position.x ?? coords.x;
        itemModel.position.y = positionY;
        itemModel.position.z = positionZ;
        scene.add(itemModel);

        if(selectedItem != 'solar30' && selectedItem != 'solar55') {
          console.log("*****: ", addedState)
          updateModelState(1, selectedItem, itemModel.position.x);
        }

        calcPrice(itemModel.children[0].name, true)
        selectedItem = ""
      });
      render();
    }
    isDragging = false;
  });

  canvasContainer.addEventListener('mousedown', (event) => {
    if (event.button === 0) {
      offsetTopCanvas = canvasContainer.getBoundingClientRect().top;
      isDragging = true;
      doMouseDown(event.clientX, event.clientY - offsetTopCanvas);
    }
  });
  canvasContainer.addEventListener('mousemove', (event) => {
    if (selectedFeature) {
      if (selectedFeature.parent.name !== "van") {
        if (isDragging) {
          offsetTopCanvas = canvasContainer.getBoundingClientRect().top;
          let a = 2 * event.clientX / window.innerWidth - 1;
          let b = 1 - 2 * (event.clientY - offsetTopCanvas) / window.innerHeight;
          raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
          intersects = raycaster.intersectObject(targetForDragging);
          if (intersects.length === 0) {
            return;
          }

          let objectHit = intersects[0].object;
          let locationX = intersects[0].point.x;
          let locationZ = intersects[0].point.z;
          let coords = new THREE.Vector3(locationX, 0, locationZ);
          coords = scene.worldToLocal(coords);

          const boundingBox = new THREE.Box3().setFromObject(selectedFeature);
          const size = new THREE.Vector3();
          boundingBox.getSize(size);

          // Extract the width from the dimensions
          const selectedFeatureWidth = size.x;
          let checkCollision = true;
          const xPos = Math.min(0.428 - selectedFeatureWidth / 2, Math.max(-2.2, coords.x));

          if(selectedFeature.name != 'ladder' && selectedFeature.name != 'solar30' && selectedFeature.name != 'solar55'){
            checkCollision = checkIsAvailable(xPos, selectedFeature.name, 2);
          }

          if(selectedFeature.name == "air_conditioner"){
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 7.2, vanDiff)  >= 0 && checkCollision) {

              updateSolarArea(xPos, selectedFeature.name, 1)
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos)
            } 
          } else if(selectedFeature.name == 'maxxair'){
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 7, vanDiff)  >= 0 && checkCollision){
              updateSolarArea(xPos, selectedFeature.name, 1)
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos)
            } 
          } else if(selectedFeature.name == 'solar30') {
            selectedFeature.parent.position.x = -1 * solar35Area[0] * 0.0254;
            selectedFeature.parent.position.z = 0;
          } else if(selectedFeature.name == 'solar55') {
            selectedFeature.parent.position.x = -1 * solar50Area[0] * 0.0254;
            selectedFeature.parent.position.z = 0;
          }else {
            if(checkCollision) {
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos)
            }
          }

          render();
        }
      }
      controls.enableRotate = false;
    }
    else {
      controls.enableRotate = true;
    }
  });
  canvasContainer.addEventListener('mouseup', () => {
    isDragging = false;
  });

  document.getElementById('deleteButton').addEventListener('click', function () {
    if (selectedFeature) {
      scene.remove(selectedFeature.parent); // Remove the selected feature from the scene
      this.style.display = "none";

      calcPrice(selectedFeature.name, false)

      updateModelState(3, selectedFeature.name, selectedFeature.parent.position.x)
      render();

      selectedFeature = null; // Reset the selected feature
    }
  });

  document.getElementById('addCartBtn').addEventListener('click', async function() {
    let cartItems = []
    availableProducts.map(async (product) => {
      if(product.price > 0 && product.quantity > 0) {
        cartItems.push({
          'id': product.id,
          'quantity': product.quantity
        })
      }
    });

    const formData = {'items': cartItems};

    if(cartItems.length > 0) {
      await fetch(window.Shopify.routes.root + 'cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        // location.reload();
        return response.json();
      })
      .catch((error) => {
        console.error('Error:', error);
      });
    }
  });

  document.getElementById('imgDownloadBtn').addEventListener('click', function () {
    // Render the scene
    renderer.render(scene, camera);
    var imgData = renderer.domElement.toDataURL();
    var link = document.createElement('a');
    link.download = 'scene.png';
    link.href = imgData;
    link.click();
  });

  document.getElementById('camChangeBtn').addEventListener('click', function () {
    const cameraPosition = camera.position;

    if (cameraType === "perspective") {
      camera = new THREE.OrthographicCamera(-window.innerWidth / 340, window.innerWidth / 340, window.innerHeight / 340, -window.innerHeight / 340, 1, 10000);
      cameraType = "orthographic"
    }
    else {
      camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000);
      cameraType = "perspective"
    }
    camera.position.set(cameraPosition.x, cameraPosition.y, cameraPosition.z);
    setCameraView();
    setViewCube()
  });
  function doMouseDown(x, y) {
    controls.enableRotate = false;
    if (selectedFeature) {
      removeEdgeLines(selectedFeature);
      selectedFeature = null;
      selectedIndexOfState = -1;
    }
    scene.remove(targetForDragging);
    delelteBtn.style.display = "none";

    let a = 2 * x / window.innerWidth - 1;
    let b = 1 - 2 * y / window.innerHeight;
    raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
    intersects = raycaster.intersectObjects(scene.children);  // no need for recusion since all objects are top-level
    if (intersects.length == 0) {
      return false;
    }
    let item = intersects[0];
    let objectHit = item.object;
    if (objectHit.parent &&
      objectHit.parent.name != "van" &&
      objectHit != workPlane &&
      objectHit != shodowMesh) {
      scene.add(targetForDragging);
      targetForDragging.position.set(0, item.point.y, 0);

      // Add or remove edge lines based on selection
      if (objectHit != selectedFeature) {
        selectedFeature = objectHit;
        addEdgeLines(selectedFeature);
        delelteBtn.style.display = "flex";
        selectedIndexOfState = checkIsAvailable(objectHit.parent.position.x, selectedFeature.name, 3);
      }
      else {
        selectedFeature = null;
        removeEdgeLines(selected);
        delelteBtn.style.display = "none";
        selectedIndexOfState = -1;
      }

      render();
    }


  }

  document.addEventListener('DOMContentLoaded', function () {
    canvas = document.querySelector('canvas[data-engine="three.js r162"]');
  });

  function addEdgeLines(object) {
    // Remove existing edge line if it exists
    if (edgeLine) {
      object.remove(edgeLine);
      edgeLine.geometry.dispose();
      edgeLine.material.dispose();
    }

    // Create new edge lines
    const edges = new THREE.EdgesGeometry(object.geometry);
    edgeLine = new THREE.LineSegments(edges, lineMaterial);
    object.add(edgeLine);
  }

  function removeEdgeLines(object) {
    if (edgeLine) {
      object.remove(edgeLine);
      edgeLine.geometry.dispose();
      edgeLine.material.dispose();
      edgeLine = null;
    }
  }

  function calcPrice(modelName, flag) {
    let itemPrice = 0;
    let addProduct = {}

    switch (modelName) {
      case "air_conditioner":
        addProduct = availableProducts[1];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        itemPrice = addProduct.price;
        availableProducts[1] = addProduct;

        break;
      case "maxxair":
        addProduct = availableProducts[2];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        itemPrice = addProduct.price;
        availableProducts[2] = addProduct;
        break;
      case "solar200":
        addProduct = availableProducts[3];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[3] = addProduct;
        itemPrice = addProduct.price

        addProduct = availableProducts[6];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[6] = addProduct;

        itemPrice += addProduct.price;
        break;
      case "solar55":
        addProduct = availableProducts[4];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[4] = addProduct;
        itemPrice = addProduct.price

        addProduct = availableProducts[7];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[7] = addProduct;

        itemPrice += addProduct.price;
        break;
      case "solar30":
        addProduct = availableProducts[5];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        itemPrice = addProduct.price;
        availableProducts[5] = addProduct;
        break;
      case "ladder":
        addProduct = availableProducts[8];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        itemPrice = addProduct.price;
        availableProducts[8] = addProduct;
        break;
      default:
        itemPrice = availableProducts.filter(product => product.type == 'rack')[0].price;
    }

    updateCartState();

    if (flag)
      totalPrice = totalPrice + itemPrice;
    else
      totalPrice = totalPrice - itemPrice;

    document.getElementById("total_price").innerHTML = totalPrice.toFixed(2);
  }

  function updateCartState() {
    availableProducts.map((product) => {
      if(product.htmlId != "") {
        let dragItem = document.getElementById(product.htmlId).childNodes[1];
        if (product.quantity > 0) {
          dragItem.innerHTML = product?.quantity.toString();
          dragItem.style.display = 'block';
        } else {
          dragItem.style.display = 'none';
        }
      }
    })
  }

  function setViewCube() {
    clock = new THREE.Clock();
    helper = new ViewHelper(camera, renderer.domElement);
    helper.controls = controls;
    helper.controls.center = controls.target;

    const div = document.createElement('div');
    div.id = 'viewHelper';
    div.style.position = 'absolute';
    div.style.right = 0;
    div.style.bottom = 0;
    div.style.height = '128px';
    div.style.width = '128px';
    div.style.display = 'flex'

    document.getElementById("configurator-container").appendChild(div);
    div.addEventListener('pointerup', (event) => {
      helper.handleClick(event)
    });
    animate();
  }
  function animate() {
    requestAnimationFrame(animate);
    const delta = clock.getDelta();
    if (helper.animating) helper.update(delta);
    helper.render(renderer);
  }
  function setCameraView() {
    controls = new OrbitControls(camera, container);

    controls.maxDistance = 20;
    controls.minDistance = 3;

    controls.maxZoom = 3;
    controls.minZoom = 0.5;

    controls.maxPolarAngle = THREE.MathUtils.degToRad(90);

    controls.target.set(0, 0.5, 0);
  }

  function init() {
    const container = document.getElementById('container');

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize((window.innerWidth - window.innerWidth * 0.04), window.innerHeight);
    renderer.setAnimationLoop(render);
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 0.85;
    renderer.autoClear = false;

    container.appendChild(renderer.domElement);

    window.addEventListener('resize', onWindowResize);

    // Create an OrthographicCamera
    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.set(-1, 6, -6);
    setCameraView();

    // controls.update();

    scene = new THREE.Scene();
    scene.background = new THREE.Color("#ffffff");

    setViewCube();

    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight1.position.set(1, 1, 0);
    scene.add(directionalLight1);

    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight2.position.set(-1, 1, 0);
    scene.add(directionalLight2);

    const directionalLight3 = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight3.position.set(0, 1, 1);
    scene.add(directionalLight3);

    const directionalLight4 = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight4.position.set(0, 1, -1);
    scene.add(directionalLight4);

    const ambientLight = new THREE.AmbientLight('#ffffff', 1); // color, intensity
    scene.add(ambientLight);

    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath('https://res.cloudinary.com/dbloegsbv/raw/upload/v1/jsm/');

    const loader = new GLTFLoader();
    loader.setDRACOLoader(dracoLoader);

    loader.load('https://cdn.shopify.com/3d/models/41684418358535aa/van1.glb', function (gltf) {
      carModel = gltf.scene;

      shodowMesh = new THREE.Mesh(
        new THREE.PlaneGeometry(2.8, 6.5),
        new THREE.MeshBasicMaterial({
          map: shadow, blending: THREE.MultiplyBlending, toneMapped: false, transparent: true
        })
      );
      shodowMesh.rotation.x = - Math.PI / 2;
      shodowMesh.rotation.z = Math.PI / 2;
      shodowMesh.renderOrder = 2;
      carModel.add(shodowMesh);

      scene.add(carModel);

      workPlane = new THREE.Mesh(
        new THREE.BoxGeometry(3, 0.01, 1.55),
        new THREE.MeshLambertMaterial({ color: "green" })
      );
      workPlane.material.visible = false;

      workPlane.position.set(-1.08, 2.37, 0); // Set position
      scene.add(workPlane);

      // Ladder plane
      ladderPlane = new THREE.Mesh(
        new THREE.BoxGeometry(3, 2, 0.01),
        new THREE.MeshLambertMaterial({color: 'green'})
      )
      ladderPlane.material.visible = false;

      ladderPlane.position.set(-1.08, 1.3, -0.85); 
      scene.add(ladderPlane);

      targetForDragging = new THREE.Mesh(
        new THREE.BoxGeometry(100, 0.01, 100),
        new THREE.MeshBasicMaterial()
      );
      targetForDragging.material.visible = false;

      raycaster = new THREE.Raycaster();
    });
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize((window.innerWidth - window.innerWidth * 0.04), window.innerHeight);
  }

  function render() {
    controls.update();
    renderer.render(scene, camera);
  }

  function isValueInScale(value, scale, radius, vanDiff) {
    for (let i = 0; i < scale.length; i += 2) {
        if (value + 100 >= (scale[i] + radius - vanDiff + 100 ) && value + 100 <= (scale[i + 1] - radius - vanDiff + 100)) {
          return i;
        }
    }
    return -1;
  }

  function updateSolarArea(xPos, modelName, flag) {
    let productInfo = availableProducts.filter((product) => product.type == modelName)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254;
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;

    if(modelName == "air_conditioner"){
      console.log(solar35Area, inchXPos)
      if(solar35Area.length > 0 ){
        // for(let i in solar35Area) {
        // 	if(isValueInScale(solar35Area[i], [startValue, endValue], 0, 0) >= 0){
        // 		solar35Area.splice(i, 1, inchXPos);
        // 		return;
        // 	}
        // }
        solar35Area = [inchXPos];
      } else {
        solar35Area.push(inchXPos)
      }
    } else if(modelName == "maxxair"){
      if(solar50Area.length > 0 ){
        solar50Area = [inchXPos];
      } else {
        solar50Area.push(inchXPos)
      }
    }

    // isValueInScale(inchXPos, addedState, 0, 0);

  }

  function checkIsAvailable(xPos, modelName, flag) {
    let productInfo = availableProducts.filter((product) => product.type == modelName)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254;
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;
    let startPointCheck, endPointCheck, centerPointCheck = -1;
    
    if(flag == 1) {
      startPointCheck = isValueInScale(startValue, addedState, 0, 0);
      endPointCheck = isValueInScale(endValue, addedState, 0, 0);
      centerPointCheck = isValueInScale(inchXPos, addedState, 0, 0);
    } else if(flag == 2) {
      const currentState = [...addedState];

      if(selectedIndexOfState >= 0)currentState.splice(selectedIndexOfState, 2);

      startPointCheck = isValueInScale(startValue, currentState, 0, 0);
      endPointCheck = isValueInScale(endValue, currentState, 0, 0);
      centerPointCheck = isValueInScale(inchXPos, currentState, 0, 0);

    } else {
      let modelIndex = isValueInScale(inchXPos, addedState, 0, 0);
      let startIndex = isValueInScale(inchXPos, addedState, xRadius/2, 0);
      let endIndex = isValueInScale(inchXPos, addedState, xRadius/2, 0);

      console.log(modelIndex, startIndex, endIndex)

      if(modelIndex == startIndex && modelIndex == endIndex) {

        console.log(modelIndex)
        return modelIndex
      } else {
        return -1;
      }
    }

    if(startPointCheck == -1 && endPointCheck == -1 && centerPointCheck == -1) {
      return true;
    } else return false;
  }

  function updateModelState(flag, modelType, xPos) {
    if(modelType == "ladder") return;

    let productInfo = availableProducts.filter((product) => product.type == modelType)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;

    switch(flag) {
      case 1: 
        addedState.push(startValue, endValue)
        break;
      case 2: 
        if(selectedIndexOfState >= 0) {
          addedState.splice(selectedIndexOfState, 2);
          addedState.splice(selectedIndexOfState, 0, startValue, endValue)
        }
        break;
      case 3:
        if(selectedIndexOfState >= 0) {
          addedState.splice(selectedIndexOfState, 2);
        }
        break;
    }
  }

  init();

</script>


{% schema %}
{
  "name": "t:sections.model-visualization.name",
  "class": "section spacing-section",
  "settings": [
    {
      "type": "range",
      "id": "desktop_height",
      "label": "t:sections.empty-space.settings.height.label",
      "default": 40,
      "min": 0,
      "max": 200,
      "step": 4,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "mobile_height",
      "label": "t:sections.empty-space.settings.height_mobile.label",
      "default": 28,
      "min": 0,
      "max": 200,
      "step": 4,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "t:sections.global.settings.header__colors.content",
      "info": "t:sections.global.settings.header__colors.info"
    },
    {
      "type": "color",
      "id": "color_background",
      "label": "t:sections.global.settings.color_background.label"
    },
    {
      "type": "color_background",
      "id": "gradient_background",
      "label": "t:sections.global.settings.gradient_background.label"
    }
  ],
  "presets": [
    {
      "name": "t:sections.model-visualization.presets.name"
    }
  ],
  "disabled_on": {
    "groups": [
      "custom.overlay"
    ]
  }
}
{% endschema %}
