<head>
	<meta charset="utf-8">
	<title>Van</title>
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<style>
    #shopify-chat {
      display: none;
    }
    .footer-group {
      display: none !important;
    }
		.threejs-container {
			position: fixed;
      z-index: 100;
      top: 0px;
      left: 0px;
			background: linear-gradient(180deg, #fff 60%, #e4e4e4) !important;
			margin: 0;
			color: #333;
			font-family: Monospace;
			font-size: 13px;
			line-height: 24px;
			overscroll-behavior: none;
			-webkit-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			user-select: none;
			overflow: hidden;
      width: 100vw;
      margin: 0 auto;
      margin-bottom: 50px;
      height: 100vh;
			display: flex;
		}
		#configurator-container {
			width: calc(100vw - 300px);
		}
		#side-section {
			width: 300px;
			border-left: 1px solid rgb(159, 159, 159);
			height: 100%;
			z-index: 1;
			background-color: #d3d3d3;
		}
		.d-flex {
			display: flex;
		}
		.items-container {
			position: absolute;
			bottom: 16px;
			left: 50%;
			transform: translateX(-50%);
      max-width: 80%;
		}
    .drag-items {
      overflow-x: auto;
      overflow-y: hidden;
    }
		.item-box {
			margin-left: 8px;
			margin-right: 8px;
			border-radius: 15px;
			text-align: center;
			cursor: grab;
			opacity: 0.8;
			transition: opacity .15s ease-in-out, transform .08s linear;
			position: relative;
      margin-bottom: 10px;
      margin-top: 10px;
		}
		.item-box .carted-item {
			position: absolute;
			top: -5px;
			right: -5px;
			background-color: red;
			border-radius: 50%;
			align-items: center;
			justify-content: center;
			width: 25px;
			height: 25px;
			color: white;
      display: none;
		}
		.item-box:active {
			cursor: grabbing;
			cursor: -moz-grabbing;
			cursor: -webkit-grabbing;
		}
		.item-box:hover {
			opacity: 1;
			transform: scale(1.04);
		}
		.item-img {
			width: 100px;
			height: 100px;
			border-radius: 15px;
			background-size: cover;
			box-shadow: 0.6px 0.6px 1.9px rgba(0, 0, 0, .035), 5px 5px 15px rgba(0, 0, 0, .07);
		}
		p {
			font-size: 11px;
			line-height: 1.5;
			margin-bottom: 12px;
		}
		#airconditioner {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/airconditioner.jpg?v=1711798448');
			display: block;
		}
		#maxxair {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/maxxair.jpg?v=1711798448');
			display: block;
		}
		#solar_panel200 {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/200W.jpg?v=1711798448');
			display: block;
		}
		#solar_panel50 {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/55W.jpg?v=1711798448');
			display: block;
		}
		#solar_panel30 {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/30W.jpg?v=1711798448');
			display: block;
		}
    #ladder {
			background-image: url('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/ladder.jpg?v=1714006260');
			display: block;
		}
		button {
			cursor: pointer;
			display: flex;
			justify-content: center;
		}
    button[disabled] {
      opacity: 0.5;
      cursor: not-allowed;
    }
		.action-btn-list {
			position: absolute;
			bottom: 125px;
			right: 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
		}
		.action-btn-list button {
			width: 40px;
			height: 40px;
			display: flex;
			align-items: center;
			justify-content: center;
			background: #333;
			border-radius: 22px;
			border: none;
		}
		.text-center {
			text-align: center;
		}
		.mb-3 {
			margin-bottom: 8px;
		}
		.text-title1 {
			color: #333;
			opacity: 0;
			animation: textAnimation 2s linear 3s infinite alternate;
		}
		.text-body1 {
			color: #333;
			font-size: 20px;
		}
		.items-container>div:first-child {
			position: relative;
			text-align: center;
		}
		@keyframes textAnimation {
			0% {
				opacity: 0;
			}

			100% {
				opacity: 0.7;
			}
		}
    #configurator-container {
      position: relative;
      border-radius: 20px;
    }
    .item-container .announce-bar {
      margin-bottom: 20px !important;
    }
		.van-detail {
			position: absolute;
			top: 20px;
			left: 50%;
			transform: translateX(-50%);
		}
		#rack_title {
			font-size: 24px;
			text-shadow: 0px 0px 4px #fff;
			color: black;
		}
		.tooltip .tooltiptext {
			visibility: hidden;
			width: 120px;
			background-color: rgba(17, 12, 46, 1);
			color: #fff;
			text-align: center;
			border-radius: 6px;
			padding: 5px 0;
			top: 35%;
    	margin-left: 10px;
			position: absolute;
			z-index: 1;
			transform: translateY(-23%);
      left: 100%;
		}
		.tooltip:hover .tooltiptext {
			visibility: visible;
		}
		.tooltip .tooltiptext:before {
			content: "";
			display: block;
			width: 0;
			height: 0;
			border-top: 9px solid transparent;
			border-bottom: 9px solid transparent;
			border-left: 9px solid rgba(17,9, 46, 1);
			position: absolute;
			left: -9px;
			top: 50%;
			transform: rotate(180deg) translateY(50%);
		}
    .left-tooltip {
			position: relative;
		}
		.left-tooltip .tooltiptext {
			visibility: hidden;
			width: 120px;
			background-color: rgba(17, 12, 46, 1);
			color: #fff;
			text-align: center;
			border-radius: 6px;
			padding: 5px 0;
			top: 35%;
    	margin-left: 10px;
			position: absolute;
			z-index: 1;
      right: 100%;
			margin-right: 8px;
			transform: translateY(-30%);
		}
		.left-tooltip:hover .tooltiptext {
			visibility: visible;
		}
		.left-tooltip .tooltiptext:after {
			content: "";
			display: block;
			width: 0;
			height: 0;
			border-top: 8px solid transparent;
			border-bottom: 8px solid transparent;
			border-right: 8px solid rgba(17, 9, 46, 1);
			position: absolute;
			top: 50%;
			transform: rotate(180deg) translateY(50%);
			right: -6px;
		}
    [data-tab-content] {
			display: none;
		}
		.active[data-tab-content] {
			display: block;
		}
		.tabs {
			display: flex;
			justify-content: space-around;
			list-style-type: none;
			margin: 0;
			padding: 0;
			border-bottom: 1px solid black;
			position: absolute;
			width: 300px;
			height: 50px;
		}
		.tab {
			cursor: pointer;
			padding: 10px;
			width: 100%;
			text-align: center;
      border-right: 1px solid #676767;
		}
		.tab.active {
			background-color: #676767;
			color: white;
		}
		.tab:hover {
			background-color: #AAA;
		}
		.tab-content {
			height: calc(100vh - 150px);
			overflow-y: auto;
			margin-top: 50px;
			margin-bottom: 100px;
			padding: 10px 10px;
		}
		.checkout-area {
			position: absolute;
			height: 100px;
			bottom: 0;
			width: 300px;
			border-top: 1px solid #333;
		}
		.checkout-area button {
			justify-content: center;
			font-family: "Josefin Sans", sans-serif;
			border-radius: 8px;
			border: 0;
			letter-spacing: 1px;
			color: #fff;
			background: #246eea;
			padding: 12px;
			white-space: nowrap;
			font-size: 16px;
			line-height: 1;
			text-transform: uppercase;
			transition: all 0.15s ease;
			text-decoration: none;
			display: flex;
			align-items: center;
			margin: 0 auto;
			width: 90%;
		}
		.checkout-area button:hover {
			-webkit-transform: translateY(-1px);
      transform: translateY(-1px);
			background: #4984ea;
		}
		#products-detail {
			display: flex;
			justify-content: space-between;
			margin: 0 auto;
			width: 90%;
			margin-top: 10px;
			margin-bottom: 4px;
			font-size: 16px;
			font-weight: bold;
		}
    .unaka-logo {
			position: absolute;
			top: 20px;
			left: 30px;
      z-index: 10;
		}
    .build-item {
			margin-top: 12px;
      border-bottom: 2px solid rgb(134, 134, 134);
      padding-bottom: 10px;
		}
		.build-item .item-overview {
			display: flex;
			align-items: center;
      justify-content: space-between;
		}
    .item-overview .product-info {
      display: flex;
      align-items: center;
    }
		.item-overview .item-name {
			font-size: 12px;
			display: -webkit-box;
			-webkit-line-clamp: 2;
			-webkit-box-orient: vertical;
			overflow: hidden;
			text-overflow: ellipsis;
			word-break: break-all;
      font-weight: bold;
      color: black;
      margin-left: 6px;
      text-decoration: underline;
      line-height: 16px;
		}
    .item-overview .remove-product {
      margin-left: 8px;
      border-radius: 4px;
      font-size: 22px;
    }
		.item-overview img {
			border: 1px solid rgb(134, 133, 133);
    	border-radius: 6px;
			margin-right: 6px;
		}
		.build-item .item-variants {
			margin-top: 6px;
			display: flex;
			flex-direction: column;
			margin-left: 12px;
		}
		.item-variants .variant {
			display: flex;
			align-items: center;
			justify-content: space-between;
      margin: 4px 0;
		}
		.item-variants .variant div {
			display: flex;
			align-items: center;
		}
		.item-variants .variant input{
			margin: 0;
			margin-right: 4px;
		}
    .item-variants .variant .price{
			font-weight: bold;
		}
    .item-variants .variant label{
			letter-spacing: -0.3px;
      font-size: 11px;
      line-height: 18px;
		}
		.build-item .divider {
			border: 1px solid rgb(159, 159, 159);
		}
    #viewHelper {
      display: flex;
    }
    #side-collapse {
			display: none;
		}
    .select-colors {
			display: flex;
			flex-wrap: wrap;
		}
		.color-item {
      display: block !important;
			width: 29px;
			height: 29px;
			border-radius: 20px;
			border: 2px solid #fff;
			margin: 3px;
			cursor: pointer;
			opacity: 0.7;
		}
		.color-item.color-selected {
			opacity: 1;
		}

		@media only screen and (max-width: 1350px) {
			.item-img {
				width: 80px;
				height: 80px;
			}
		}
		@media only screen and (max-width: 1024px) {
			.item-img {
				width: 70px;
				height: 70px;
				margin-bottom: 10px;
			}
			.item-name {
				display: none;
			}
			#configurator-container {
				width: 100vw;
			}
			#side-section {
				position: absolute;
				right: -300px;
				transition: right .4s;
				transition-timing-function: linear;
			}
			.van-detail {
				display: none;
			}
			.text-title1 {
				display: none;
			}
			.action-btn-list {
				/* bottom: 160px; */
				right: 8px;
			}
			.unaka-logo img{
				width: 60px;
			}
			#viewHelper {
				display: none;
			}
			#side-collapse {
				display: block;
				position: absolute;
				top: 30vh;
				left: -36px;
    		border: none;
				width: 36px;
				background-color: white;
				border-top-left-radius: 10px;
				border-bottom-left-radius: 10px;
			}
			#side-collapse div {
				padding: 14px 8px;
				transition: all .2s;
				z-index: 10;
			}
			#side-collapse div svg{
				transform: scaleY(2);
			}
			#side-collapse div.collapsed {
				text-align: left;
			}
			#side-collapse div.expanded {
				transform: rotate(180deg);
				text-align: right;
			}
		}

    #select-template {
			padding-top: 10px;
		}
		#select-template .selectable {
			display: flex;
			justify-content: center;
			margin-top: 20px;
			cursor: pointer;
		}
    .not-sell {
      color: red;
      font-size: 12px;
      line-height: 16px;
    }
    .loox-float-toggler-container .closeBtn{
      background-color: white;
      position: absolute;
      top: 9px;
      right: 40px;
      z-index: 1;
      /* color: white; */
      /* padding: 5px; */
      width: 18px;
      height: 18px;
      display: flex;
      justify-content: center;
      /* align-items: center; */
      /* font-size: 14px; */
      border-radius: 10px;
      cursor: pointer;
    }

    .loox-float-toggler-container {
      display: none !important;
    }
	</style>
</head>
<div class="threejs-container">
  <a class="unaka-logo" href="/">
    <img src="https://cdn.shopify.com/s/files/1/0412/9898/5124/files/Unaka_Brand_v2-03.png?v=1706796409&width=95" draggable="false" width="95" height="95"/>
  </a>
	<div id="configurator-container">
    <div class="van-detail">
      <h2 id="rack_title">Ford Transit Roof Rack - HSLD - 148 High Roof</h2>
    </div>
		<div id="container"></div>
		<div class="items-container">
			<div class="d-flex drag-items">
				<div class="item-box">
					<div class="item-img" id="airconditioner" draggable="false">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Air Conditioner</p>
					</div>
				</div>
				<div class="item-box">
					<div class="item-img" id="maxxair" draggable="false">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Maxxair</p>
					</div>
				</div>
				<div class="item-box">
					<div class="item-img" id="solar_panel200" draggable="false">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Solar Panel<br />(200W)</p>
					</div>
				</div>
				<div class="item-box">
					<div class="item-img" id="solar_panel50" draggable="false">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Solar Panel<br />(55W)</p>
					</div>
				</div>
				<div class="item-box">
					<div class="item-img" id="solar_panel30" draggable="false">
            <div class="carted-item">1</div>
          </div>
					<div class="item-name">
						<p>Solar Panel<br />(30W)</p>
					</div>
				</div>
        <div class="item-box">
          <div class="item-img" id="ladder" draggable="false">
            <div class="carted-item">1</div>
          </div>
          <div class="item-name">
            <p>Ladder</p>
          </div>
        </div>
			</div>
		</div>
		<div class="action-btn-list">
      <button class="mb-3 left-tooltip" id="deleteButton" disabled>
        <span class="tooltiptext">Delete Items</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 1024 1024">
          <path fill="#fff"
            d="M160 256H96a32 32 0 0 1 0-64h256V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64h-64v672a32 32 0 0 1-32 32H192a32 32 0 0 1-32-32zm448-64v-64H416v64zM224 896h576V256H224zm192-128a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32m192 0a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32" />
        </svg>
      </button>

      <button class="mb-3 left-tooltip" id="resetButton" disabled>
        <span class="tooltiptext">Reset Items</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 21 21">
          <g fill="none" fill-rule="evenodd" stroke="#fff" stroke-linecap="round" stroke-linejoin="round">
            <path d="M6.5 3.5c-2.414 1.377-4 4.022-4 7a8 8 0 1 0 8-8" />
            <path d="M6.5 7.5v-4h-4" />
          </g>
        </svg>
      </button>

      <button class="mb-3 left-tooltip" id="imgDownloadBtn">
        <span class="tooltiptext">Download Image</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
          <g fill="none" stroke="#ffffff" stroke-linecap="round" stroke-width="1.5">
            <path stroke-linejoin="round"
              d="M21.25 13V8.5a5 5 0 0 0-5-5h-8.5a5 5 0 0 0-5 5v7a5 5 0 0 0 5 5h6.26" />
            <path stroke-linejoin="round"
              d="m3.01 17l2.74-3.2a2.2 2.2 0 0 1 2.77-.27a2.2 2.2 0 0 0 2.77-.27l2.33-2.33a4 4 0 0 1 5.16-.43l2.47 1.91M8.01 10.17a1.66 1.66 0 1 0-.02-3.32a1.66 1.66 0 0 0 .02 3.32" />
            <path stroke-miterlimit="10" d="M18.707 20v-5" />
            <path stroke-linejoin="round" d="m16.414 17.895l1.967 1.967a.459.459 0 0 0 .652 0L21 17.895" />
          </g>
        </svg>
      </button>
      
      <button id="camChangeBtn" class="left-tooltip">
        <span class="tooltiptext">Change Camera</span>
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 72 72">
					<circle cx="22.258" cy="26.11" r="3" fill="#ffffff" />
					<circle cx="46.153" cy="26.11" r="3" fill="#ffffff" />
					<path fill="none"
						d="M46.153 16.11c-5.514 0-10 4.486-10 10s4.486 10 10 10s10-4.485 10-10s-4.485-10-10-10m0 13c-1.654 0-3-1.346-3-3s1.346-3 3-3s3 1.346 3 3s-1.345 3-3 3m-23.895-13c-5.514 0-10 4.486-10 10s4.486 10 10 10s10-4.485 10-10c0-5.514-4.486-10-10-10m0 13c-1.655 0-3-1.346-3-3s1.345-3 3-3s3 1.346 3 3s-1.346 3-3 3m-1.829 15.127l6.998.815c.376-.147 2.842-.37 2.842-.37s2.814 1.782 3.188 4.571c.375 2.79-4.643 3.815-4.869 3.815c-2.515 0-3.628-4.56-3.632-4.603l-4.527-.695l.57 2.249c.285 1.13.424 2.292.413 3.458l-.016 1.613c0 .447 1.387 1.808 1.865 1.808h24.826V40.031H20.43z" />
					<path fill="#fff" d="m51.727 42.827l-.005.003l.164-.057z" />
					<path fill="#fff"
						d="m61.183 54.97l-.238-13.608s-9.289 1.498-9.246 1.482c.008-.003.015-.01.023-.014l-3.445.983v9.22l3.629 1.034l-.142-.043c-.018-.005 9.418.946 9.418.946" />
					<path fill="#ffffff"
						d="M24.218 48.465c.113.02 2.597 3.539 2.675 3.603c.064.054 3.39 1.027 3.602 1c.21-.029 2.295-2.027 2.353-2.135c.019-.034 1.175-1.76.83-3.2c-.243-1.01-2.005-1.881-2.07-1.93c-.158-.121-3.69-.735-3.7-.737c0 0-15.537-2.56-15.65-2.638l-4.365-3.515l-1.332 8.05l4.745-.735c.111-.017 12.912 2.236 12.912 2.236" />
					<g fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
						<path d="M21.396 40.03h26.692v16.868H23.26c-1.03 0-1.865-.81-1.865-1.808v-3.124" />
						<path
							d="m7.915 39.39l-1.152 7.573l5.017-.779l13.594 2.492a4.105 4.105 0 1 0 2.359-3.435l-15.268-2.799z" />
						<circle cx="46.154" cy="26.11" r="10" />
						<circle cx="46.154" cy="26.11" r="3" />
						<circle cx="22.258" cy="26.11" r="10" />
						<circle cx="22.258" cy="26.11" r="3" />
						<path d="m52.053 53.068l8.892 2.113v-13.82l-8.892 2.412" />
					</g>
				</svg>
			</button>
		</div>
	</div>
  <div id="side-section">
    <div id="side-collapse" >
      <div class="collapsed">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 256 256"><path fill="currentColor" d="M210.84 205.13a12 12 0 0 1-16 5.71l-152-72a12 12 0 0 1 0-21.68l152-72a12 12 0 1 1 10.27 21.69L76 128l129.1 61.15a12 12 0 0 1 5.74 15.98"/></svg>
      </div>
    </div>
    <ul class="tabs">
      <li data-tab-target="#build-list" class="active tab">Build List</li>
      <li data-tab-target="#rack-tab" class="tab">Van</li>
      <li data-tab-target="#select-template" class="tab">Template</li>
    </ul>
    <div class="tab-content">
      <div id="build-list" data-tab-content class="active">
      </div>
      <div id="rack-tab" data-tab-content>
        <div>Select van color</div>
        <div class="select-colors" id="color-selectable">
          <div class="color-item color-selected" style="background-color: rgb(255, 255, 255);"></div>
          <div class="color-item" style="background-color: rgb(205, 36, 0);"></div>
          <div class="color-item" style="background-color: rgb(0, 0, 0);"></div>
          <div class="color-item" style="background-color: rgb(173, 175, 184);"></div>
          <div class="color-item" style="background-color: rgb(141 140 144);"></div>
          <div class="color-item" style="background-color: rgb(185, 168, 133);"></div>
          <div class="color-item" style="background-color: rgb(146, 17, 18);"></div>
          <div class="color-item" style="background-color: rgb(72, 115, 163);"></div>
          <div class="color-item" style="background-color: rgb(59, 82, 67);"></div>
          <div class="color-item" style="background-color: rgb(146, 173, 62);"></div>
        </div>
      </div>

      <div id="select-template" data-tab-content>
        <div class="selectable">
          <img src="https://cdn.shopify.com/s/files/1/0412/9898/5124/files/temp-1.png?v=1716430453&width=240" width="240" height='' draggable="false" id="temp_1"/>
        </div>
      </div>
    </div>
    <div class="checkout-area">
      <div id="products-detail">
        <div><span id="products-num">0</span> Items</div>
        <div>$<span id="products-cost">0</span></div>
      </div>
      <button id="addCartBtn">
        Checkout
        &nbsp;
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 50 50"><path fill="#fff" d="M25 42c-9.4 0-17-7.6-17-17S15.6 8 25 8s17 7.6 17 17s-7.6 17-17 17m0-32c-8.3 0-15 6.7-15 15s6.7 15 15 15s15-6.7 15-15s-6.7-15-15-15"/><path fill="#fff" d="m24.7 34.7l-1.4-1.4l8.3-8.3l-8.3-8.3l1.4-1.4l9.7 9.7z"/><path fill="#fff" d="M16 24h17v2H16z"/></svg>
      </button>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js" async></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js" async></script>

<script type="importmap" async>
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js"
    }
  }
</script>

<script>
  const tabs = document.querySelectorAll('[data-tab-target]')
  const tabContents = document.querySelectorAll('[data-tab-content]')

  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const target = document.querySelector(tab.dataset.tabTarget)
      tabContents.forEach(tabContent => {
        tabContent.classList.remove('active')
      })
      tabs.forEach(tab => {
        tab.classList.remove('active')
      })
      tab.classList.add('active')
      target.classList.add('active')
    })
  })

  document.getElementById("side-collapse").addEventListener('click', function () {
    let iconElement = this.firstChild.nextSibling
    if(iconElement.classList.contains('expanded')){ 
      iconElement.classList.remove("expanded");
      iconElement.classList.add("collapsed");
      document.getElementById('side-section').style.right = '-300px'
    } else if(iconElement.classList.contains('collapsed')) {
      iconElement.classList.remove("collapsed");
      iconElement.classList.add("expanded");
      document.getElementById('side-section').style.right = '0px'
    }
  });

  var closeActionBar = document.createElement('div');
  closeActionBar.classList.add('closeBtn');
  var list = document.getElementsByClassName('loox-float-toggler-container')[0];
  list.insertBefore(closeActionBar, list.children[0])
</script>

<script async src="https://unpkg.com/es-module-shims@1.3.0/dist/es-module-shims.js"></script>
<script async src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script type="module">
  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js';
  import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/controls/OrbitControls.js';
  import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/loaders/GLTFLoader.js';
  import { DRACOLoader } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/loaders/DRACOLoader.js';
  import { ViewHelper } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/helpers/ViewHelper.js';
  import { RGBELoader } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/loaders/RGBELoader.js';
  import { GroundedSkybox } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/objects/GroundedSkybox.js';

  let vanArea = [-16.535, 101.968];
  let addedState = [];
  let selectedIndexOfState = -1;
  let solar35Area = [];
  let solar55Area = [];

  let canvas, camera, scene, renderer;
  let cameraType = "perspective";
  let canvasContainer = document.getElementById("container");

  let grid;
  let controls;

  let selectedFeature;
  var targetForDragging;

  let isDragging = false;

  let intersects;
  let raycaster;
  let workPlane;

  let edges;
  let line;
  let edgeLine = null;
  const lineMaterial = new THREE.LineBasicMaterial({ color: "#fff" });

  let vanItem;
  let cloneVanItem = null;
  let loadItemDirectory;

  let carModel;
  let shodowMesh;
  let model = null;

  let helper;
  let clock;
  let offsetTopCanvas

  let selectedItem = '';
  let ladderPlane;
  const cutOffArea = [3.19, 25.7, 32.09, 64.72, 71.11, 85.19];
  const vanDiff = 3.2

  let bodyMaterial;
  let bodyMesh;

  let availableProducts = [
    {
      "htmlId": "",
      "type": "rack",
      "availability": true,
      "handle": "transithsld148-roof-rack",
      "id": 43238854328539,
      "price": 0,
      "quantity": 1,
      "xRadius": null
    },
    {
      "htmlId": "airconditioner",
      "type": "air_conditioner",
      "availability": true,
      "handle": "dometic-rtx-2000",
      "id": 43261478764763,
      "price": 0,
      "quantity": 0,
      "xRadius": 16.56
    },
    {
      "htmlId": "maxxair",
      "type": "maxxair",
      "availability": true,
      "handle": "maxxair-fan-deluxe",
      "id": 40771325264036,
      "price": 0,
      "quantity": 0,
      "xRadius": 12.75
    },
    {
      "htmlId": "solar_panel200",
      "type": "solar200",
      "availability": true,
      "handle": "new-powa-200w-monocrystalline-solar-panel-12v",
      "id": 42641211228379,
      "price": 0,
      "quantity": 0,
      "xRadius": 13.5
    },
    {
      "htmlId": "solar_panel50",
      "type": "solar55",
      "availability": false,
      "handle": "",
      "id": 45081892683995,
      "price": 0,
      "quantity": 0,
      "xRadius": 12.75,
      "title": "Rich Solar Mega 55 Watt 12 Volt Solar Panel",
      "image": "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/Rich-Solar-55W-12V-Solar-Panel_7619b189-0847-457f-b220-26773a5ab5cb.png?v=1717015803",
      "url": "https://shop.explorist.life/shop/all-products/pre-order-rich-solar-55w-12v-solar-panel"
    },
    {
      "htmlId": "solar_panel30",
      "type": "solar30",
      "availability": false,
      "handle": "",
      "id": 45081892683995,
      "price": 0,
      "quantity": 0,
      "xRadius": 16.75,
      "title": "Rich Solar Mega 35 Watt 12 Volt Solar Panel",
      "image": "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/Rich-Solar-35W-12V-Solar-Panel_e5266152-4c97-4d03-8a8c-30e6446a354b.png?v=1717015802",
      "url": "https://shop.explorist.life/shop/all-products/pre-order-rich-solar-35w-12v-solar-panel/"
    },
    {
      "htmlId": "",
      "type": "ac_cross",
      "availability": true,
      "handle": "ford-transit-hsld-roof-rack-maxxfan-cross-bars-1",
      "id": 44018089623771,
      "price": 0,
      "quantity": 0
    },
    {
      "htmlId": "",
      "type": "solar_cross",
      "availability": true,
      "handle": "ford-transit-high-speed-low-drag-roof-rack-cross-bars",
      "id": 43279255503067,
      "price": 0,
      "quantity": 0
    },
    {
      "htmlId": "",
      "type": "max_cross",
      "availability": true,
      "handle": "ford-transit-hsld-roof-rack-maxxfan-cross-bars",
      "id": 44018083234011,
      "price": 0,
      "quantity": 0
    },
    {
      "htmlId": "ladder",
      "type": "ladder",
      "availability": true,
      "handle": "transit-side-mount-ladder-high-roof",
      "id": 44020238385371,
      "price": 0,
      "quantity": 0
    },
    {htmlId: '', type: 'air_conditioner_nodamic', handle: '', id: null, price: 0, quantity: 0, xRadius: 15.5, centerDevi: 5.2}
  ]
  

  const shadow = new THREE.TextureLoader().load('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/ford_ao.png?v=1711858184');

  const dracoLoader = new DRACOLoader();
  dracoLoader.setDecoderPath('https://res.cloudinary.com/dbloegsbv/raw/upload/v1/jsm/');

  const loader = new GLTFLoader();
  loader.setDRACOLoader(dracoLoader);

  let delelteBtn = document.getElementById("deleteButton")

  canvasContainer.addEventListener('mousedown', (event) => {
    if (event.button === 0) {
      offsetTopCanvas = canvasContainer.getBoundingClientRect().top;
      isDragging = true;
      doMouseDown(event.clientX, event.clientY - offsetTopCanvas);
    }
  });

  canvasContainer.addEventListener('mousemove', (event) => {
    if (selectedFeature) {
      if (selectedFeature.parent.name !== "van" && selectedFeature.name !== "ladder") {
        if (isDragging) {
          offsetTopCanvas = canvasContainer.getBoundingClientRect().top;
          let a = 2 * (event.clientX / ((window.innerWidth < 1024 ? window.innerWidth: window.innerWidth - 300))) - 1;
          let b = 1 - 2 * (event.clientY - offsetTopCanvas) / (window.innerHeight);
          raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
          intersects = raycaster.intersectObject(targetForDragging);
          if (intersects.length === 0) {
            return;
          }

          let objectHit = intersects[0].object;
          let locationX = intersects[0].point.x;
          let locationZ = intersects[0].point.z;
          let coords = new THREE.Vector3(locationX, 0, locationZ);
          coords = scene.worldToLocal(coords);

          const boundingBox = new THREE.Box3().setFromObject(selectedFeature);
          const size = new THREE.Vector3();
          boundingBox.getSize(size);

          const selectedFeatureWidth = size.x;
          let checkCollision = true;
          const xPos = Math.min(0.428 - selectedFeatureWidth / 2, Math.max(-2.24, coords.x));

          if(selectedFeature.name != 'ladder' && selectedFeature.name != 'solar30' && selectedFeature.name != 'solar55'){
            checkCollision = checkIsAvailable(xPos, selectedFeature.name, 2);
          }

          if(selectedFeature.name == "air_conditioner"){
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 7.001, vanDiff)  >= 0 && checkCollision) {
              updateSolarArea(xPos, selectedFeature.name, 2)
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos)
            } 
          } else if(selectedFeature.name == 'maxxair'){
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 7, vanDiff)  >= 0 && checkCollision){
              updateSolarArea(xPos, selectedFeature.name, 2)
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos)
            } 
          } else if(selectedFeature.name == 'solar30') {
            const movedItemIndex = solar35Area.findIndex((area) => area.moved);
            selectedFeature.parent.position.x = -1 * solar35Area[movedItemIndex].position * 0.0254;
            selectedFeature.parent.position.z = 0;
            solar35Area[movedItemIndex].moved = false;
          } else if(selectedFeature.name == 'solar55') {
            const movedItemIndex = solar55Area.findIndex((area) => area.moved);
            selectedFeature.parent.position.x = -1 * solar55Area[movedItemIndex].position * 0.0254;
            selectedFeature.parent.position.z = 0;
            solar55Area[movedItemIndex].moved = false;
          }else {
            if(checkCollision) {
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos)
            }
          }
          render();
        }
      }
      controls.enableRotate = false;
    }
    else {
      controls.enableRotate = true;
    }
  });

  canvasContainer.addEventListener('mouseup', () => {
    isDragging = false;
  });
  
  document.addEventListener('DOMContentLoaded', function () {
    canvas = document.querySelector('canvas[data-engine="three.js r162"]');
  });

  document.getElementById('color-selectable').addEventListener('click', function(event) {

    if(event.target.classList.contains("color-item")) {
      const options = document.querySelectorAll('.color-item');
      options.forEach(option => {
        option.classList.remove('color-selected')
      })
      event.target.classList.add('color-selected');
      bodyMaterial = new THREE.MeshPhysicalMaterial( {
        color: event.target.style.backgroundColor ?? 0xffffff, metalness: 1.0, roughness: 0.9, clearcoat: 1.0, clearcoatRoughness: 0.08
      });
      bodyMesh.material = bodyMaterial
    }
  })

  document.getElementById('select-template').addEventListener('click', function(event) {
    if (event.target.id.includes('temp')) {
      let tempOrder = ['solar_panel200', 'solar_panel200', 'maxxair', 'airconditioner', 'solar_panel50', 'solar_panel30'];

      resetConfig();

      function clickWithDelay(elements, delay) {
        elements.forEach((elementId, index) => {
          setTimeout(() => {
            var elem = document.getElementById(elementId);
            if (elem) {
              elem.click();
            }
          }, index * delay);
        });
      }

      clickWithDelay(tempOrder, 500);
    }
  });

  document.getElementById('deleteButton').addEventListener('click', function () {
    if (selectedFeature) {
      scene.remove(selectedFeature.parent);
      this.disabled = true;
      calcPrice(selectedFeature.name, false, null)
      updateModelState(3, selectedFeature.name, selectedFeature.parent.position.x)
      render();
      selectedFeature = null;
    }
    let totalQuantity = 0;

    availableProducts.map((product) => {
      if (product.type != 'rack') totalQuantity += product.quantity;
    })
    if (totalQuantity === 0)
      handleDisableResetBtn()
  });

  function handleEnableResetBtn() {
    let resetBtn = document.getElementById("resetButton");
    resetBtn.disabled = false;
  }
  function handleDisableResetBtn() {
    let resetBtn = document.getElementById("resetButton");
    resetBtn.disabled = true;
  }

  document.getElementById('addCartBtn').addEventListener('click', async function() {
    let cartItems = []
    availableProducts.map((product) => {
      if(product.price > 0 && product.quantity > 0) {
        cartItems.push({
          'id': product.id,
          'quantity': product.quantity
        })
      }
    });

    const formData = {'items': cartItems};

    if(cartItems.length > 0) {
      let token = '';
      await fetch(window.Shopify.routes.root + 'cart/clear.js',{
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
      })
      .then(response => {
        return response.json();
      })
      .then((data) => {
        token = data.token;
      })
      .catch((error) => {
        console.error('Error:', error);
        return false;
      });

      await fetch(window.Shopify.routes.root + 'cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        return response.json();
      })
      .then((addedData) => {
        gotoCheckout(token)
      })
      .catch((error) => {
        console.error('Error:', error);
        return false;
      });
    } 
  });

  document.getElementById('imgDownloadBtn').addEventListener('click', function () {
    // Render the WebGL scene to the canvas
    renderer.render(scene, camera);

    // Capture the WebGL canvas content
    var webGLCanvas = renderer.domElement;
    var webGLImage = webGLCanvas.toDataURL('image/png');

    // Ensure all images within the HTML content are loaded
    var images = document.querySelectorAll('.threejs-container img');
    var imagePromises = Array.from(images).map(img => {
      return new Promise((resolve, reject) => {
        if (img.complete) {
          resolve();
        } else {
          img.onload = resolve;
          img.onerror = reject;
          // Handle cross-origin images
          img.crossOrigin = 'anonymous';
        }
      });
    });

    // Once all images are loaded, use html2canvas to capture the HTML content
    Promise.all(imagePromises).then(() => {
      // Temporarily show the full build list
      const buildList = document.querySelector('#build-list');
      buildList.style.maxHeight = '9000px';

      // Create a temporary container to hold the canvas and build list
      const tempContainer = document.createElement('div');
      tempContainer.style.position = 'absolute';
      tempContainer.style.top = '-9999px';
      tempContainer.style.left = '-9999px';
      document.body.appendChild(tempContainer);

      // Clone the canvas and build list into the temporary container
      const canvasClone = webGLCanvas.cloneNode(true);
      const buildListClone = buildList.cloneNode(true);

      tempContainer.appendChild(canvasClone);
      tempContainer.appendChild(buildListClone);

      return html2canvas(tempContainer, {
        useCORS: true, // Enable CORS for html2canvas
      }).then(htmlCanvas => {
        // Remove the temporary container
        document.body.removeChild(tempContainer);

        // Create a new canvas to combine both images
        var combinedCanvas = document.createElement('canvas');
        combinedCanvas.width = htmlCanvas.width;
        combinedCanvas.height = htmlCanvas.height;
        var context = combinedCanvas.getContext('2d');

        // Draw the HTML content first
        context.drawImage(htmlCanvas, 0, 0);

        // Create an image element for the WebGL content
        var webGLImageElement = new Image();
        webGLImageElement.src = webGLImage;
        webGLImageElement.onload = function () {
          // Draw the WebGL content on top of the HTML content
          context.drawImage(webGLImageElement, 0, 0);

          // Convert the combined canvas to a data URL
          var combinedImageData = combinedCanvas.toDataURL('image/png');

          // Create a PDF document using jsPDF
          const { jsPDF } = window.jspdf;
          const pdf = new jsPDF({
            orientation: 'portrait',
            unit: 'px',
            format: [combinedCanvas.width, combinedCanvas.height]
          });

          // Add the combined image to the PDF
          pdf.addImage(combinedImageData, 'PNG', 0, 0, combinedCanvas.width, combinedCanvas.height);

          // Save the PDF
          pdf.save('scene.pdf');
        };
      });
    }).catch(error => {
      console.error('An error occurred while capturing the content:', error);
    });
  });

  document.getElementById('camChangeBtn').addEventListener('click', function () {
    const cameraPosition = camera.position;
    const widthValue = window.innerWidth < 1024 ? window.innerWidth : (window.innerWidth - 300)

    if (cameraType === "perspective") {
      camera = new THREE.OrthographicCamera(-widthValue / 340, widthValue / 340, window.innerHeight / 340, -window.innerHeight / 340, 1, 10000);
      cameraType = "orthographic"
    }
    else {
      camera = new THREE.PerspectiveCamera(40, widthValue / window.innerHeight, 1, 10000);
      cameraType = "perspective"
    }
    camera.position.set(cameraPosition.x, cameraPosition.y, cameraPosition.z);
    setCameraView();
    setViewCube()
  });

  document.getElementById('resetButton').addEventListener('click', resetConfig);

  var productElements = document.getElementsByClassName("item-img");

	for (var i = 0; i < productElements.length; i++) {
    productElements[i].addEventListener('click', event => { handleClickProduct(event); handleEnableResetBtn(); }, false);
  }

  function getPrices() {
    const dataPromises = availableProducts.map(async (product) => {
      if(product.availability) {
        const response = await fetch(window.Shopify.routes.root + `products/${product.handle}.js`);
        const productData = await response.json();
        return productData;
      } 
      else return product;
    });
   
    Promise.all(dataPromises)
      .then(data => {
        const priceProducts = availableProducts.map((product, index) => {
          let productPrice = 0;
          const productData = data[index];

          if (productData.id === product.id) {
            productPrice = productData.price / 100;
          } else {
            const variant = productData.variants.find(variant => variant.id === product.id);
            if (variant) {
              productPrice = variant.price / 100;
            }
          }
          if(product.type == 'rack') {
            totalPrice = productPrice;
            document.getElementById('products-num').innerHTML = 1
            document.getElementById("products-cost").innerHTML = productPrice;
          }
          return { ...product, price: productPrice, title: productData?.title, image: productData?.featured_image ?? product.image, variants: productData?.variants, url: productData?.url };
        });

        updateBuildState(priceProducts);
        availableProducts = priceProducts
      })
      .catch(error => console.error('Error fetching product data:', error));
  }

  getPrices();

  function excludeRanges(vanArea, addedState) {
    let ranges = [];
    for (let i = 0; i < addedState.length; i += 2) {
        ranges.push([addedState[i], addedState[i + 1]]);
    }
    ranges.sort((a, b) => a[0] - b[0]);
    let result = [];
    let currentStart = vanArea[0];
    let currentEnd = vanArea[1];

    for (let range of ranges) {
      let [rangeStart, rangeEnd] = range;
      if (rangeStart > currentEnd) continue;
      if (rangeStart > currentStart) {
          result.push(currentStart, rangeStart);
      }
      currentStart = Math.max(currentStart, rangeEnd);
    }

    if (currentStart < currentEnd) {
      result.push(currentStart, currentEnd);
    }
    return result;
	}

	function findFittingIntervalIndex(result, radius) {
    let requiredLength = 2 * radius;
    for (let i = 0; i < result.length; i += 2) {
      let intervalStart = result[i];
      let intervalEnd = result[i + 1];
      if (intervalEnd - intervalStart >= requiredLength) {
        return i;
      }
    }
    return -1;
	}

	function getIntersectionIntervals(intervals1, intervals2, diff) {
    let intersections = [];

    for (let i = 0; i < intervals1.length; i += 2) {
      let start1 = intervals1[i];
      let end1 = intervals1[i + 1];

      for (let j = 0; j < intervals2.length; j += 2) {
        let start2 = intervals2[j] - diff - vanDiff;
            let end2 = intervals2[j + 1] + diff - vanDiff;
        let maxStart = Math.max(start1, start2);
        let minEnd = Math.min(end1, end2);
        if (maxStart < minEnd) {
            intersections.push(maxStart, minEnd);
        }
      }
    }
    return intersections;
	}

	function getAvailablePoint(selectedItem) {
		let result = excludeRanges(vanArea, addedState);

		if(selectedItem.type == 'air_conditioner') {
			let intersections = getIntersectionIntervals(result, cutOffArea, selectedItem.xRadius - 7.001);
			let canIndex = findFittingIntervalIndex(intersections, selectedItem.xRadius);
			let xCenter = intersections[canIndex] + selectedItem.xRadius;
			let positionX = -1 * xCenter * 0.0254;
			return positionX;
		} else if(selectedItem.type == 'maxxair') {
			let intersections = getIntersectionIntervals(result, cutOffArea, selectedItem.xRadius - 7);
			let canIndex = findFittingIntervalIndex(intersections, selectedItem.xRadius);
			let xCenter = intersections[canIndex] + selectedItem.xRadius;
			let positionX = -1 * xCenter * 0.0254;
			return positionX;
		} else {
			let canIndex = findFittingIntervalIndex(result, selectedItem.xRadius);
			let xCenter = result[canIndex] + selectedItem.xRadius;
			let positionX = -1 * xCenter * 0.0254;
			return positionX;
		}

	}

	function handleClickProduct(event){
		let positionX = 0;
		let positionY = 2.35;
		let positionZ = 0;
		model = null;
		vanItem = event.target;
		let selectedItem = availableProducts.filter(product => product.htmlId == event.target.id)[0];
		if(!selectedItem) return;

		if(selectedItem.type == 'ladder') {
			if(selectedItem.quantity > 0 ) return false;
			positionX = -0.6;
			positionY = 1.1717;
			positionZ = -0.97864;
		} else{
			positionY = 2.35;
			positionZ = 0;
			if(selectedItem.type == 'solar30') {
				let acItem = availableProducts.filter(product => product.type == 'air_conditioner')[0];
				if (selectedItem.quantity >= acItem.quantity) return false;

				const newSolarPosition = solar35Area.findIndex((area) => !area.confState );
				if(solar35Area.length > 0 && newSolarPosition >= 0) {
          
          positionX = -1 * solar35Area[newSolarPosition].position * 0.0254;
          let curArea = [...solar35Area];
          solar35Area[newSolarPosition].confState = true;
        }
				else return;
			} else if(selectedItem.type == 'solar55') {
				let fanItem = availableProducts.filter(product => product.type == 'maxxair')[0];
				if (selectedItem.quantity >= fanItem.quantity) return false;

				const newSolarPosition = solar55Area.findIndex((area) => !area.confState );;
				if(solar55Area.length > 0 && newSolarPosition >= 0){
          positionX = -1 * solar55Area[newSolarPosition].position * 0.0254;
          solar55Area[newSolarPosition].confState = true;
        }
				else return;
			} else {
				positionX = getAvailablePoint(selectedItem);
				if(!positionX) return;
				updateModelState(1, selectedItem.type, positionX);
			}
		}

		switch (event.target.id) {
      case "airconditioner":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/3c312cc59fdb9f81/airconditioner.glb";
        break;
      case "maxxair":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/c3eeb44577bd8f6a/maxxair.glb";
        break;
      case "solar_panel200":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/41179ec7afded29e/200W.glb";
        break;
      case "solar_panel50":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/cfce53c8523cbc41/55W.glb";
        break;
      case "solar_panel30":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/dfcf1aaf24802514/30W.glb";
        break;
      case "ladder":
        loadItemDirectory = "https://cdn.shopify.com/3d/models/e1c66ba4aca3d154/ladder.glb";
        break;
    }

    const loadModel = (url) => {
      return new Promise((resolve, reject) => {
        loader.load(url, function (gltf) {
          resolve(gltf.scene);
        }, undefined, reject);
      });
    };

    loadModel(loadItemDirectory)
      .then((modelItem) => {
        model = modelItem;
				model.position.x = positionX;
				model.position.y = positionY;
				model.position.z = positionZ;
				scene.add(model);

				updateSolarArea(positionX, selectedItem.type, 1)
				calcPrice(selectedItem.type, true, model);
      })
      .catch((error) => {
        console.error('An error occurred while loading the model:', error);
      });
  }

  function gotoCheckout(token) {
    window.open(`/checkouts/cn/${token}`, '_blank')
  }

  function resetConfig() {
    let models = scene.children.filter((group) => 
      group?.children[0]?.name == 'maxxair' || 
      group?.children[0]?.name == 'air_conditioner' || 
      group?.children[0]?.name == 'solar200' || 
      group?.children[0]?.name == 'solar55' || 
      group?.children[0]?.name == 'solar30'|| 
      group?.children[0]?.name == 'ladder' );

    for(let x in models) {
      scene.remove(models[x])
    }

    let productList = [...availableProducts]

    productList = productList.map(product => {
      let newProduct = {...product};

      if(newProduct.type == 'rack') newProduct.quantity = 1;
      else newProduct.quantity = 0;

      handleDisableResetBtn()

      return newProduct
    });

    availableProducts = productList;

    addedState = [];
		selectedIndexOfState = -1;
		solar35Area = [];
		solar55Area = [];

    updateCartState()
    updateBuildState(productList)
    calculatePrice(productList)
  }

  function doMouseDown(x, y) {
    controls.enableRotate = false;
    if (selectedFeature) {
      removeEdgeLines(selectedFeature);
      selectedFeature = null;
      selectedIndexOfState = -1;
    }
    scene.remove(targetForDragging);
    delelteBtn.disabled = true;

    let a = 2 * x / ((window.innerWidth < 1024 ? window.innerWidth : window.innerWidth - 300)) - 1;
    let b = 1 - 2 * y / window.innerHeight;
    raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
    intersects = raycaster.intersectObjects(scene.children);
    if (intersects.length == 0) {
      return false;
    }
    let item = intersects[0];
    let objectHit = item.object;
    if (objectHit.parent &&
      objectHit.parent.name != "" &&
      objectHit.parent.name != "van" &&
      objectHit != workPlane &&
      objectHit != shodowMesh) {
      scene.add(targetForDragging);
      targetForDragging.position.set(0, item.point.y, 0);

      if (objectHit != selectedFeature) {
        selectedFeature = objectHit;
        addEdgeLines(selectedFeature);
        delelteBtn.disabled = false;
        selectedIndexOfState = checkIsAvailable(objectHit.parent.position.x, selectedFeature.name, 3);
      }
      else {
        selectedFeature = null;
        removeEdgeLines(selected);
        delelteBtn.disabled = true;
        selectedIndexOfState = -1;
      }
      render();
    }
  }


  function addEdgeLines(object) {
    if (edgeLine) {
      object.remove(edgeLine);
      edgeLine.geometry.dispose();
      edgeLine.material.dispose();
    }
    const edges = new THREE.EdgesGeometry(object.geometry);
    edgeLine = new THREE.LineSegments(edges, lineMaterial);
    object.add(edgeLine);
  }

  function removeEdgeLines(object) {
    if (edgeLine) {
      object.remove(edgeLine);
      edgeLine.geometry.dispose();
      edgeLine.material.dispose();
      edgeLine = null;
    }
  }

  function calcPrice(modelName, flag, model) {
    let addProduct = {}

    switch (modelName) {
      case "air_conditioner":
        addProduct = availableProducts[1];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[1] = addProduct;

        break;
      case "maxxair":
        addProduct = availableProducts[2];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[2] = addProduct;
        break;
      case "solar200":
        addProduct = availableProducts[3];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[3] = addProduct;

        addProduct = availableProducts[7];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[7] = addProduct;

        break;
      case "solar55":
        addProduct = availableProducts[4];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[4] = addProduct;

        addProduct = availableProducts[8];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[8] = addProduct;
        
        break;
      case "solar30":
        addProduct = availableProducts[5];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[5] = addProduct;

        addProduct = availableProducts[6];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[6] = addProduct;

        break;
      case "ladder":
        addProduct = availableProducts[9];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[9] = addProduct;
        break;
      default:
        break;
    }

    updateCartState();
    calculatePrice(availableProducts)
    updateBuildState(availableProducts);
  }

  function updateCartState() {
    let totalItems = 0;
    availableProducts.map((product) => {
      totalItems += product.quantity
      if(product.htmlId != "") {
        let dragItem = document.getElementById(product.htmlId).childNodes[1];
        if (product.quantity > 0) {
          dragItem.innerHTML = product?.quantity.toString();
          dragItem.style.display = 'block';
        } else {
          dragItem.style.display = 'none';
        }
      }
    });
    document.getElementById('products-num').innerHTML = totalItems
  }

  function setViewCube() {
    clock = new THREE.Clock();
    helper = new ViewHelper(camera, renderer.domElement);
    helper.controls = controls;
    helper.controls.center = controls.target;
    const div = document.createElement('div');
    div.id = 'viewHelper';
    div.style.position = 'absolute';
    div.style.right = 0;
    div.style.bottom = 0;
    div.style.height = '128px';
    div.style.width = '128px';
    div.style.zIndex = 100

    document.getElementById("configurator-container").appendChild(div);
    div.addEventListener('pointerup', (event) => {
      helper.handleClick(event)
    });
    animate();

    if(window.innerWidth < 1024) helper.visible = false;
  }

  function animate() {
    requestAnimationFrame(animate);
    const delta = clock.getDelta();
    if (helper.animating) helper.update(delta);
    helper.render(renderer);
  }

  function setCameraView() {
    controls = new OrbitControls(camera, container);
    controls.maxDistance = 15;
    controls.minDistance = 4;
    controls.maxZoom = 3;
    controls.minZoom = 0.5;
    controls.maxPolarAngle = THREE.MathUtils.degToRad(90);
    controls.screenSpacePanning = false;
    controls.target.set(0, 0.5, 0);
  }

  function init() {
    const container = document.getElementById('container');
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(((window.innerWidth < 1024 ? window.innerWidth : window.innerWidth - 300)), window.innerHeight);
    renderer.setAnimationLoop(render);
    renderer.toneMappingExposure = 0.85;
    renderer.autoClear = false;
    container.appendChild(renderer.domElement);
    window.addEventListener('resize', onWindowResize);

    camera = new THREE.PerspectiveCamera(40, ((window.innerWidth < 1024 ? window.innerWidth : window.innerWidth - 300)) / window.innerHeight, 1, 10000);
    camera.position.set(-1, 6, -6);
    camera.aspect = ((window.innerWidth < 1024 ? window.innerWidth : window.innerWidth - 300)) / (window.innerHeight);
    camera.updateProjectionMatrix();
    setCameraView();

    scene = new THREE.Scene();
    scene.background = new THREE.Color("#ffffff");
    setViewCube();

    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 2.5);
    directionalLight1.position.set(1, 1, 0);
    scene.add(directionalLight1);

    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 2.5);
    directionalLight2.position.set(-1, 1, 0);
    scene.add(directionalLight2);

    const directionalLight3 = new THREE.DirectionalLight(0xffffff, 2.5);
    directionalLight3.position.set(0, 1, 1);
    scene.add(directionalLight3);

    const directionalLight4 = new THREE.DirectionalLight(0xffffff, 2.5);
    directionalLight4.position.set(0, 1, -1);
    scene.add(directionalLight4);

    const ambientLight = new THREE.AmbientLight('#ffffff', 1); // color, intensity
    scene.add(ambientLight);

    const hdrLoader = new RGBELoader();
    hdrLoader.loadAsync( 'https://cdn.shopify.com/s/files/1/0412/9898/5124/files/mt1.hdr?v=1715607373' ).then(envMap=>{
      envMap.mapping = THREE.EquirectangularReflectionMapping;
      const params = {
        height: 15,
        radius: 100,
        enabled: true,
      };
      let skybox = new GroundedSkybox( envMap, params.height, params.radius );
      skybox.position.y = params.height - 0.01;
      scene.add( skybox );
      scene.environment = envMap;
    });

    loader.load('https://cdn.shopify.com/3d/models/ef2473f570af2015/van2.glb', function (gltf) {
      carModel = gltf.scene;

      bodyMesh = carModel.getObjectByName("van").getObjectByName("Mesh001_5");
      const bodyMaterial = new THREE.MeshPhysicalMaterial( {
        color: 0xffffff, metalness: 1.0, roughness: 0.9, clearcoat: 1.0, clearcoatRoughness: 0.1
      } );
      bodyMesh.material = bodyMaterial

      shodowMesh = new THREE.Mesh(
        new THREE.PlaneGeometry(2.8, 6.5),
        new THREE.MeshBasicMaterial({
          map: shadow, blending: THREE.MultiplyBlending, toneMapped: false, transparent: true
        })
      );
      shodowMesh.rotation.x = - Math.PI / 2;
      shodowMesh.rotation.z = Math.PI / 2;
      shodowMesh.renderOrder = 2;
      carModel.add(shodowMesh);

      scene.add(carModel);

      workPlane = new THREE.Mesh(
        new THREE.BoxGeometry(3, 0.01, 1.55),
        new THREE.MeshLambertMaterial({ color: "green" })
      );
      workPlane.material.visible = false;

      workPlane.position.set(-1.08, 2.37, 0);
      scene.add(workPlane);

      ladderPlane = new THREE.Mesh(
        new THREE.BoxGeometry(3, 2, 0.01),
        new THREE.MeshLambertMaterial({color: 'green'})
      )
      ladderPlane.material.visible = false;
      ladderPlane.position.set(-1.08, 1.3, -0.85); 
      scene.add(ladderPlane);

      targetForDragging = new THREE.Mesh(
        new THREE.BoxGeometry(100, 0.01, 100),
        new THREE.MeshBasicMaterial()
      );
      targetForDragging.material.visible = false;
      raycaster = new THREE.Raycaster();
    });
  }

  function onWindowResize() {
    if(window.innerWidth < 1024) {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
      helper.visible = false;
    } else {
      camera.aspect = (window.innerWidth - 300) / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize((window.innerWidth - 300), window.innerHeight);
      helper.visible = true;
    }
  }

  function render() {
    controls.update();
    renderer.render(scene, camera);
  }

  function isValueInScale(value, scale, radius, vanDiff) {
    for (let i = 0; i < scale.length; i += 2) {
        if (value + 100 >= (scale[i] + radius - vanDiff + 100 ) && value + 100 <= (scale[i + 1] - radius - vanDiff + 100)) {
          return i;
        }
    }
    return -1;
  }

  function updateSolarArea(xPos, modelName, flag) {
    let productInfo = availableProducts.filter((product) => product.type == modelName)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254;
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;

    if(modelName == "air_conditioner"){
      if(solar35Area.length > 0 && flag == 2){
        let curArea = [...solar35Area];
        const indexOfModel = getPositionIndex(curArea, inchXPos, xRadius);
        if(indexOfModel >= 0) {
          const newArea = {
            position: inchXPos,
            confState: curArea[indexOfModel].confState,
            moved: true
          }
          curArea[indexOfModel] = newArea;
          solar35Area = curArea;
        }
      } else {
        const newArea = {
          position: inchXPos,
          confState: false,
          moved: false
        }
        solar35Area.push(newArea)
      }
    } else if(modelName == "maxxair"){
      if(solar55Area.length > 0 && flag == 2){
        let curArea = [...solar55Area];
        const indexOfModel = getPositionIndex(curArea, inchXPos, xRadius);
        if(indexOfModel >= 0) {
          const newArea = {
            position: inchXPos,
            confState: curArea[indexOfModel].confState,
            moved: true
          }
          curArea[indexOfModel] = newArea;
          solar55Area = curArea;
        }
      } else {
        const newArea = {
          position: inchXPos,
          confState: false,
          moved: false
        }
        solar55Area.push(newArea)
      }
    }
  }

  function checkIsAvailable(xPos, modelName, flag) {
    let productInfo = availableProducts.filter((product) => product.type == modelName)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254;
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;
    let startPointCheck, endPointCheck, centerPointCheck = -1;

    if(startValue < vanArea[0] || endValue > vanArea[1]) return false;
    
    if(flag == 1) {
      startPointCheck = isValueInScale(startValue, addedState, 0, 0);
      endPointCheck = isValueInScale(endValue, addedState, 0, 0);
      centerPointCheck = isValueInScale(inchXPos, addedState, 0, 0);
    } else if(flag == 2) {
      const currentState = [...addedState];
      if(selectedIndexOfState >= 0)currentState.splice(selectedIndexOfState, 2);
      startPointCheck = isValueInScale(startValue, currentState, 0, 0);
      endPointCheck = isValueInScale(endValue, currentState, 0, 0);
      centerPointCheck = isValueInScale(inchXPos, currentState, 0, 0);

    } else {
      let modelIndex = isValueInScale(inchXPos, addedState, 0, 0);
      let startIndex = isValueInScale(inchXPos, addedState, xRadius/2, 0);
      let endIndex = isValueInScale(inchXPos, addedState, xRadius/2, 0);
      if(modelIndex == startIndex && modelIndex == endIndex) {
        return modelIndex
      } else {
        return -1;
      }
    }
    if(startPointCheck == -1 && endPointCheck == -1 && centerPointCheck == -1) {
      return true;
    } else return false;
  }

  function updateModelState(flag, modelType, xPos) {
    let productInfo = availableProducts.filter((product) => product.type == modelType)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;

    if(modelType == "ladder") return
    else if(modelType == 'solar55'){
      const selAreaIndex = solar55Area.findIndex((area) => area.position > (inchXPos - xRadius / 2) && area.position < (inchXPos + xRadius / 2));
      let selectedArea = {...solar55Area[selAreaIndex]};
      selectedArea.confState = false;
      if(selAreaIndex >= 0) solar55Area[selAreaIndex] = selectedArea;
      return;

    } else if(modelType == 'solar30') {
      const selAreaIndex = solar35Area.findIndex((area) => area.position > (inchXPos - xRadius / 2) && area.position < (inchXPos + xRadius / 2));
      let selectedArea = {...solar35Area[selAreaIndex]};
      selectedArea.confState = false;
      if(selAreaIndex >= 0) solar35Area[selAreaIndex] = selectedArea;
      return;
    } else if(modelType == 'maxxair' && flag == 3) {
      const selAreaIndex = solar55Area.findIndex((area) => area.position > (inchXPos - xRadius / 2) && area.position < (inchXPos + xRadius / 2));
      if(selAreaIndex >= 0) solar55Area.splice(selAreaIndex, 1);
    }
    else if(modelType == 'air_conditioner' && flag == 3) {
      const selAreaIndex = solar35Area.findIndex((area) => area.position > (inchXPos - xRadius / 2) && area.position < (inchXPos + xRadius / 2));
      if(selAreaIndex >= 0) solar35Area.splice(selAreaIndex, 1);
    }

    switch(flag) {
      case 1: 
        addedState.push(startValue, endValue)
        break;
      case 2: 
        if(selectedIndexOfState >= 0) {
          addedState.splice(selectedIndexOfState, 2);
          addedState.splice(selectedIndexOfState, 0, startValue, endValue)
        }
        break;
      case 3:
        if(selectedIndexOfState >= 0) {
          addedState.splice(selectedIndexOfState, 2);
        }
        break;
    }
  }

  function updateBuildState(products) {
    const buildListDom = document.getElementById('build-list');
    let buildText = ''
    for(let i=0; i < products.length; i++) {
      const availableProduct = products[i];
      if(availableProduct.quantity > 0) {

        buildText += '<div class="build-item"><div class="item-overview">'
        buildText += '<div class="product-info"><img src="'+ availableProduct?.image +'&width=50" width="50" height="50"/>'
        buildText += '<a class="item-name" href="'+availableProduct?.url+'" target="_blank">'+ availableProduct?.title +'</a></div><button class="remove-product" id="'+ (availableProduct?.type + "___") +'">&#10799;</div><div class="item-variants">'
        if(availableProduct.availability){
          availableProduct?.variants?.map((variant, index) => {
            buildText += '<div class="variant"><div>'
            buildText += '<input type="radio" class="variant-handler" id="'+ (availableProduct?.type+"___"+variant?.id) +'" name="'+ availableProduct?.type +'" ' + (Number(variant?.id) == Number(availableProduct?.id) ? 'checked' : '') + '/><label for="'+ (availableProduct?.type+"___"+variant?.id) +'">'+ (variant.public_title ? variant.public_title : variant.name) +'</label>'
            buildText += '</div><div>'
            buildText += '$<span class="price">'+ variant.price / 100 +'</span>'
            buildText += '</div></div>'
          })
        } else {
          buildText += '<div class="not-sell">This item is not available for sale from Unaka Gear Co. Please contact support for any questions</div>'
        }
        buildText += '</div><div class="divider"></div></div>'
      }
    }
    buildListDom.innerHTML = buildText;
    buildListDom.addEventListener('click', handleRadioChange);
  }

  function handleRadioChange(event) {
    if (event.target.type === 'radio') {
      const targetVariant = event.target.id?.split('___');
      availableProducts = availableProducts.map((product) => {
        if(targetVariant[0] == product.type) {
          const selectedProduct = product.variants.find((variant) => variant.id == targetVariant[1]);
          let newProduct = {...product, id: selectedProduct.id, price: selectedProduct.price / 100};
          return newProduct;
        }
        else return product;
      });
      calculatePrice(availableProducts)
    } else if(event.target.type === 'submit') {
      const targetType = event.target.id?.split('___')[0];
      if(targetType == 'ac_cross' || targetType == 'solar_cross' || targetType == 'max_cross' || targetType == 'rack') {
        const toRemoveIndex = availableProducts.findIndex((product) => product.type == targetType);
        const quantity = availableProducts[toRemoveIndex].quantity;
        if(quantity > 0) availableProducts[toRemoveIndex].quantity = quantity - 1;
        updateBuildState(availableProducts)
        calculatePrice(availableProducts)
        updateCartState();
      } else {
        const toRemoveModel = availableProducts.find((product) => product.type == targetType)?.model;
        scene.remove(toRemoveModel);
        selectedIndexOfState = checkIsAvailable(toRemoveModel.position.x, toRemoveModel.children[0].name, 3);
        calcPrice(toRemoveModel.children[0].name, false, null)
        updateModelState(3, toRemoveModel.children[0].name, toRemoveModel.position.x)
      }
    }
  }

  function calculatePrice(products) {
    let totalPrice = 0;
    products.map((product) => {
      if(product.quantity > 0 && product.availability){
        totalPrice += product.quantity * product.price;
      }
    })
    document.getElementById("products-cost").innerHTML = totalPrice.toFixed(2);
  }

  function getPositionIndex(areaArr, pos, radius) {
    const startPoint = pos - radius / 2;
    const endPoint = pos + radius / 2;
    for(let i=0; i< areaArr.length; i++) {
      if(areaArr[i].position > startPoint && areaArr[i].position < endPoint) return i;
    }
    return -1;
  }

  init();
</script>

{% schema %}
{
  "name": "t:sections.model-visualization.name",
  "class": "section spacing-section",
  "settings": [
   
  ],
  "presets": [
    {
      "name": "t:sections.model-visualization.presets.name"
    }
  ],
  "disabled_on": {
    "groups": [
      "custom.overlay"
    ]
  }
}
{% endschema %}