<head>
  <meta charset="utf-8">
  <title>Van Configurator</title>
  <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
  <link rel="stylesheet" href="{{ 'configurator.css' | asset_url }}">
</head>
<div id="van_modal_area">
  <div class="van_modal_content">
    <p>Select Van</p>
    <div class="selectables">
      <select id="vanType" class="van-selectable">
        <option value="">Select Van</option>
      </select>
      <select id="vanSize" class="van-selectable" disabled>
        <option value="">Select Size</option>
      </select>
      <select id="vanVariant" class="van-selectable" disabled>
        <option value="">Select Roof Rack</option>
      </select>
      <div class="van_select_trigger">
        <button id="van_reset_trigger">Reset</button>
        <button id="van_select_trigger">Select</button>
      </div>
    </div>
  </div>
</div>
<div class="threejs-container">
  <a class="unaka-logo" href="/">
    <img
      src="https://cdn.shopify.com/s/files/1/0412/9898/5124/files/Unaka_Brand_v2-03.png?v=1706796409&width=95"
      draggable="false"
      width="95"
      height="95"
    >
  </a>
  <div class="mouse-navigation">
    <img
      src="https://cdn.shopify.com/s/files/1/0412/9898/5124/files/mouse_navigation.png?v=1737385825&width=120"
      draggable="false"
      width="120"
      height="120"
    >
  </div>
  <div id="configurator-container">
    <div class="van-detail">
      <h2 id="rack_title">Ford Transit Roof Rack - Premium - 148 High Roof</h2>
      <h3 class="contact-text">
        For custom layout or support contact us - <a href="mailto:csr@unakagearco.com">csr@unakagearco.com</a>
      </h3>
    </div>
    <div id="container"></div>
    <div class="overlay" id="overlay"></div>
    <div class="items-container">
      <div class="swiper">
        <div class="swiper-wrapper drag-items" id="selectableProducts">
          <div class="swiper-slide">
            <div class="item-box" data-category="airconditioners">
              <div class="item-img" id="airconditioners" draggable="false"></div>
              <div class="item-name">
                <p>Air Conditioners</p>
              </div>
              <div class="product-dropdown" id="airconditioners-dropdown">
                <div class="dropdown-title">Air Conditioners</div>
                <div class="dropdown-items">
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="airconditioner">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Dometic RTX</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="airconditioner-x2">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Nomadic Innovations AC X2</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="airconditioner-x3">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Nomadic Innovations AC X3</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="swiper-slide">
            <div class="item-box" data-category="ventilation">
              <div class="item-img" id="fans" draggable="false"></div>
              <div class="item-name">
                <p>Fans</p>
              </div>
              <div class="product-dropdown" id="ventilation-dropdown">
                <div class="dropdown-title">Fans</div>
                <div class="dropdown-items">
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="maxxair">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Maxxair Deluxe</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="swiper-slide">
            <div class="item-box" data-category="solar">
              <div class="item-img" id="solar-panels" draggable="false"></div>
              <div class="item-name">
                <p>Solar Panels</p>
              </div>
              <div class="product-dropdown" id="solar-dropdown">
                <div class="dropdown-title">Solar Panels</div>
                <div class="dropdown-items">
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="solar_panel250">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Rich Solar Panel 250w</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="solar_panel200">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Rich Solar Panel 200w</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="solar_panel100">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Rich Solar Panel 100w</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="solar_panel50">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Rich Solar Panel 50w</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="solar_panel30">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Rich Solar Panel 30w</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="swiper-slide">
            <div class="item-box" data-category="awning">
              <div class="item-img" id="awnings" draggable="false"></div>
              <div class="item-name">
                <p>Awnings</p>
              </div>
              <div class="product-dropdown" id="awning-dropdown">
                <div class="dropdown-title">Awnings</div>
                <div class="dropdown-items">
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="awning">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">F45-300 Awning</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="awning_350">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">F45-350 Awning</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="swiper-slide">
            <div class="item-box" data-category="light">
              <div class="item-img" id="lights" draggable="false"></div>
              <div class="item-name">
                <p>Light Bars</p>
              </div>
              <div class="product-dropdown" id="light-dropdown">
                <div class="dropdown-title">Light Bars</div>
                <div class="dropdown-items">
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="light_bar">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Tyri Light Bar</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="light_bar_copy">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Diode Dynamics Light Bar</div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="swiper-slide">
            <div class="item-box" data-category="accessories">
              <div class="item-img" id="accessories" draggable="false"></div>
              <div class="item-name">
                <p>Accessories</p>
              </div>
              <div class="product-dropdown" id="accessories-dropdown">
                <div class="dropdown-title">Accessories</div>
                <div class="dropdown-items">
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="ladder">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Side Mount Ladder</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="cross_bar">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">8020 cross bar</div>
                  </div>
                  <div class="dropdown-item">
                    <div class="dropdown-item-img" id="solar_cross_bar">
                      <div class="carted-item">1</div>
                    </div>
                    <div class="dropdown-item-name">Solar cross bar</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="swiper-button-next"></div>
      <div class="swiper-button-prev"></div>
    </div>
    <div class="action-btn-list">
      <button class="mb-3 left-tooltip" id="deleteButton" disabled>
        <span class="tooltiptext">Delete Items</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 1024 1024">
          <path fill="#fff"
            d="M160 256H96a32 32 0 0 1 0-64h256V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64h-64v672a32 32 0 0 1-32 32H192a32 32 0 0 1-32-32zm448-64v-64H416v64zM224 896h576V256H224zm192-128a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32m192 0a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32" />
        </svg>
      </button>

      <button class="mb-3 left-tooltip" id="resetButton" disabled>
        <span class="tooltiptext">Reset Items</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 21 21">
          <g fill="none" fill-rule="evenodd" stroke="#fff" stroke-linecap="round" stroke-linejoin="round">
            <path d="M6.5 3.5c-2.414 1.377-4 4.022-4 7a8 8 0 1 0 8-8" />
            <path d="M6.5 7.5v-4h-4" />
          </g>
        </svg>
      </button>

      <button class="mb-3 left-tooltip" id="imgDownloadBtn">
        <span class="tooltiptext">Download Image</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24">
          <g fill="none" stroke="#ffffff" stroke-linecap="round" stroke-width="1.5">
            <path stroke-linejoin="round"
              d="M21.25 13V8.5a5 5 0 0 0-5-5h-8.5a5 5 0 0 0-5 5v7a5 5 0 0 0 5 5h6.26" />
            <path stroke-linejoin="round"
              d="m3.01 17l2.74-3.2a2.2 2.2 0 0 1 2.77-.27a2.2 2.2 0 0 0 2.77-.27l2.33-2.33a4 4 0 0 1 5.16-.43l2.47 1.91M8.01 10.17a1.66 1.66 0 1 0-.02-3.32a1.66 1.66 0 0 0 .02 3.32" />
            <path stroke-miterlimit="10" d="M18.707 20v-5" />
            <path stroke-linejoin="round" d="m16.414 17.895l1.967 1.967a.459.459 0 0 0 .652 0L21 17.895" />
          </g>
        </svg>
      </button>

      <button class="mb-3 left-tooltip" id="selectVanBtn">
        <span class="tooltiptext">Select Van</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 256 256">
          <path fill="#ffffff" d="m254.07 106.79l-45.54-53.06A16 16 0 0 0 196.26 48H32a16 16 0 0 0-16 16v112a16 16 0 0 0 16 16h17a32 32 0 0 0 62 0h50a32 32 0 0 0 62 0h17a16 16 0 0 0 16-16v-64a8 8 0 0 0-1.93-5.21M230.59 104H176V64h20.26ZM104 104V64h56v40ZM88 64v40H32V64Zm-8 136a16 16 0 1 1 16-16a16 16 0 0 1-16 16m112 0a16 16 0 1 1 16-16a16 16 0 0 1-16 16m31-24a32 32 0 0 0-62 0h-50a32 32 0 0 0-62 0H32v-56h208v56Z"/>
        </svg>
      </button>

      <button class="mb-3 left-tooltip" id="toggleTire">
        <span class="tooltiptext">Toggle Tire</span>
        <img 
          src="https://cdn.shopify.com/s/files/1/0412/9898/5124/files/toggle_tire.svg?v=1748911668" 
          alt="Toggle tire"
        >
      </button>
      <!-- adddd start-->
      <button class="mb-3 left-tooltip" id="toggleAwning">
        <span class="tooltiptext">Toggle Awning</span>
        <img 
          src="https://cdn.shopify.com/s/files/1/0412/9898/5124/files/mdi--awning-outline.svg?v=1748923175" 
          alt="Toggle Awning"
        >
      </button>
      <!-- adddd end -->
    </div>
  </div>
  <div id="side-section">
    <div id="side-collapse">
      <div class="collapsed">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 256 256">
          <path fill="currentColor" d="M210.84 205.13a12 12 0 0 1-16 5.71l-152-72a12 12 0 0 1 0-21.68l152-72a12 12 0 1 1 10.27 21.69L76 128l129.1 61.15a12 12 0 0 1 5.74 15.98"/>
        </svg>
      </div>
    </div>
    <div class="sidebar-header">Product Options</div>
    <div class="sidebar-vancolor">
      <div class="vancolor-title">VAN COLOR</div>
      <div class="select-colors" id="color-selectable">
        <div class="color-item color-selected" style="background-color: rgb(255, 255, 255);"></div>
        <div class="color-item" style="background-color: rgb(205, 36, 0);"></div>
        <div class="color-item" style="background-color: rgb(0, 0, 0);"></div>
        <div class="color-item" style="background-color: rgb(173, 175, 184);"></div>
        <div class="color-item" style="background-color: rgb(146, 17, 18);"></div>
        <div class="color-item" style="background-color: rgb(72, 115, 163);"></div>
        <div class="color-item" style="background-color: rgb(59, 82, 67);"></div>
        <div class="color-item" style="background-color: rgb(146, 173, 62);"></div>
      </div>
    </div>
    <div class="buildlist-title">BUILD LIST</div>
    <div id="build-list"></div>
    <div class="checkout-area">
      <div id="products-detail">
        <div><span id="products-num">0</span> Items</div>
        <div>$<span id="products-cost">0</span></div>
      </div>
      <button id="addCartBtn">
        Checkout &nbsp;
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 50 50">
          <path fill="#fff" d="M25 42c-9.4 0-17-7.6-17-17S15.6 8 25 8s17 7.6 17 17s-7.6 17-17 17m0-32c-8.3 0-15 6.7-15 15s6.7 15 15 15s15-6.7 15-15s-6.7-15-15-15"/><path fill="#fff" d="m24.7 34.7l-1.4-1.4l8.3-8.3l-8.3-8.3l1.4-1.4l9.7 9.7z"/><path fill="#fff" d="M16 24h17v2H16z"/>
        </svg>
      </button>
    </div>
  </div>
</div>
<script type="importmap" async>
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js"
    }
  }
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js" async></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js" async></script>

<script>
  const tabs = document.querySelectorAll('[data-tab-target]');
  const tabContents = document.querySelectorAll('[data-tab-content]');

  tabs.forEach((tab) => {
    tab.addEventListener('click', () => {
      const target = document.querySelector(tab.dataset.tabTarget);
      tabContents.forEach((tabContent) => {
        tabContent.classList.remove('active');
      });
      tabs.forEach((tab) => {
        tab.classList.remove('active');
      });
      tab.classList.add('active');
      target.classList.add('active');
    });
  });

  document.getElementById('side-collapse').addEventListener('click', function () {
    let iconElement = this.firstChild.nextSibling;
    if (iconElement.classList.contains('expanded')) {
      iconElement.classList.remove('expanded');
      iconElement.classList.add('collapsed');
      document.getElementById('side-section').style.right = '-300px';
    } else if (iconElement.classList.contains('collapsed')) {
      iconElement.classList.remove('collapsed');
      iconElement.classList.add('expanded');
      document.getElementById('side-section').style.right = '0px';
    }
  });
</script>

<script async src="https://unpkg.com/es-module-shims@1.3.0/dist/es-module-shims.js"></script>
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js" async></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js" ></script>
<script>
  const vanSelections = [
    {
      type: 'Ford Transit High Roof',
      variants: [
        {
          type: '148',
          variants: [
            { type: 'Premium', id: '45730334671067' },
            { type: 'Premium + Light Bar', id: '45730334703835' },
          ],
        },
        {
          type: '148 Extended',
          variants: [
            { type: 'Premium', id: '45730334802139' },
            { type: 'Premium + Light Bar', id: '45730334834907' },
          ],
        },
        {
          type: '148 Medium',
          variants: [{ type: 'Premium', id: '45730334539995' }],
        },
      ],
    },
    {
      type: 'Mercedes Sprinter High Roof',
      variants: [
        {
          type: '144',
          variants: [
            { type: 'Premium', id: '45730446803163' },
            { type: 'Premium + Light Bar', id: '45910413181147' },
          ],
        },
        {
          type: '170',
          variants: [
            { type: 'Premium', id: '45730446868699' },
            { type: 'Premium + Light Bar', id: '45910413213915' },
          ],
        },
        {
          type: '170 Extended',
          variants: [
            { type: 'Premium', id: '45730446934235' },
            { type: 'Premium + Light Bar', id: '45910413246683' },
          ],
        },
      ],
    },
    {
      type: 'Ram ProMaster High Roof',
      variants: [
        {
          type: '136',
          variants: [
            { type: 'Premium', id: '45724558229723' },
            { type: 'Standard', id: '45724558196955' },
          ],
        },
        {
          type: '159',
          variants: [
            { type: 'Premium', id: '45724558295259' },
            { type: 'Standard', id: '45724558262491' },
          ],
        },
        {
          type: '159 Extended',
          variants: [
            { type: 'Premium', id: '45724558360795' },
            { type: 'Standard', id: '45724558328027' },
          ],
        },
      ],
    },
  ];

  const vanTypeSelect = document.getElementById('vanType');
  const vanSizeSelect = document.getElementById('vanSize');
  const vanVariantSelect = document.getElementById('vanVariant');
  const resetButton = document.getElementById('van_reset_trigger');
  const selectButton = document.getElementById('van_select_trigger');

  // Populate van type dropdown
  vanSelections.forEach((van) => {
    const option = document.createElement('option');
    option.value = van.type;
    option.textContent = van.type;
    vanTypeSelect.appendChild(option);
  });

  // Handle van type selection
  vanTypeSelect.addEventListener('change', function () {
    const selectedVan = vanSelections.find((van) => van.type === this.value);
    vanSizeSelect.innerHTML = '<option value="">Select Size</option>';
    vanVariantSelect.innerHTML = '<option value="">Select Roof Rack</option>';
    vanVariantSelect.disabled = true;

    if (selectedVan) {
      selectedVan.variants.forEach((size) => {
        const option = document.createElement('option');
        option.value = size.type;
        option.textContent = size.type;
        vanSizeSelect.appendChild(option);
      });
      vanSizeSelect.disabled = false;
    } else {
      vanSizeSelect.disabled = true;
    }
  });

  // Handle size selection
  vanSizeSelect.addEventListener('change', function () {
    const selectedVan = vanSelections.find((van) => van.type === vanTypeSelect.value);
    const selectedSize = selectedVan.variants.find((size) => size.type === this.value);
    vanVariantSelect.innerHTML = '<option value="">Select Roof Rack</option>';

    if (selectedSize) {
      selectedSize.variants.forEach((variant) => {
        const option = document.createElement('option');
        option.value = variant.id;
        option.textContent = `${variant.type}`;
        vanVariantSelect.appendChild(option);
      });
      vanVariantSelect.disabled = false;
    } else {
      vanVariantSelect.disabled = true;
    }
  });

  resetButton.addEventListener('click', function () {
    vanTypeSelect.value = '';
    vanSizeSelect.innerHTML = '<option value="">Select Size</option>';
    vanSizeSelect.disabled = true;
    vanVariantSelect.innerHTML = '<option value="">Select Roof Rack</option>';
    vanVariantSelect.disabled = true;
  });
</script>

<script
  type="module"
>
  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js';
  import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/controls/OrbitControls.js';
  import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/loaders/GLTFLoader.js';
  import { DRACOLoader } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/loaders/DRACOLoader.js';
  import { ViewHelper } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/helpers/ViewHelper.js';
  import { RGBELoader } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/loaders/RGBELoader.js';
  import { GroundedSkybox } from 'https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/objects/GroundedSkybox.js';

  var swiper = new Swiper(".swiper", {
    slidesPerView: 4,
    spaceBetween: 10,
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    breakpoints: {
      576: {
        slidesPerView: 5,
      },
    },
  });

  let vanArea = [-16.535, 101.968];
  let addedState = [];
  let selectedIndexOfState = -1;
  let solar35Area = [];
  let solar55Area = [];

  let canvas, camera, scene, renderer;
  let cameraType = "perspective";
  let canvasContainer = document.getElementById("container");

  let grid;
  let controls;

  let selectedFeature;
  var targetForDragging;

  let isDragging = false;

  let intersects;
  let raycaster;
  let workPlane;

  let edges;
  let line;
  let edgeLine = null;
  const lineMaterial = new THREE.LineBasicMaterial({ color: "#fff" });

  let vanItem;
  let cloneVanItem = null;
  let loadItemDirectory;

  let carModel;
  let shodowMesh;
  let model = null;

  let helper;
  let clock;
  let offsetTopCanvas

  let selectedItem = '';
  let ladderPlane;
  let cutOffArea = [3.19, 25.7, 32.09, 64.72, 71.11, 85.19];
  let vanDiff = 3.2

  let bodyMaterial;
  let bodyMesh;

  let fromTemplate = false;
  let totalPrice = 0;
  let collidableMeshList = [];
  const meterToInch = 39.3701;

  let vanRoofHeight = 2.36;
  let lightbarXPos = 0;

  let ladderLink = "";
  let ladderPos  = []
  let wheelLadderPos = []
  let movingOffset = 0.265;
  let crossbarWidth = 0
  let owningPosZ = 0.84

  let typeOfVan = "fordtransit"; 
  let awningArea = [0.778, -2.93]
  let rearLadderConf = {}

  let availableProducts = [
    {
      "htmlId": "", "type": "rack", "availability": true, "handle": "ford-transit-roof-rack", "id": 45730334671067,
      "price": 0, "quantity": 1, "xRadius": null, "handles": ["ford-transit-roof-rack", "mercedes-sprinter-roof-rack", "ram-promaster-roof-rack"],
      "availableVariants": [
        45730334671067, 45730334703835, 45730334802139, 45730334834907, 45730334539995,
        45730446803163, 45910413181147, 45730446868699, 45910413213915,45730446934235, 45910413246683, 
        45724558229723, 45724558196955, 45724558295259, 45724558262491, 45724558360795, 45724558328027
      ]
    },
    {
      "htmlId": "airconditioner", "type": "air_conditioner", "availability": true,
      "handle": "dometic-rtx-2000-12v-9600028490", "id": 43261478863067, "price": 0, "quantity": 0, "xRadius": 13.18
    },
    {
      "htmlId": "maxxair", "type": "maxxair", "availability": true,
      "handle": "maxxair-maxxfan-deluxe-roof-vent", "id": 40771325198500, "price": 0, "quantity": 0, "xRadius": 11.8
    },
    {
      "htmlId": "solar_panel200", "type": "solar200", "availability": true,
      "handle": "rich-solar-solar-panels", "id": 45977350734043, "price": 0, "quantity": 0, "xRadius": 13.5
    },
    {
      "htmlId": "solar_panel50", "type": "solar55", "availability": true,
      "handle": "rich-solar-solar-panels", "id": 45977350602971, "price": 0, "quantity": 0, "xRadius": 12.75
    },
    {
      "htmlId": "solar_panel30", "type": "solar30", "availability": false,
      "handle": "", "id": 45081892683995, "price": 0, "quantity": 0, "xRadius": 16.6,
      "title": "Rich Solar Mega 35 Watt 12 Volt Solar Panel",
      "image": "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/Rich-Solar-35W-12V-Solar-Panel_e5266152-4c97-4d03-8a8c-30e6446a354b.png?v=1717015802",
      "url": "https://shop.explorist.life/shop/all-products/pre-order-rich-solar-35w-12v-solar-panel/"
    },
    {
      "htmlId": "", "type": "ac_cross", "availability": true,
      "handle": "unaka-8020-cross-bars", "id": 45808915775707, "price": 0, "quantity": 0
    },
    {
      "htmlId": "", "type": "solar_cross", "availability": true,
      "handle": "unaka-8020-cross-bars", "id": 45808915808475, "price": 0, "quantity": 0
    },
    {
      "htmlId": "", "type": "max_cross", "availability": true,
      "handle": "unaka-8020-cross-bars", "id": 45808915775707, "price": 0, "quantity": 0
    },
    {
      "htmlId": "ladder", "type": "ladder", "availability": true,
      "handle": "ford-transit-side-mount-ladder", "id": 46623753240795, "price": 0, "quantity": 0
    },
    {
      "htmlId": "airconditioner-d", "type": "air_conditioner_nodamic", "handle": "", "id": null,
      "price": 0, "quantity": 0, "xRadius": 15.5,
      "title": "Rich Solar Mega 35 Watt 12 Volt Solar Panel",
      "image": "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/Rich-Solar-35W-12V-Solar-Panel_e5266152-4c97-4d03-8a8c-30e6446a354b.png?v=1717015802",
      "url": "https://shop.explorist.life/shop/all-products/pre-order-rich-solar-35w-12v-solar-panel/"
    },
    {
      "htmlId": "cross_bar", "type": "8020_crossbar", "handle": "unaka-8020-cross-bars", "id": 45808912728283,
      "price": 0, "quantity": 0, "xRadius": 2.3, "availability": true
    },
    {
      "htmlId": "solar_cross_bar", "type": "lshape_cross", "handle": "", "id": null,
      "price": 0, "quantity": 0, "xRadius": 14.03
    },
    {
      "htmlId": "awning", "type": "awning", "handle": "fiamma-f45s-awnings", "id": 45715079299291,
      "price": 0, "xRadius": 59.05, "availability": true, "quantity": 0
    },
    {
      "htmlId": "", "type": "awning_bracket", "handle": "fiamma-f45s-awning-brackets",
      "id": 45072199287003, "availability": true, "price": 0, "quantity": 0
    },
    {
      "htmlId": "solar_panel100", "type": "solar100", "handle": "rich-solar-solar-panels", "id": 45977350668507,
      "price": 0, "quantity": 0, "xRadius": 7.9, "availability": true
    },
    {
      "htmlId": "solar_panel250", "type": "solar250", "handle": "rich-solar-solar-panels", "id": 45977350799579,
      "price": 0, "quantity": 0, "xRadius": 14.95, "availability": true
    },
    {
      "htmlId": "awning_350", "type": "awning_350", "handle": "fiamma-f45s-awnings", "id": 45715079364827,
      "price": 0, "availability": true, "xRadius": 68.89, "quantity": 0
    },
    {
      "htmlId": "light_bar", "type": "light_bar", "handle": "tyri-v48-black-17200-elumen-48-hyperion-series-light-bar",
      "id": 45998626996443, "price": 0, "availability": true, "xRadius": 0, "quantity": 0
    },
    {
      "htmlId": "light_bar_copy", "type": "light_bar_copy", "handle": "diode-dynamics-ss5-crosslink-8-pod-led-light-bar",
      "id": 45999161639131, "price": 0, "availability": true, "xRadius": 0, "quantity": 0
    },
    {
      "htmlId": "airconditioner-p", "type": "air_conditioner_p", "availability": true,
      "handle": "dometic-penguin-ii-13-5k-btu-air-conditioner-2", "id": 44447735972059,
      "price": 0, "quantity": 0, "xRadius": 20.3
    },
    {
      "htmlId": "solar_panel220", "type": "solar220", "handle": "rich-solar-solar-panels", "id": 46107025113307,
      "price": 0, "quantity": 0, "xRadius": 15, "availability": true
    },
    {
      "htmlId": "airconditioner-v1", "type": "air_conditioner_v1", "availability": true,
      "handle": "velit-2000r-12v-24v-48v-rooftop-air-conditioner", "id": 46446941176027,
      "price": 0, "quantity": 0, "xRadius": 15.75
    },
    {
      "htmlId": "airconditioner-v2", "type": "air_conditioner_v2", "availability": true,
      "handle": "velit-2000r-mini-12v-48v-rooftop-air-conditioner", "id": 46447124676827,
      "price": 0, "quantity": 0, "xRadius": 13.25
    },
    {
      "htmlId": "airconditioner-x2", "type": "air_conditioner_x2", "handle": "", "id": null,
      "price": 0, "quantity": 0, "xRadius": 14.03,
      "title": "X2: Compact Off-Grid DC Rooftop Air Conditioner",
      "url": "https://nomadicinnovations.com/products/x2-12v-24v-48v-compact-rooftop-air-conditioner",
      "image": "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/airconditioner-x2.jpg?v=1740996273&width=50",
    },
    {
      "htmlId": "airconditioner-x3", "type": "air_conditioner_x3", "handle": "", "id": null,
      "price": 0, "quantity": 0, "xRadius": 15.78,
      "title": "X3: High Capacity Off-Grid DC Rooftop Air Conditioner",
      "url": "https://nomadicinnovations.com/products/x3-12v-24v-48v-off-grid-rooftop-air-conditioner",
      "image": "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/airconditioner-x3.jpg?v=1740996273&width=50",
    },
    {
      "htmlId": "sp_ladder", "type": "sp_ladder", "availability": true,
      "handle": "mercedes-sprinter-side-mount-ladder", "id": 46623721652443, "price": 0, "quantity": 0
    },
    {
      "htmlId": "awning_400", "type": "awning_400", "handle": "fiamma-f45s-awnings", "id": 46476563480795,
      "price": 0, "availability": true, "xRadius": 68.89, "quantity": 0
    },
    {
      "htmlId": "awning_450", "type": "awning_450", "handle": "fiamma-f45s-awnings", "id": 45715079495899,
      "price": 0, "availability": true, "xRadius": 68.89, "quantity": 0
    },
    {
      "htmlId": "new_solar250", "type": "new_solar250", "availability": true,
      "handle": "newpowa-solar-panel-new", "id": 46644912128219, "price": 0, "quantity": 0, "xRadius": 17.9
    },
    {
      "htmlId": "new_solar220", "type": "new_solar220", "availability": true,
      "handle": "newpowa-solar-panel-new", "id": 46644912095451, "price": 0, "quantity": 0, "xRadius": 15.6
    },
    {
      "htmlId": "new_solar200", "type": "new_solar200", "availability": true,
      "handle": "newpowa-solar-panel-new", "id": 46644912029915, "price": 0, "quantity": 0, "xRadius": 14.4
    },
    {
      "htmlId": "new_solar100", "type": "new_solar100", "availability": true,
      "handle": "newpowa-solar-panel-new", "id": 46644911964379, "price": 0, "quantity": 0, "xRadius": 11
    },
    {
      "htmlId": "mk20-w3", "type": "mk20-w3", "availability": true,
      "handle": "van-roof-deck-panels", "id": 45804602917083, "price": 0, "quantity": 0, "xRadius": 14.1
    },
    {
      "htmlId": "mk20-l2", "type": "mk20-l2", "availability": true,
      "handle": "van-roof-deck-panels", "id": 45804602917083, "price": 0, "quantity": 0, "xRadius": 10.2
    },
    {
      "htmlId": "mk20-maxxair", "type": "mk20-maxxair", "availability": true,
      "handle": "van-roof-deck-panels", "id": 45804602917083, "price": 0, "quantity": 0, "xRadius": 14.1
    },
    {
      "htmlId": "mk22-w3", "type": "mk22-w3", "availability": true,
      "handle": "van-roof-deck-panels", "id": 45804602884315, "price": 0, "quantity": 0, "xRadius": 18
    },
    {
      "htmlId": "mk23-ac", "type": "mk23-ac", "availability": true,
      "handle": "van-roof-deck-panels", "id": 45804602949851, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "sp_wheel_ladder", "type": "sp_wheel_ladder", "availability": true,
      "handle": "mercedes-sprinter-side-mount-ladder-wheel-wrap", "id": 46621697736923, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ds_base_kit", "type": "ds_base_kit", "availability": true,
      "handle": "mercedes-sprinter-rear-ladder-system-base-kit", "id": 46730418651355, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ps_base_kit", "type": "ps_base_kit", "availability": true,
      "handle": "mercedes-sprinter-rear-ladder-system-base-kit", "id": 46730418684123, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ds_ladder_extension", "type": "ds_ladder_extension", "availability": true,
      "handle": "unaka-rear-laddder-system-ladder-extension", "id": 46647591403739, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ps_ladder_extension", "type": "ps_ladder_extension", "availability": true,
      "handle": "unaka-rear-laddder-system-ladder-extension", "id": 46647591436507, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ds_easy_step", "type": "ds_easy_step", "availability": true,
      "handle": "rear-ladder-system-easy-step", "id": 46647597826267, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ps_easy_step", "type": "ps_easy_step", "availability": true,
      "handle": "rear-ladder-system-easy-step", "id": 46647597826267, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ds_tire_carrier", "type": "ds_tire_carrier", "availability": true,
      "handle": "unaka-tire-carrier", "id": 46647593959643, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ps_tire_carrier", "type": "ps_tire_carrier", "availability": true,
      "handle": "unaka-tire-carrier", "id": 46647593959643, "price": 0, "quantity": 0, "xRadius": 18.13
    },
    {
      "htmlId": "ladder_tr_medium", "type": "ladder_tr_medium", "availability": true,
      "handle": "transit-side-mount-ladder-v2-medium-roof", "id": 46840243486939, "price": 0, "quantity": 0, "xRadius": 18.13
    },
  ]
  

  const shadow = new THREE.TextureLoader().load('https://cdn.shopify.com/s/files/1/0412/9898/5124/files/ford_ao.png?v=1711858184');

  const dracoLoader = new DRACOLoader();
  dracoLoader.setDecoderPath('https://res.cloudinary.com/dbloegsbv/raw/upload/v1/jsm/');

  const loader = new GLTFLoader();
  loader.setDRACOLoader(dracoLoader);

  let delelteBtn = document.getElementById("deleteButton")

  canvasContainer.addEventListener('mousedown', (event) => {
    if (event.button === 0) {
      offsetTopCanvas = canvasContainer.getBoundingClientRect().top;
      isDragging = true;
      doMouseDown(event.clientX, event.clientY - offsetTopCanvas);
    }
  });

  let selectableProducts = [
    {
      id: "airconditioners",
      products: [
          { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
          { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
          { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
          { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
          { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
      ]
    },
    {
      id: "fans",
      products: [
          { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
      ]
    },
    {
      id: "solar-panels",
      products: [
          { name: "Rich Solar Panel 250w", id: "solar_panel250", model: "https://cdn.shopify.com/3d/models/5b0bf30f3bc0bc5b/250W.glb" },
          { name: "Rich Solar Panel 200w", id: "solar_panel200", model: "https://cdn.shopify.com/3d/models/41179ec7afded29e/200W.glb" },
          { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/bba013cfe5d76ce7/100W-1.glb" },
          { name: "Rich Solar Panel 50w", id: "solar_panel50", model: "https://cdn.shopify.com/3d/models/cfce53c8523cbc41/55W.glb" },
          { name: "Rich Solar Panel 30w", id: "solar_panel30", model: "https://cdn.shopify.com/3d/models/dfcf1aaf24802514/30W.glb" }
      ]
    },
    {
      id: "accessories",
      products: [
          { name: "Side Mount Ladder", id: "ladder", model: "" },
          { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb" }
      ]
    },
    {
      id: "awnings",
      products: [
          { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
          { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" }
      ]
    },
    {
      id: "lights",
      products: [
          { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
          { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
      ]
    }
  ];

  canvasContainer.addEventListener('mousemove', (event) => {
    if (selectedFeature) {
      if (
        selectedFeature.parent.name !== "van" 
        && selectedFeature.name !== "ladder" 
        && selectedFeature.name !== "sp_ladder" 
        && selectedFeature.name !== "sp_wheel_ladder" 
        && selectedFeature.name !== "ladder_tr_medium"
        && selectedFeature.name !== "ds_base_kit" 
        && selectedFeature.name !== "ps_base_kit" 
        && selectedFeature.name !== "ds_ladder_extension" 
        && selectedFeature.name !== "ps_ladder_extension" 
        && selectedFeature.name !== "ds_easy_step" 
        && selectedFeature.name !== "ps_easy_step" 
        && selectedFeature.name !== "ds_tire_carrier" 
        && selectedFeature.name !== "ps_tire_carrier" 
        && !selectedFeature.name.includes("light_bar")  
        && !selectedFeature.name.includes("light_bar_copy")  
        && !selectedFeature.name.includes('roof_rack')) {
        if (isDragging) {
          offsetTopCanvas = canvasContainer.getBoundingClientRect().top;
          let a = 2 * (event.clientX / window.innerWidth) - 1;
          let b = 1 - 2 * (event.clientY - offsetTopCanvas) / (window.innerHeight);
          raycaster.setFromCamera(new THREE.Vector2(a, b), camera);
          intersects = raycaster.intersectObject(targetForDragging);
          if (intersects.length === 0) {
            return;
          }

          let objectHit = intersects[0].object;
          let locationX = intersects[0].point.x;
          let locationZ = intersects[0].point.z;
          let coords = new THREE.Vector3(locationX, 0, locationZ);
          coords = scene.worldToLocal(coords);

          const boundingBox = new THREE.Box3().setFromObject(selectedFeature);
          const size = new THREE.Vector3();
          boundingBox.getSize(size);

          const selectedFeatureWidth = size.x;
          let checkCollision = true;
          
          const xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max(-2.115, coords.x));

          if(selectedFeature.name == "awning" || selectedFeature.name == "awning_350" || selectedFeature.name == "awning_400" || selectedFeature.name == "awning_450"){
            const bbox1  = getModelBoundingBox(selectedFeature);
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            const xPos = Math.min(awningArea[0] - selectedFeatureWidth / 2, Math.max(awningArea[1] + widthOfObject/2, coords.x));
            selectedFeature.parent.position.x = xPos;
          } else if(selectedFeature.name == "air_conditioner"){
            const bbox1 = getModelBoundingBox(selectedFeature);
            let solarModels = scene.children.filter((group) => group?.children[0]?.name == "solar30");
            const solarBoxes = solarModels.map((model) => {
              return getModelBoundingBox(model)
            });

            if(solarBoxes.length > 0) {
              const connectedSolar = solarBoxes.filter(solar => solar.max.x > bbox1.max.x && solar.min.x < bbox1.min.x)[0];
              if(connectedSolar) return;
            }
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            const xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
            collidableMeshList = updateColliderList();
            const checkCollision = isCrossBarCollied(bbox1, collidableMeshList, xPos, selectedFeature.name);
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 6.801, vanDiff)  >= 0 && !checkCollision) {
              updateSolarArea(xPos, selectedFeature.name, 2)
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos) 
            } 
          } else if(selectedFeature.name == "air_conditioner_p"){
            const bbox1 = getModelBoundingBox(selectedFeature);
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            const xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
            collidableMeshList = updateColliderList();
            const checkCollision = isCrossBarCollied(bbox1, collidableMeshList, xPos, selectedFeature.name);
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 6.801, vanDiff)  >= 0 && !checkCollision) {
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos) 
            } 
          } else if(selectedFeature.name == "air_conditioner_v1" || selectedFeature.name == "air_conditioner_v2"){
            const bbox1 = getModelBoundingBox(selectedFeature);
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            const xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
            collidableMeshList = updateColliderList();
            const checkCollision = isCrossBarCollied(bbox1, collidableMeshList, xPos, selectedFeature.name);
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 6.801, vanDiff - 4.85)  >= 0 && !checkCollision) {
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos) 
            } 
          } else if(selectedFeature.name == "air_conditioner_x2" || selectedFeature.name == "air_conditioner_x3"){
            const bbox1 = getModelBoundingBox(selectedFeature);
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            const xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
            collidableMeshList = updateColliderList();
            const checkCollision = isCrossBarCollied(bbox1, collidableMeshList, xPos, selectedFeature.name);
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 6.801, vanDiff - 4.85)  >= 0 && !checkCollision) {
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos) 
            } 
          } else if(selectedFeature.name == 'maxxair'){
            const bbox1 = getModelBoundingBox(selectedFeature);
            let solarModels = scene.children.filter((group) => group?.children[0]?.name == "solar55");
            const solarBoxes = solarModels.map((model) => {
              return getModelBoundingBox(model)
            });

            if(solarBoxes.length > 0) {
              const connectedSolar = solarBoxes.filter(solar => solar.max.x > bbox1.max.x && solar.min.x < bbox1.min.x)[0];
              if(connectedSolar) return;
            }
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            const xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
            collidableMeshList = updateColliderList();
            const checkCollision = isCrossBarCollied(bbox1, collidableMeshList, xPos, selectedFeature.name);
            if(isValueInScale(coords.x * 1000 / 25.4 * -1, cutOffArea, 6.801, vanDiff) >= 0 && !checkCollision){
              updateSolarArea(xPos, selectedFeature.name, 2)
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
              updateModelState(2, selectedFeature.name, xPos)
            } 
          } else if(selectedFeature.name == 'solar30') {
            const bbox1  = getModelBoundingBox(selectedFeature);
            let acmodels = scene.children.filter((group) => group?.children[0]?.name == "air_conditioner");
            const acboxes = acmodels.map((model) => {
              return getModelBoundingBox(model)
            });
            const acBox = acboxes.filter(acbox => acbox.max.x < bbox1.max.x && acbox.min.x > bbox1.min.x)[0];
            if(acBox) {
              const centerOfBox = (acBox.min.x + acBox.max.x) /2;
              const maxMovable = centerOfBox + 3.8 * 0.0254
              const minMovable = centerOfBox - 3.8 * 0.0254
              const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
              let xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
              collidableMeshList = updateColliderList();
              const checkCollision = isColliedNearBy(bbox1, acBox, collidableMeshList, xPos);
              if(xPos <= maxMovable && xPos >= minMovable && !checkCollision) {
                selectedFeature.parent.position.x = xPos
              }
            }
          } else if(selectedFeature.name == 'solar55') {
            const bbox1  = getModelBoundingBox(selectedFeature);
            let acmodels = scene.children.filter((group) => group?.children[0]?.name == "maxxair");
            const fanBoxes = acmodels.map((model) => {
              return getModelBoundingBox(model)
            });
            const fanBox = fanBoxes.filter(fanbox => fanbox.max.x < bbox1.max.x && fanbox.min.x > bbox1.min.x)[0];
            if(fanBox) {
              const centerOfBox = (fanBox.min.x + fanBox.max.x) /2;
              const maxMovable = centerOfBox + 0.025
              const minMovable = centerOfBox - 0.025
              const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
              let xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
              collidableMeshList = updateColliderList();
              const checkCollision = isColliedNearBy(bbox1, fanBox, collidableMeshList, xPos);
              if(xPos <= maxMovable && xPos >= minMovable && !checkCollision) {
                selectedFeature.parent.position.x = xPos
              }
            }
          } else if(selectedFeature.name == "8020_crossbar") {
            const bbox1  = getModelBoundingBox(selectedFeature);
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            let xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
            collidableMeshList = updateColliderList();
            const checkCollision = isCrossBarCollied(bbox1, collidableMeshList, xPos, selectedFeature.name);
            if(!checkCollision) {
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
            }
          } else if(selectedFeature.name == "lshape_cross"){
            const bbox1  = getModelBoundingBox(selectedFeature);
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            let xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
            collidableMeshList = updateColliderList();
            const checkCollision = isCrossBarCollied(bbox1, collidableMeshList, xPos, selectedFeature.name);
            if(!checkCollision) {
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
            }
          }
          else {
            const bbox1 = getModelBoundingBox(selectedFeature);
            const widthOfObject = Math.abs(bbox1.max.x - bbox1.min.x);
            let xPos = Math.min(movingOffset - selectedFeatureWidth / 2, Math.max((- vanArea[1] * 0.0254) + widthOfObject/2, coords.x));
            collidableMeshList = updateColliderList();
            const checkCollision = isCrossBarCollied(bbox1, collidableMeshList, xPos, selectedFeature.name);
            if(!checkCollision) {
              selectedFeature.parent.position.x = xPos;
              selectedFeature.parent.position.z = 0;
            }
          }
          render();
        }
      }
      controls.enableRotate = false;
    }
    else {
      controls.enableRotate = true;
    }
  });

  canvasContainer.addEventListener('mouseup', () => {
    isDragging = false;
  });
  
  document.addEventListener('DOMContentLoaded', function () {
    canvas = document.querySelector('canvas[data-engine="three.js r162"]');
  });

  document.getElementById('color-selectable').addEventListener('click', function(event) {

    if(event.target.classList.contains("color-item")) {
      const options = document.querySelectorAll('.color-item');
      options.forEach(option => {
        option.classList.remove('color-selected')
      })
      event.target.classList.add('color-selected');
      bodyMaterial = new THREE.MeshPhysicalMaterial( {
        color: event.target.style.backgroundColor ?? 0xffffff, metalness: 1.0, roughness: 0.9, clearcoat: 1.0, clearcoatRoughness: 0.08
      });
      bodyMesh.material = bodyMaterial
    }
  })

  document.getElementById('deleteButton').addEventListener('click', function () {
    if(selectedFeature.name === "ds_base_kit"){
			document.querySelector("#ds_base_kit_items").style.display = "none";
		}
		if(selectedFeature.name === "ps_base_kit"){
			document.querySelector("#ps_base_kit_items").style.display = "none";
		}

    if (selectedFeature) {
      scene.remove(selectedFeature.parent);
      this.disabled = true;
      calcPrice(selectedFeature.name, false, null)
      updateModelState(3, selectedFeature.name, selectedFeature.parent.position.x)
      render();
      selectedFeature = null;
    }
    let totalQuantity = 0;

    availableProducts.map((product) => {
      if (product.type != 'rack') totalQuantity += product.quantity;
    })
    if (totalQuantity === 0)
      handleDisableResetBtn()
  });

  function handleEnableResetBtn() {
    let resetBtn = document.getElementById("resetButton");
    resetBtn.disabled = false;
  }
  function handleDisableResetBtn() {
    let resetBtn = document.getElementById("resetButton");
    resetBtn.disabled = true;
  }

  document.getElementById('addCartBtn').addEventListener('click', async function() {
    let cartItems = []
    availableProducts.map((product) => {
      if(product.price > 0 && product.quantity > 0) {
        if(product.type == "solar_cross") {
          if(product.quantity > 2)
          cartItems.push({
            'id': product.id,
            'quantity': (product.quantity - 2)
          })
        } else {
          cartItems.push({
            'id': product.id,
            'quantity': product.quantity
          })
        }
      }
    });

    const formData = {'items': cartItems};

    if(cartItems.length > 0) {
      let token = '';
      await fetch(window.Shopify.routes.root + 'cart/clear.js',{
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
      })
      .then(response => {
        return response.json();
      })
      .then((data) => {
        token = data.token;
      })
      .catch((error) => {
        console.error('Error:', error);
        return false;
      });

      await fetch(window.Shopify.routes.root + 'cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        return response.json();
      })
      .then((addedData) => {
        gotoCheckout(token)
      })
      .catch((error) => {
        console.error('Error:', error);
        return false;
      });
    } 
  });

  document.getElementById("selectVanBtn").addEventListener("click", function(event) {
    window.location.reload();
  })

  document.getElementById("toggleTire").addEventListener("click", function(event) {
    const tires = scene.children.filter(group => group?.children[0]?.name == "wheel");

    if(tires.length > 0) {
      tires.map((tire) => {
        scene.remove(tire);
      })
    } else {
      const loadModel = (url) => {
        return new Promise((resolve, reject) => {
          loader.load(url, function (gltf) {
            resolve(gltf.scene);
          }, undefined, reject);
        });
      };
      const tireModelLink = "https://cdn.shopify.com/3d/models/b9daf3c93f51dec6/tire.glb"
      const dsCarrier = scene.children.find(group => group?.children[0]?.name == "ds_tire_carrier");
      if(dsCarrier) {
        loadModel(tireModelLink)
          .then((modelItem) => {
            let model = modelItem;
            model.position.x = rearLadderConf["ds_tire"][0];
            model.position.y = rearLadderConf["ds_tire"][1];
            model.position.z = rearLadderConf["ds_tire"][2];
            scene.add(model);
          })
          .catch((error) => {
            console.error('An error occurred while loading the model:', error);
          });
      }
      const psCarrier = scene.children.find(group => group?.children[0]?.name == "ps_tire_carrier");
      if(psCarrier) {
        loadModel(tireModelLink)
          .then((modelItem) => {
            let model = modelItem;
            model.position.x = rearLadderConf["ps_tire"][0];
            model.position.y = rearLadderConf["ps_tire"][1];
            model.position.z = rearLadderConf["ps_tire"][2];
            scene.add(model);
          })
          .catch((error) => {
            console.error('An error occurred while loading the model:', error);
          });
      }
    }
  })
  // adddd start
  const awnings_open = [
    { name: "awning", modelLink: "https://cdn.shopify.com/3d/models/a72e2b5afc875da5/awning_open.glb" },
    { name: "awning_350", modelLink: "https://cdn.shopify.com/3d/models/f7fdb0d2b34b20e3/awning_350_open.glb" },
    { name: "awning_400", modelLink: "https://cdn.shopify.com/3d/models/852b3c6a36e20a4e/awning_400_open.glb" },
    { name: "awning_450", modelLink: "https://cdn.shopify.com/3d/models/6fbd9a2b7d216424/awning_450_open.glb" },
  ];

  document.getElementById("toggleAwning").addEventListener("click", function (event) {
    console.log("awning click")
    const addedAwning = scene.children.find(group =>
      group?.children[0]?.name && awnings_open.some(awning => awning.name == group.children[0].name)
    );
    console.log("addedAwning",addedAwning)
    if (addedAwning) {
      console.log("added awning true", addedAwning.children[0].name)
      console.log("addedAwning x value", addedAwning.position.x)
      const awning_open = scene.children.find(group => group?.children[0]?.name == addedAwning.children[0].name+"_open");
      if (awning_open) {
        scene.remove(awning_open);
      } else {
        const loadModel = (url) => {
          return new Promise((resolve, reject) => {
            loader.load(url, function (gltf) {
              resolve(gltf.scene);
            }, undefined, reject);
          });
        };
        const awningOpenModelLink = awnings_open.find(item=>item.name == addedAwning.children[0].name).modelLink;

        loadModel(awningOpenModelLink)
          .then((modelItem) => {
            let model = modelItem;
            model.position.x = addedAwning.position.x;
            model.position.y = vanRoofHeight - 2.77;
            model.position.z = owningPosZ;
            scene.add(model);
          })
          .catch((error) => {
            console.error('An error occurred while loading the model:', error);
          });
      }
    }
  })
  // adddd end
  document.getElementById('imgDownloadBtn').addEventListener('click', function (event) {
    renderer.render(scene, camera);

    var webGLCanvas = renderer.domElement;
    var webGLImage = webGLCanvas.toDataURL('image/png');

    var images = document.querySelectorAll('.threejs-container img');
    var imagePromises = Array.from(images).map(img => {
      return new Promise((resolve, reject) => {
        if (img.complete) {
          resolve();
        } else {
          img.onload = resolve;
          img.onerror = reject;
          img.crossOrigin = 'anonymous';
        }
      });
    });

    Promise.all(imagePromises).then(() => {
      const buildList = document.querySelector('#build-list');
      const tempContainer = document.createElement('div');
      tempContainer.style.position = 'absolute';
      tempContainer.style.top = '-9999px';
      tempContainer.style.left = '-9999px';
      document.body.appendChild(tempContainer);

      const canvasClone = webGLCanvas.cloneNode(true);
      const buildListClone = buildList.cloneNode(true);
      const buildItemsClone = buildListClone.querySelectorAll(".build-item");
      const dividers = buildListClone.querySelectorAll(".divider");
      const removeProductBtns = buildListClone.querySelectorAll(".remove-product");
      const itemName = buildListClone.querySelectorAll(".item-name");
      const canvas = document.querySelector("canvas");
      let canvasWidth = parseInt(canvas.style.width, 10);

      buildListClone.style.cssText = `width: ${canvasWidth}; display: flex; flex-wrap: wrap; padding: 24px 0`;

      buildItemsClone.forEach((item, index) => {
        item.style.cssText = "margin-left: 8px; margin-right: 8px; border: 1px solid #333; padding: 12px; border-radius: 8px;";

        if (canvasWidth >= 0 && canvasWidth < 600) {
          item.style.width = "100%";
        } else if (canvasWidth >= 600 && canvasWidth < 1200) {
          item.style.width = "calc(50% - 16px)";
        } else {
          item.style.width = "calc(33.33% - 16px)";
        }

      })

      dividers.forEach((item, index) => {
        item.style.display = "none";
      })
      removeProductBtns.forEach((item, index) => {
        item.style.display = "none";
      })
      itemName.forEach((item, index) => {
        item.style.cssText = "line-height: 2; text-decoration: none !important;";
      })

      tempContainer.appendChild(canvasClone);
      tempContainer.appendChild(buildListClone);

      return html2canvas(tempContainer, {
        useCORS: true, 
      }).then(htmlCanvas => {
        document.body.removeChild(tempContainer);

        var combinedCanvas = document.createElement('canvas');
        combinedCanvas.width = htmlCanvas.width;
        combinedCanvas.height = htmlCanvas.height;
        var context = combinedCanvas.getContext('2d');

        context.drawImage(htmlCanvas, 0, 0);

        var webGLImageElement = new Image();
        webGLImageElement.src = webGLImage;
        webGLImageElement.onload = function () {
          context.drawImage(webGLImageElement, 0, 0);

          var combinedImageData = combinedCanvas.toDataURL('image/png');

          var link = document.createElement('a');
          link.download = 'scene.png';
          link.href = combinedImageData;
          link.click();

          const { jsPDF } = window.jspdf;
          const pdf = new jsPDF({
            orientation: 'portrait',
            unit: 'px',
            format: [combinedCanvas.width, combinedCanvas.height]
          });

          pdf.addImage(combinedImageData, 'PNG', 12, 12, combinedCanvas.width - 24, combinedCanvas.height - 24);
          pdf.save('scene.pdf');
        };

        const radioButtons = buildList.querySelectorAll('.variant-handler');
        radioButtons.forEach(radio => {
          if (radio.hasAttribute('checked')) {
            radio.checked = true;
          } else {
            radio.checked = false;
          }
        });
      });
    }).catch(error => {
      console.error('An error occurred while capturing the content:', error);
    });
  });

  let vanSelected = false
  const selectButton = document.getElementById('van_select_trigger');
  if (selectButton) {
    selectButton.addEventListener('click', selectVan);
  }

  document.getElementById('resetButton').addEventListener('click', resetConfig);

  var productElements = document.getElementsByClassName("dropdown-item-img");

	for (var i = 0; i < productElements.length; i++) {
    productElements[i].addEventListener('click', event => { handleClickProduct(event); handleEnableResetBtn(); }, false);
  }

  function getPrices() {
    const dataPromises = availableProducts.map(async (product) => {
      if(product.availability) {
        if(product.type == "rack") {
          let racksData = {...product};
          racksData.products = []
          for (let i in product.handles) {
            const response = await fetch(window.Shopify.routes.root + `products/${product.handles[i]}.js`);
            const productData = await response.json();
            racksData.products?.push(productData);
          }
          return racksData
        }
        else {
          const response = await fetch(window.Shopify.routes.root + `products/${product.handle}.js`);
          const productData = await response.json();
          return productData;
        }
      } 
      else return product;
    });
   
    Promise.all(dataPromises)
      .then(data => {
        const priceProducts = availableProducts.map((product, index) => {
          let productPrice = 0;
          const productData = data[index];

          if (productData.id === product.id) {
            productPrice = productData.price / 100;
          } else {
            const variant = productData.variants.find(variant => variant.id === product.id);
            if (variant) {
              productPrice = variant.price / 100;
            }
          }
          if(product.type == 'rack') {
            totalPrice = productPrice;
            document.getElementById('products-num').innerHTML = 1
            document.getElementById("products-cost").innerHTML = productPrice;
          }
          return { ...product, price: productPrice, title: productData?.title, image: productData?.featured_image ?? product.image, variants: productData?.variants, url: productData?.url, products: productData?.products ?? [] };
        });

        availableProducts = priceProducts
      })
      .catch(error => console.error('Error fetching product data:', error));
  }
  
  getPrices();

  function excludeRanges(vanArea, addedState) {
    let ranges = [];
    for (let i = 0; i < addedState.length; i += 2) {
        ranges.push([addedState[i], addedState[i + 1]]);
    }
    ranges.sort((a, b) => a[0] - b[0]);
    let result = [];
    let currentStart = vanArea[0];
    let currentEnd = vanArea[1];

    for (let range of ranges) {
      let [rangeStart, rangeEnd] = range;
      if (rangeStart > currentEnd) continue;
      if (rangeStart > currentStart) {
          result.push(currentStart, rangeStart);
      }
      currentStart = Math.max(currentStart, rangeEnd);
    }

    if (currentStart < currentEnd) {
      result.push(currentStart, currentEnd);
    }
    return result;
	}

	function findFittingIntervalIndex(result, radius) {
    let requiredLength = 2 * radius;
    for (let i = 0; i < result.length; i += 2) {
      let intervalStart = result[i];
      let intervalEnd = result[i + 1];
      if (intervalEnd - intervalStart >= requiredLength) {
        return i;
      }
    }
    return -1;
	}

	function getIntersectionIntervals(intervals1, intervals2, diff, centerDevi = 0) {
    let intersections = [];

    for (let i = 0; i < intervals1.length; i += 2) {
      let start1 = intervals1[i];
      let end1 = intervals1[i + 1];

      for (let j = 0; j < intervals2.length; j += 2) {
        let start2 = intervals2[j] - diff + centerDevi - vanDiff;
        let end2 = intervals2[j + 1] + diff + centerDevi - vanDiff;
        let maxStart = Math.max(start1, start2);
        let minEnd = Math.min(end1, end2);
        if (maxStart < minEnd) {
            intersections.push(maxStart, minEnd);
        }
      }
    }
    return intersections;
	}

  function updateCrossBars(posX, type, radius) {
    if(type == 'maxxair' || type == 'air_conditioner' || type == "air_conditioner_v1" || type == "air_conditioner_v2" || type == "air_conditioner_x2" || type == "air_conditioner_x3") {
      const startPoint = posX * 1 + (radius * 2.54 / 100)
      const endPoint = posX * 1 - (radius * 2.54 / 100)
      const lcrossBars = scene.children.filter(group => group?.children[0]?.name == "lshape_cross");
      let overLapped = false;
      let overLappedWidth = 0;
      lcrossBars.map((crossbar) => {
        const crossXPos = crossbar?.position?.x;
        const barStartPoint = crossXPos + 0.3435 + 0.02;
        if(barStartPoint > endPoint) {
          overLapped = true;
          overLappedWidth = Math.abs(barStartPoint - endPoint);
        }
        if(overLapped) {
          crossbar.position.x = crossXPos - overLappedWidth
          if(crossXPos - overLappedWidth < -2.4) {
            scene.remove(crossbar);
          }
        }
      })

    } else if (type == 'solar200') {
      const lcrossBars = scene.children.filter(group => group?.children[0]?.name == "lshape_cross");
      let updatedBars = lcrossBars.map((crossbar) => {
        const crossXPos = crossbar?.position?.x;
        if(Math.abs(crossXPos - posX) < 0.687) {
          scene.remove(crossbar);
          return null
        }
        return crossbar;
      }).filter(Boolean);
      const solarPanels = scene.children.filter(group => group?.children[0]?.name == "solar200" || group?.children[0]?.name == "solar100" || group?.children[0]?.name == "solar250");
      if(updatedBars.length > solarPanels.length + 1) {
        scene.remove(updatedBars[0]);
      }
    } else {
      console.log(posX, type, radius)
    }
  }

  function getAddedState() {
    const itemsToBeCalc = ['maxxair', 'solar200', 'solar250', 'solar100', 'air_conditioner','8020_crossbar', 'solar30', 'solar55', 'air_conditioner_p', 'solar220', 'air_conditioner_v1', 'air_conditioner_v2', 'air_conditioner_x2', 'air_conditioner_x3', "new_solar250", "new_solar220", "new_solar200", "new_solar100", "mk20-w3", "mk20-l2", "mk20-maxxair", "mk22-w3", "mk23-ac"];
    const itemsToCalc = scene.children.filter(group => itemsToBeCalc.includes(group?.children[0]?.name));
    const boxes = itemsToCalc.map((model) => {
      return getModelBoundingBox(model)
    });
    const curState = createOrderedArray(boxes);
    return curState;
  }

	function getAvailablePoint(selectedItem) {
		const curState = getAddedState();
		let result = excludeRanges(vanArea, curState);

		if(selectedItem.type == 'air_conditioner' || selectedItem.type == 'air_conditioner_v1' || selectedItem.type == 'air_conditioner_v2' || selectedItem.type == 'air_conditioner_x2' || selectedItem.type == 'air_conditioner_x3') {
			if(fromTemplate) {
        console.log("From Template");
        let intersections = getIntersectionIntervals(result, cutOffArea, selectedItem.xRadius - 7.0, 5.2);
        let canIndex = findFittingIntervalIndex(intersections, selectedItem.xRadius);
        let xCenter = intersections[canIndex] + selectedItem.xRadius;
        let positionX = -1 * xCenter * 0.0254;
        return positionX;

      } else {
        let intersections = getIntersectionIntervals(result, cutOffArea, selectedItem.xRadius - 7.2);
        console.log("intersections: ", intersections, result);

        let canIndex = findFittingIntervalIndex(intersections, selectedItem.xRadius);
        console.log("canIndex: ", canIndex);

        let xCenter = intersections[canIndex] + selectedItem.xRadius;
        let positionX = -1 * xCenter * 0.0254;
        return positionX;
      }
		} else if(selectedItem.type == 'maxxair') {
			let intersections = getIntersectionIntervals(result, cutOffArea, selectedItem.xRadius - 7, 3.225);
			let canIndex = findFittingIntervalIndex(intersections, selectedItem.xRadius);
			let xCenter = intersections[canIndex] + selectedItem.xRadius;
			let positionX = -1 * xCenter * 0.0254;
			return positionX;
		} else {
			let canIndex = findFittingIntervalIndex(result, selectedItem.xRadius + crossbarWidth);
			let xCenter = result[canIndex] + (selectedItem.xRadius + crossbarWidth);
			let positionX = -1 * xCenter * 0.0254;
			return positionX;
		}

	}

  function findNearestItems(boxesArr, xValue) {
    let itemLessThanX = null;
    let itemGreaterThanX = null;
    let smallestDiffLessThanX = Infinity;
    let smallestDiffGreaterThanX = Infinity;

    boxesArr.forEach(box => {
      const maxDiff = Math.abs(box.max.x - xValue);
      const minDiff = Math.abs(box.min.x - xValue);

      if (box.max.x < xValue && maxDiff < smallestDiffLessThanX) {
          smallestDiffLessThanX = maxDiff;
          itemLessThanX = box;
      }

      if (box.min.x > xValue && minDiff < smallestDiffGreaterThanX) {
          smallestDiffGreaterThanX = minDiff;
          itemGreaterThanX = box;
      }
    });

    if (itemGreaterThanX && itemLessThanX) {
        return [itemGreaterThanX, itemLessThanX];
    } else if (itemGreaterThanX) {
        return [itemGreaterThanX];
    } else if (itemLessThanX) {
        return [itemLessThanX];
    } else {
      let nearestItem = null;
      let smallestDifference = Infinity;

      boxesArr.forEach(box => {
          const minDifference = Math.abs(box.min.x - xValue);
          const maxDifference = Math.abs(box.max.x - xValue);
          const currentDifference = Math.min(minDifference, maxDifference);

          if (currentDifference < smallestDifference) {
              smallestDifference = currentDifference;
              nearestItem = box;
          }
      });

      return [nearestItem];
    }
  }

	function handleClickProduct(event){
		let positionX = 0;
		let positionY = vanRoofHeight;
		let positionZ = 0;
		model = null;
		vanItem = event.target;
		let selectedItem = availableProducts.filter(product => product.htmlId == event.target.id)[0];
		if(!selectedItem) return;

    if(selectedItem.htmlId === "ds_base_kit"){
			document.querySelector("#ds_base_kit_items").style.display = "block";
		}
		if(selectedItem.htmlId === "ps_base_kit"){
			document.querySelector("#ps_base_kit_items").style.display = "block";
		}

		if(selectedItem.type == 'ladder' || selectedItem.type == 'sp_ladder' || selectedItem.type == 'ladder_tr_medium' ) {
			if(selectedItem.quantity > 0 ) return false;
			positionX = ladderPos[0];
			positionY = ladderPos[1];
			positionZ = ladderPos[2];
		} else if(selectedItem.type == 'sp_wheel_ladder') {
      if(selectedItem.quantity > 0 ) return false;
			positionX = wheelLadderPos[0];
			positionY = wheelLadderPos[1];
			positionZ = wheelLadderPos[2];
    } else if (
      selectedItem.type == 'ds_base_kit' || 
      selectedItem.type == 'ps_base_kit' ||
      selectedItem.type == 'ds_ladder_extension' || 
      selectedItem.type == 'ps_ladder_extension' ||
      selectedItem.type == 'ds_easy_step' || 
      selectedItem.type == 'ps_easy_step' ||
      selectedItem.type == 'ds_tire_carrier' || 
      selectedItem.type == 'ps_tire_carrier'
    ) {
      const dsProductsList = ["ds_ladder_extension", "ds_easy_step", "ds_tire_carrier"]
      const psProductsList = ["ps_ladder_extension", "ps_easy_step", "ps_tire_carrier"]

      if(dsProductsList.includes(selectedItem.type)) {
        const dsBaseKitModel = scene.children.filter((group) => group?.children[0]?.name == "ds_base_kit")
        if(dsBaseKitModel.length < 1) return
      } else if(psProductsList.includes(selectedItem.type)) {
        const psBaseKitModel = scene.children.filter((group) => group?.children[0]?.name == "ps_base_kit")
        if(psBaseKitModel.length < 1) return
      }
      if(selectedItem.quantity > 0 ) return false;
			positionX = rearLadderConf[selectedItem.type][0];
			positionY = rearLadderConf[selectedItem.type][1];
			positionZ = rearLadderConf[selectedItem.type][2];
    } else if(
      selectedItem.type == 'awning' || 
      selectedItem.type == "awning_350" || 
      selectedItem.type == "awning_400" || 
      selectedItem.type == "awning_450"
    ) {
      const awningModels = scene.children.filter((group) => group?.children[0]?.name == "awning" || group?.children[0]?.name == "awning_350" || group?.children[0]?.name == "awning_400" || group?.children[0]?.name == "awning_450");
      if(awningModels.length >= 1) return;

			if(selectedItem.quantity > 0 ) return false;
			positionX = -1.07;
			positionY = vanRoofHeight;
			positionZ = owningPosZ;
		} else if(selectedItem.type == 'light_bar' || selectedItem.type == 'light_bar_copy') {
      const rackModel = scene.children.filter((group) => group?.children[0]?.name == "roof_rack_ext");
      const lightbarModels = scene.children.filter((group) => group?.children[0]?.name?.includes("light_bar"));
      if(lightbarModels.length >= 1) return false;
			if(selectedItem.quantity > 0 ) return false;
      if(rackModel.length >= 1){
        positionX = lightbarXPos;
        positionY = vanRoofHeight + 0.04;
        positionZ = 0;
      } else return false;
		} 
    else{
			positionY = vanRoofHeight;
			positionZ = 0;

			if(selectedItem.type == 'solar30' || selectedItem.type == 'mk23-ac') {
				let acItems = availableProducts.filter(product => product.type == 'air_conditioner' || product.type == 'air_conditioner_v1' || product.type == 'air_conditioner_v2' || product.type == 'air_conditioner_x2' || product.type == 'air_conditioner_x3');
        let acItemsCount = 0
        acItems.map(acItem => {
          acItemsCount += acItem.quantity
        })
        
				if (selectedItem.quantity >= acItemsCount) return false;

				let acModels = scene.children.filter((group) => group?.children[0]?.name == "air_conditioner" || group?.children[0]?.name == "air_conditioner_v1" || group?.children[0]?.name == 'air_conditioner_v2' || group?.children[0]?.name == 'air_conditioner_x2' || group?.children[0]?.name == 'air_conditioner_x3');
        
        let solarModels = scene.children.filter((group) => group?.children[0]?.name == "solar30" || group?.children[0]?.name == "mk23-ac");

        const acBoxes = acModels.map((model) => {
          return getModelBoundingBox(model)
        });

        const solarBoxes = solarModels.map((model) => {
          return getModelBoundingBox(model)
        });

        if(acBoxes.length != solarBoxes.length) {
          if(solarBoxes.length == 0) {
            positionX = acBoxes[0].min.x + Math.abs(acBoxes[0].min.x - acBoxes[0].max.x)/2
            const solarModel = availableProducts.filter(product => product.type == "solar30" || product.type == "mk23-ac");
            const solarWidth = solarModel[0].xRadius * 2.54 / 100 * 2; // width of solar panel
            collidableMeshList = updateColliderList();
            const filteredList = collidableMeshList.filter(mesh => mesh.min.x.toFixed(4) != acBoxes[0].min.x.toFixed(4));
            const nearestItems = findNearestItems(filteredList, positionX)

            if(nearestItems.length && nearestItems.length == 1) {
              if(nearestItems[0].min.x > positionX && Math.abs((- vanArea[1] * 0.0254) - nearestItems[0].min.x) > solarWidth){
                if(Math.abs(positionX - nearestItems[0].min.x) < solarWidth/2) {
                  positionX = nearestItems[0].min.x - solarWidth/2;
                }
              } else if(nearestItems[0].max.x < positionX) {
                if(Math.abs(positionX - nearestItems[0].max.x) < solarWidth/2) {
                  positionX = nearestItems[0].max.x + solarWidth/2;
                }
              } else return
            } else if(nearestItems.length == 2) {
              if(nearestItems[0].min.x > positionX && nearestItems[1].max.x < positionX && Math.abs(nearestItems[0].min.x - nearestItems[1].max.x) > solarWidth) {
                if(Math.abs(positionX - nearestItems[0].min.x) < solarWidth/2) {
                  positionX = nearestItems[0].min.x - solarWidth/2;
                } else if(Math.abs(positionX - nearestItems[1].max.x) < solarWidth/2) {
                  positionX = nearestItems[1].max.x  + solarWidth/2;
                }
              } else return;
            } else return;
          } else {
            const filterACs = acBoxes.filter(acbox => {
              solarBoxes.forEach(solarbox => {
                if(acbox.min.x > solarbox.min.x && acbox.max.x < solarbox.max.x) {
                  console.log(acbox)
                } else {
                  positionX = acbox.max.x - Math.abs(acbox.max.x - acbox.min.x)/2

                  // checking available to add
                  const solarModel = availableProducts.filter(product => product.type == "solar30" || product.type == "mk23-ac");
                  const solarWidth = solarModel[0].xRadius * 2.54 / 100 * 2; // width of solar panel
                  collidableMeshList = updateColliderList();
                  const filteredList = collidableMeshList.filter(mesh => mesh.min.x.toFixed(4) != acbox.min.x.toFixed(4));
                  const nearestItems = findNearestItems(filteredList, positionX)

                  if(nearestItems.length && nearestItems.length == 1) {
                    if(nearestItems[0].min.x > positionX && Math.abs((- vanArea[1] * 0.0254) - nearestItems[0].min.x) > solarWidth){
                      if(Math.abs(positionX - nearestItems[0].min.x) < solarWidth/2) {
                        positionX = nearestItems[0].min.x - solarWidth/2;
                      }
                    } else return
                  } else if(nearestItems.length == 2) {
                    if(nearestItems[0].min.x > positionX && nearestItems[1].max.x < positionX && Math.abs(nearestItems[0].min.x - nearestItems[1].max.x) > solarWidth) {
                      if(Math.abs(positionX - nearestItems[0].min.x) < solarWidth/2) {
                        positionX = nearestItems[0].min.x - solarWidth/2;
                      } else if(Math.abs(positionX - nearestItems[1].max.x) < solarWidth/2) {
                        positionX = nearestItems[1].max.x  + solarWidth/2;
                      }
                    } else return;
                  }
                }
              })
            })
          }
        } else return;
			} else if(selectedItem.type == 'solar55' || selectedItem.type == 'mk20-maxxair') {
				let fanItem = availableProducts.filter(product => product.type == 'maxxair')[0];
				if (selectedItem.quantity >= fanItem.quantity) return false;
        let acModels = scene.children.filter((group) =>  group?.children[0]?.name == "maxxair");
        let solarModels = scene.children.filter((group) => group?.children[0]?.name == "solar55" || group?.children[0]?.name == "mk20-maxxair");

        const fanBoxes = acModels.map((model) => {
          return getModelBoundingBox(model)
        });

        const solarBoxes = solarModels.map((model) => {
          return getModelBoundingBox(model)
        });

        if(fanBoxes.length != solarBoxes.length) {
          if(solarBoxes.length == 0) {
            positionX = fanBoxes[0].min.x + Math.abs(fanBoxes[0].min.x - fanBoxes[0].max.x)/2
            const solarModel = availableProducts.filter(product => product.type == "solar55" || product.type == "mk20-maxxair");
            const solarWidth = solarModel[0].xRadius * 2.54 / 100 * 2; // width of solar panel
            collidableMeshList = updateColliderList();
            const filteredList = collidableMeshList.filter(mesh => mesh.min.x.toFixed(4) != fanBoxes[0].min.x.toFixed(4));
            const nearestItems = findNearestItems(filteredList, positionX)

            if(nearestItems.length && nearestItems.length == 1) {
              if(nearestItems[0].min.x > positionX && Math.abs((- vanArea[1] * 0.0254) - nearestItems[0].min.x) > solarWidth){
                if(Math.abs(positionX - nearestItems[0].min.x) < solarWidth/2) {
                  positionX = nearestItems[0].min.x - solarWidth/2;
                }
              } else if(nearestItems[0].max.x < positionX) {
                if(Math.abs(positionX - nearestItems[0].max.x) < solarWidth/2) {
                  positionX = nearestItems[0].max.x + solarWidth/2;
                }
              } else return
            } else if(nearestItems.length == 2) {
              if(nearestItems[0].min.x > positionX && nearestItems[1].max.x < positionX && Math.abs(nearestItems[0].min.x - nearestItems[1].max.x) > solarWidth) {

                if(Math.abs(positionX - nearestItems[0].min.x) < solarWidth/2) {
                  positionX = nearestItems[0].min.x - solarWidth/2;
                } else if(Math.abs(positionX - nearestItems[1].max.x) < solarWidth/2) {
                  positionX = nearestItems[1].max.x  + solarWidth/2;
                }

              } else return;
            } else return;
          } else {
            const filterACs = fanBoxes.filter(acbox => {
              solarBoxes.forEach(solarbox => {
                if(acbox.min.x > solarbox.min.x && acbox.max.x < solarbox.max.x) {
                } else {
                  positionX = acbox.max.x - Math.abs(acbox.max.x - acbox.min.x)/2

                  // checking available to add
                  const solarModel = availableProducts.filter(product => product.type == "solar55" || product.type == "mk20-maxxair");
                  const solarWidth = solarModel[0].xRadius * 2.54 / 100 * 2; // width of solar panel
                  collidableMeshList = updateColliderList();
                  const filteredList = collidableMeshList.filter(mesh => mesh.min.x.toFixed(4) != acbox.min.x.toFixed(4));
                  const nearestItems = findNearestItems(filteredList, positionX)

                  if(nearestItems.length && nearestItems.length == 1) {
                    if(nearestItems[0].min.x > positionX && Math.abs((- vanArea[1] * 0.0254) - nearestItems[0].min.x) > solarWidth){
                      if(Math.abs(positionX - nearestItems[0].min.x) < solarWidth/2) {
                        positionX = nearestItems[0].min.x - solarWidth/2;
                      }
                    } else return
                  } else if(nearestItems.length == 2) {
                    if(nearestItems[0].min.x > positionX && nearestItems[1].max.x < positionX && Math.abs(nearestItems[0].min.x - nearestItems[1].max.x) > solarWidth) {
                      if(Math.abs(positionX - nearestItems[0].min.x) < solarWidth/2) {
                        positionX = nearestItems[0].min.x - solarWidth/2;
                      } else if(Math.abs(positionX - nearestItems[1].max.x) < solarWidth/2) {
                        positionX = nearestItems[1].max.x  + solarWidth/2;
                      }
                    } else return;
                  }
                }
              })
            })
          }
        } else {
          return;
        }
			} else {
        if(selectedItem.type == '8020_crossbar') {
          positionY = vanRoofHeight + 0.01
        }
				positionX = getAvailablePoint(selectedItem);
				if(!positionX) return;
        updateCrossBars(positionX, selectedItem.type, selectedItem.xRadius);
				updateModelState(1, selectedItem.type, positionX);
			}
		}

    loadItemDirectory = selectableProducts
    .flatMap(category => category.products)
    .flatMap(product => {
        return [
            { id: product.id, model: product.model }, 
            ...product.items?.map(item => ({ id: item.id, model: item.model })) || []
        ];
    })
    .find(item => item.id === event.target.id)?.model;

    const loadModel = (url) => {
      return new Promise((resolve, reject) => {
        loader.load(url, function (gltf) {
          resolve(gltf.scene);
        }, undefined, reject);
      });
    };

    loadModel(loadItemDirectory)
      .then((modelItem) => {
        model = modelItem;
				model.position.x = positionX;
				model.position.y = positionY;
				model.position.z = positionZ;
				scene.add(model);

				updateSolarArea(positionX, selectedItem.type, 1)
				calcPrice(selectedItem.type, true, model);
      })
      .catch((error) => {
        console.error('An error occurred while loading the model:', error);
      });
  }

  function createOrderedArray(boxesArr) {
    const values = [];
    boxesArr.forEach(box => {
        values.push({ type: 'max', value: -box.min.x * meterToInch });
        values.push({ type: 'min', value: -box.max.x * meterToInch });
    });

    values.sort((a, b) => a.value - b.value);

    const result = [];
    let minIndex = 0;
    let maxIndex = 1;

    values.forEach(item => {
        if (item.type === 'min') {
            result[minIndex] = item.value;
            minIndex += 2;
        } else {
            result[maxIndex] = item.value;
            maxIndex += 2;
        }
    });
    return result;
  }

  function gotoCheckout(token) {
    window.open(`/checkouts/cn/${token}`, '_blank')
  }

  function resetConfig(temp) {
    if(temp){fromTemplate = temp;}
    let models = scene.children.filter((group) => 
      group?.children[0]?.name == 'maxxair' || 
      group?.children[0]?.name == 'air_conditioner' || 
      group?.children[0]?.name == 'air_conditioner_p' || 
      group?.children[0]?.name == 'air_conditioner_v1' || 
      group?.children[0]?.name == 'air_conditioner_v2' || 
      group?.children[0]?.name == 'air_conditioner_x2' || 
      group?.children[0]?.name == 'air_conditioner_x3' || 
      group?.children[0]?.name == 'solar250' || 
      group?.children[0]?.name == 'solar220' || 
      group?.children[0]?.name == 'solar200' || 
      group?.children[0]?.name == 'solar100' || 
      group?.children[0]?.name == 'solar55' || 
      group?.children[0]?.name == 'solar30'|| 
      group?.children[0]?.name == 'new_solar250' || 
      group?.children[0]?.name == 'new_solar220' || 
      group?.children[0]?.name == 'new_solar200' || 
      group?.children[0]?.name == 'new_solar100' || 
      group?.children[0]?.name == 'cross_bar' || 
      group?.children[0]?.name == '8020_crossbar' || 
      group?.children[0]?.name == 'awning' || 
      group?.children[0]?.name == 'awning_350' || 
      group?.children[0]?.name == 'awning_400' || 
      group?.children[0]?.name == 'awning_450' || 
      group?.children[0]?.name == 'light_bar' || 
      group?.children[0]?.name == 'light_bar_copy' || 
      group?.children[0]?.name == 'mk20-w3' || 
      group?.children[0]?.name == 'mk20-l2' || 
      group?.children[0]?.name == 'mk20-maxxair' || 
      group?.children[0]?.name == 'mk22-w3' || 
      group?.children[0]?.name == 'mk23-ac' || 
      group?.children[0]?.name == 'ladder' );

    if(models?.length == 0) return;
    for(let x in models) {
      scene.remove(models[x])
    }

    let productList = [...availableProducts]

    productList = productList.map(product => {
      let newProduct = {...product};
      if(newProduct.type == 'rack') {
        console.log("This is roof rack") 
      }
      else newProduct.quantity = 0;
      return newProduct
    });

    availableProducts = productList;

    handleDisableResetBtn()

    addedState = [];
		selectedIndexOfState = -1;
		solar35Area = [];
		solar55Area = [];

    updateCartState(productList)
    updateBuildState(productList)
    calculatePrice(productList)
  }

  function doMouseDown(x, y) {
    controls.enableRotate = false;
    if (selectedFeature) {
      removeEdgeLines(selectedFeature);
      selectedFeature = null;
      selectedIndexOfState = -1;
      delelteBtn.disabled = true;
    }
    scene.remove(targetForDragging);

    let a = 2 * x / window.innerWidth - 1;
    let b = 1 - 2 * y / window.innerHeight;
    raycaster?.setFromCamera(new THREE.Vector2(a, b), camera);
    intersects = raycaster?.intersectObjects(scene.children);
    if (!intersects || intersects.length == 0) {
      return false;
    }
    let item = intersects[0];
    let objectHit = item.object;

    if (objectHit.parent &&
      objectHit.parent.name != "" &&
      objectHit.parent.name != "van" &&
      objectHit.name?.includes('roof_rack') != true &&
      objectHit != workPlane &&
      objectHit != shodowMesh) {
      scene.add(targetForDragging);
      targetForDragging.position.set(0, item.point.y, 0);

      if (objectHit != selectedFeature) {
        selectedFeature = objectHit;
        addEdgeLines(selectedFeature);
        delelteBtn.disabled = false;
        selectedIndexOfState = checkIsAvailable(objectHit.parent.position.x, selectedFeature.name, 3);
      }
      else {
        selectedFeature = null;
        removeEdgeLines(selected);
        delelteBtn.disabled = true;
        selectedIndexOfState = -1;
      }
      render();
    }
  }


  function addEdgeLines(object) {
    if (edgeLine) {
      object.remove(edgeLine);
      edgeLine.geometry.dispose();
      edgeLine.material.dispose();
    }
    const edges = new THREE.EdgesGeometry(object.geometry);
    edgeLine = new THREE.LineSegments(edges, lineMaterial);
    object.add(edgeLine);
  }

  function removeEdgeLines(object) {
    if (edgeLine) {
      object.remove(edgeLine);
      edgeLine.geometry.dispose();
      edgeLine.material.dispose();
      edgeLine = null;
    }
  }

  function calcPrice(modelName, flag, model) {
    let addProduct = {}
    switch (modelName) {
      case "air_conditioner":
        if(fromTemplate) {
          addProduct = availableProducts[10];
          flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
          addProduct.model = model;
          availableProducts[10] = addProduct;
        }
        else {
          addProduct = availableProducts[1];
          flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
          addProduct.model = model;
          availableProducts[1] = addProduct;
        }
        break;
      case "maxxair":
        addProduct = availableProducts[2];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[2] = addProduct;
        break;
      case "solar200":
        addProduct = availableProducts[3];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[3] = addProduct;

        addProduct = availableProducts[7];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[7] = addProduct;

        break;
      case "solar100":
        addProduct = availableProducts[15];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[15] = addProduct;

        if(typeOfVan == "fordtransit"){
          addProduct = availableProducts[7];
          if(addProduct.quantity > 0 && !flag){
            addProduct.quantity -= 1;
          } else if(flag) {
            addProduct.quantity += 1;
          }
          availableProducts[7] = addProduct;
        }
        break;
      case "solar250":
        addProduct = availableProducts[16];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[16] = addProduct;

        if(typeOfVan == "fordtransit"){
          addProduct = availableProducts[7];
          if(addProduct.quantity > 0 && !flag){
            addProduct.quantity -= 1;
          } else if(flag) {
            addProduct.quantity += 1;
          }
          availableProducts[7] = addProduct;
        }
        break;
      case "solar55":
        addProduct = availableProducts[4];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[4] = addProduct;

        addProduct = availableProducts[8];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[8] = addProduct;
        
        break;
      case "solar30":
        addProduct = availableProducts[5];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[5] = addProduct;

        addProduct = availableProducts[6];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[6] = addProduct;

        break;
      case "ladder":
        addProduct = availableProducts[9];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        addProduct.model = model;
        availableProducts[9] = addProduct;
        break;
      case "awning":
        addProduct = availableProducts[13];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[13] = addProduct;

        addProduct = availableProducts[14];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[14] = addProduct;

        break;
      case "awning_350":
        addProduct = availableProducts[17];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[17] = addProduct;

        addProduct = availableProducts[14];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[14] = addProduct;
        break;

      case "light_bar":
        addProduct = availableProducts[18];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[18] = addProduct;
        break;

      case "light_bar_copy":
        addProduct = availableProducts[19];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[19] = addProduct;
        break;

      case "8020_crossbar":
        addProduct = availableProducts[11];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[11] = addProduct;
        break;

      case "air_conditioner_p":
        addProduct = availableProducts[20];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[20] = addProduct;
        break;
      
      case "air_conditioner_v1":
        addProduct = availableProducts[22];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[22] = addProduct;
        break;
      case "air_conditioner_v2":
        addProduct = availableProducts[23];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[23] = addProduct;
        break;
      case "air_conditioner_x2":
        addProduct = availableProducts[24];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[24] = addProduct;
        break;
      case "air_conditioner_x3":
        addProduct = availableProducts[25];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[25] = addProduct;
        break;
      case "solar220":
        addProduct = availableProducts[21];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[21] = addProduct;
        break;
      case "sp_ladder":
        addProduct = availableProducts[26];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[26] = addProduct;
        break;
      case "awning_400":
        addProduct = availableProducts[27];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[27] = addProduct;

        addProduct = availableProducts[14];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[14] = addProduct;
        break;
      case "awning_450":
        addProduct = availableProducts[28];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[28] = addProduct;

        addProduct = availableProducts[14];
        if(addProduct.quantity > 0 && !flag){
          addProduct.quantity -= 1;
        } else if(flag) {
          addProduct.quantity += 1;
        }
        availableProducts[14] = addProduct;
        break;

      case "new_solar250":
        addProduct = availableProducts[29];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[29] = addProduct;
        break;
      case "new_solar220":
        addProduct = availableProducts[30];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[30] = addProduct;
        break;
      case "new_solar200":
        addProduct = availableProducts[31];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[31] = addProduct;
        break;
      case "new_solar100":
        addProduct = availableProducts[32];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[32] = addProduct;
        break;

      case "mk20-w3":
        addProduct = availableProducts[33];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[33] = addProduct;
        break;

      case "mk20-l2":
        addProduct = availableProducts[34];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[34] = addProduct;
        break;

      case "mk20-maxxair":
        addProduct = availableProducts[35];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[35] = addProduct;
        break;

      case "mk22-w3":
        addProduct = availableProducts[36];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[36] = addProduct;
        break;

      case "mk23-ac":
        addProduct = availableProducts[37];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[37] = addProduct;
        break;
      
      case "sp_wheel_ladder":
        addProduct = availableProducts[38];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[38] = addProduct;
        break;

      case "ds_base_kit":
        addProduct = availableProducts[39];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[39] = addProduct;
        break;

      case "ps_base_kit":
        addProduct = availableProducts[40];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[40] = addProduct;
        break;

      case "ds_ladder_extension":
        addProduct = availableProducts[41];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[41] = addProduct;
        break;

      case "ps_ladder_extension":
        addProduct = availableProducts[42];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[42] = addProduct;
        break;
      
      case "ds_easy_step":
        addProduct = availableProducts[43];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[43] = addProduct;
        break;

      case "ps_easy_step":
        addProduct = availableProducts[44];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[44] = addProduct;
        break;

      case "ds_tire_carrier":
        addProduct = availableProducts[45];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[45] = addProduct;
        break;
      case "ps_tire_carrier":
        addProduct = availableProducts[46];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[46] = addProduct;
        break;

      case "ladder_tr_medium":
        addProduct = availableProducts[47];
        flag ? addProduct.quantity += 1 : addProduct.quantity -= 1;
        availableProducts[47] = addProduct;
        break;
      default:
        break;
    }
    updateBuildState(availableProducts);
    calculatePrice(availableProducts)
    updateCartState(availableProducts);
  }

  function updateCartState(availableProducts) {
    let totalItems = 0;
    availableProducts.map((product) => {
      let productAmount = product.quantity; 
      if(product?.type == 'solar_cross') {
        if(productAmount <= 2) productAmount = 0;
        else productAmount -= 2;
      }
      totalItems += productAmount
      if(product.htmlId != "") {
        if(document.getElementById(product.htmlId)) {
          let dragItem = document.getElementById(product.htmlId).querySelector(".carted-item");
          if (product.quantity > 0) {
            dragItem.innerHTML = product.quantity.toString();
            dragItem.classList.remove("d-none");
            dragItem.classList.add("d-flex");
          } else {
            dragItem.classList.remove("d-flex");
            dragItem.classList.add("d-none");
          }
        }
      }
    });
    document.getElementById('products-num').innerHTML = totalItems
  }

  function setViewCube() {
    clock = new THREE.Clock();
    helper = new ViewHelper(camera, renderer.domElement);
    helper.controls = controls;
    helper.controls.center = controls.target;
    const div = document.createElement('div');
    div.id = 'viewHelper';
    div.style.position = 'absolute';
    div.style.right = 0;
    div.style.bottom = 0;
    div.style.height = '128px';
    div.style.width = '128px';
    div.style.zIndex = 100

    document.getElementById("configurator-container").appendChild(div);
    div.addEventListener('pointerup', (event) => {
      helper.handleClick(event)
    });
    animate();

    if(window.innerWidth < 1024) helper.visible = false;
  }

  function animate() {
    requestAnimationFrame(animate);
    const delta = clock.getDelta();
    if (helper.animating) helper.update(delta);
    helper.render(renderer);
  }

  function setCameraView() {
    controls = new OrbitControls(camera, container);
    controls.maxDistance = 15;
    controls.minDistance = 4;
    controls.maxZoom = 3;
    controls.minZoom = 0.5;
    controls.maxPolarAngle = THREE.MathUtils.degToRad(90);
    controls.screenSpacePanning = false;
    controls.target.set(0, 0.5, 0);
  }

  function init() {
    const container = document.getElementById('container');
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    renderer.setSize(((window.innerWidth < 1024 ? window.innerWidth : window.innerWidth - 300)), window.innerHeight);
      renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setAnimationLoop(render);
    renderer.toneMappingExposure = 0.85;
    renderer.autoClear = false;
    container.appendChild(renderer.domElement);
    window.addEventListener('resize', onWindowResize);

    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.set(-1, 6, -6);
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    setCameraView();

    scene = new THREE.Scene();
    scene.background = new THREE.Color("#ffffff");
    setViewCube();

    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 2.5);
    directionalLight1.position.set(0, 3, 0);
    directionalLight1.castShadow = true;
    directionalLight1.shadow.mapSize.width = 300;  // Increase resolution
    directionalLight1.shadow.mapSize.height = 300;
    scene.add(directionalLight1);

    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 2.5);
    directionalLight2.position.set(-1, 1, 0);
    scene.add(directionalLight2);

    const directionalLight3 = new THREE.DirectionalLight(0xffffff, 2.5);
    directionalLight3.position.set(0, 1, 1);
    scene.add(directionalLight3);

    const directionalLight4 = new THREE.DirectionalLight(0xffffff, 2.5);
    directionalLight4.position.set(0, 1, -1);
    scene.add(directionalLight4);

    const ambientLight = new THREE.AmbientLight('#ffffff', 1); // color, intensity
    scene.add(ambientLight);

    const hdrLoader = new RGBELoader();
    hdrLoader.loadAsync( 'https://cdn.shopify.com/s/files/1/0412/9898/5124/files/mt1.hdr?v=1715607373' ).then(envMap=>{
      envMap.mapping = THREE.EquirectangularReflectionMapping;
      const params = {
        height: 15,
        radius: 100,
        enabled: true,
      };
      let skybox = new GroundedSkybox( envMap, params.height, params.radius );
      skybox.position.y = params.height - 0.01;
      scene.add( skybox );
      scene.environment = envMap;
    });

    
  }

  function getModelBoundingBox(mesh) {
    const box = new THREE.Box3().setFromObject(mesh);
    return box;
  }

  function isCrossBarCollied(selectedFeatureBoundingBox, collidableMeshList, xPos, selectedBoxName) {
    const widthOfObject = Math.abs(selectedFeatureBoundingBox.max.x - selectedFeatureBoundingBox.min.x);

    const filteredCollidableMeshList = collidableMeshList.filter(box => !(box.min.x.toFixed(3) == selectedFeatureBoundingBox.min.x.toFixed(3) && box.max.x.toFixed(3) == selectedFeatureBoundingBox.max.x.toFixed(3)));
    let collisionDetected = false;


    for (let boundingBox of filteredCollidableMeshList) {
      const centerItem = (boundingBox.min.x + boundingBox.max.x) /2;

      if(typeOfVan == "sprinter") {
        let crossbarDiff = 0;
        if(selectedBoxName == "solar100" || selectedBoxName == "solar220" || selectedBoxName == "new_solar250" || selectedBoxName == "new_solar220" || selectedBoxName == "new_solar200" || selectedBoxName == "new_solar100" || selectedBoxName == "mk20-l2" || selectedBoxName == "mk20-w3" || selectedBoxName == "mk22-w3" ){
          crossbarDiff = typeOfVan == "sprinter" ? 0.04 : 0;

          const collidableModels = ["solar100", "solar220", "new_solar250", "new_solar220", "new_solar200", "new_solar100", "mk20-l2", "mk20-w3", "mk22-w3"];
          const models = scene.children.filter((group) => collidableModels.includes(group?.children[0]?.name));
          const boundingBoxes = models.map((model) => {
            return getModelBoundingBox(model)
          });

          if(((xPos + widthOfObject/2) - boundingBox.min.x > 0.038 && (xPos + widthOfObject/2) - boundingBox.min.x < 0.042) ||
          ((xPos - widthOfObject/2) - boundingBox.max.x < -0.038 && (xPos - widthOfObject/2) - boundingBox.max.x > -0.042)) {
            const nearestBox = boundingBoxes.find(box => box.max.x == boundingBox.max.x && box.min.x == boundingBox.min.x)
            if(nearestBox && nearestBox.isBox3) collisionDetected = false;
            else collisionDetected = true
            break;
          }
          if ( 
            (xPos - widthOfObject/2) < boundingBox.max.x && 
            (xPos + widthOfObject/2) > boundingBox.min.x && 
            (xPos + widthOfObject/2) - boundingBox.min.x != crossbarDiff &&
            (xPos - widthOfObject/2) - boundingBox.max.x != -1 * crossbarDiff
          ) {
            collisionDetected = true;
            break;
          }

        } else {
          if ( ((xPos - widthOfObject/2) < boundingBox.max.x && (xPos + widthOfObject/2) > boundingBox.min.x)) {
            collisionDetected = true;
            break;
          }
        }
      } else {

        let nearestBox = null

        const acNames = ['maxxair', 'air_conditioner', "air_conditioner_v1", "air_conditioner_v2", "air_conditioner_x2", "air_conditioner_x3"]
        const crossbarNames = ["8020_crossbar", "mk20-l2", "mk20-w3", "mk22-w3", "mk20-maxxair", "mk23-ac"]

        if(acNames.includes(selectedBoxName)) {
          const crossbarModels = scene.children.filter((group) => crossbarNames.includes(group?.children[0]?.name));
          const crossBarBoundingBoxes = crossbarModels.map((model) => {
            return getModelBoundingBox(model)
          });
          nearestBox = crossBarBoundingBoxes.find(box => box.max.x == boundingBox.max.x && box.min.x == boundingBox.min.x)
        } else if(crossbarNames.includes(selectedBoxName)) {
          const acModels = scene.children.filter((group) => acNames.includes(group?.children[0]?.name));
          const acBoundingBoxes = acModels.map((model) => {
            return getModelBoundingBox(model)
          });
          nearestBox = acBoundingBoxes.find(box => box.max.x == boundingBox.max.x && box.min.x == boundingBox.min.x)
        }

        if(nearestBox) {
          if((xPos - widthOfObject/2) < boundingBox.max.x - 0.04 && (xPos + widthOfObject/2) > boundingBox.min.x + 0.04) {
            collisionDetected = true;
            break;
          }
        } else if (
          selectedBoxName == "mk20-l2" || 
          selectedBoxName == "mk20-w3" || 
          selectedBoxName == "mk22-w3" ||
          selectedBoxName == "mk20-maxxair" ||
          selectedBoxName == "mk23-ac"
        ){
          const crossbarDiff = 0.11;
          const collidableModels = ["mk20-l2", "mk20-w3", "mk22-w3", "8020_crossbar", "mk20-maxxair", "mk23-ac"];
          const models = scene.children.filter((group) => collidableModels.includes(group?.children[0]?.name));
          const boundingBoxes = models.map((model) => {
            return getModelBoundingBox(model)
          });

          if(((xPos + widthOfObject/2) - boundingBox.min.x > 0.108 && (xPos + widthOfObject/2) - boundingBox.min.x < 0.112) ||
          ((xPos - widthOfObject/2) - boundingBox.max.x < -0.108 && (xPos - widthOfObject/2) - boundingBox.max.x > -0.112)) {
            const nearestBox = boundingBoxes.find(box => box.max.x == boundingBox.max.x && box.min.x == boundingBox.min.x)
            if(nearestBox && nearestBox.isBox3) collisionDetected = false;
            else collisionDetected = true
            break;
          }
          if ( 
            (xPos - widthOfObject/2) < boundingBox.max.x && 
            (xPos + widthOfObject/2) > boundingBox.min.x && 
            (xPos + widthOfObject/2) - boundingBox.min.x != crossbarDiff &&
            (xPos - widthOfObject/2) - boundingBox.max.x != -1 * crossbarDiff
          ) {
            collisionDetected = true;
            break;
          }

        } else {
          if( ((xPos - widthOfObject/2) < boundingBox.max.x && (xPos + widthOfObject/2) > boundingBox.min.x)) {
            collisionDetected = true;
            break;
          }
        }
      }
    }

    return collisionDetected; 
  }

  function isColliedNearBy(selectedFeatureBoundingBox, box2, collidableMeshList, xPos) {
    const widthOfObject = Math.abs(selectedFeatureBoundingBox.max.x - selectedFeatureBoundingBox.min.x);
    const filteredCollidableMeshList = collidableMeshList.filter(box => !(box.min.x.toFixed(3) == selectedFeatureBoundingBox.min.x.toFixed(3) && box.max.x.toFixed(3) == selectedFeatureBoundingBox.max.x.toFixed(3)) && !(box.min.x.toFixed(3) == box2.min.x.toFixed(3) && box.max.x.toFixed(3) == box2.max.x.toFixed(3)));
    let collisionDetected = false;

    for (let boundingBox of filteredCollidableMeshList) {
      const centerItem = (boundingBox.min.x + boundingBox.max.x) /2;
      if ( ((xPos - widthOfObject/2) < boundingBox.max.x && (xPos + widthOfObject/2) > boundingBox.min.x)) {
        collisionDetected = true;
        break;
      }
    }
    return collisionDetected; 
  }

  function updateColliderList() {
    const collidableModels = ["cross_bar", "maxxair", "air_conditioner", "solar200", "solar250", "solar100", "lshape_cross", "8020_crossbar", "solar30", "solar55", "air_conditioner_p", "air_conditioner_v1", "air_conditioner_v2", "solar220", "air_conditioner_x2", "air_conditioner_x3", "new_solar250", "new_solar220", "new_solar200", "new_solar100", "mk20-w3", "mk20-l2", "mk20-maxxair", "mk22-w3", "mk23-ac"];
    let models = scene.children.filter((group) => collidableModels.includes(group?.children[0]?.name));

    const boxes = models.map((model) => {
      return getModelBoundingBox(model)
    });
    return boxes
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
    helper.visible = false;
  }

  function render() {
    controls.update();
    renderer.render(scene, camera);
  }

  function isValueInScale(value, scale, radius, vanDiff) {
    for (let i = 0; i < scale.length; i += 2) {
        if (value + 100 >= (scale[i] + radius - vanDiff + 100 ) && value + 100 <= (scale[i + 1] - radius - vanDiff + 100)) {
          return i;
        }
    }
    return -1;
  }

  function updateSolarArea(xPos, modelName, flag) {
    let productInfo = availableProducts.filter((product) => product.type == modelName)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254;
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;

    if(modelName == "air_conditioner"){
      if(solar35Area.length > 0 && flag == 2){
        let curArea = [...solar35Area];
        const indexOfModel = getPositionIndex(curArea, inchXPos, xRadius);
        if(indexOfModel >= 0) {
          const newArea = {
            position: inchXPos,
            confState: curArea[indexOfModel].confState,
            moved: true
          }
          curArea[indexOfModel] = newArea;
          solar35Area = curArea;
        }
      } else {
        const newArea = {
          position: inchXPos,
          confState: false,
          moved: false
        }
        solar35Area.push(newArea)
      }
    } else if(modelName == "maxxair"){
      if(solar55Area.length > 0 && flag == 2){
        let curArea = [...solar55Area];
        const indexOfModel = getPositionIndex(curArea, inchXPos, xRadius);
        if(indexOfModel >= 0) {
          const newArea = {
            position: inchXPos,
            confState: curArea[indexOfModel].confState,
            moved: true
          }
          curArea[indexOfModel] = newArea;
          solar55Area = curArea;
        }
      } else {
        const newArea = {
          position: inchXPos,
          confState: false,
          moved: false
        }
        solar55Area.push(newArea)
      }
    }
  }

  function checkIsAvailable(xPos, modelName, flag) {
    let productInfo = availableProducts.filter((product) => product.type == modelName)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254;
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;
    let startPointCheck, endPointCheck, centerPointCheck = -1;

    const curState = getAddedState();

    if(startValue < vanArea[0] || endValue > vanArea[1]) return false;
    
    if(flag == 1) {
      startPointCheck = isValueInScale(startValue, curState, 0, 0);
      endPointCheck = isValueInScale(endValue, curState, 0, 0);
      centerPointCheck = isValueInScale(inchXPos, curState, 0, 0);
    } else if(flag == 2) {
      const currentState = [...curState];
      if(selectedIndexOfState >= 0)currentState.splice(selectedIndexOfState, 2);
      startPointCheck = isValueInScale(startValue, currentState, 0, 0);
      endPointCheck = isValueInScale(endValue, currentState, 0, 0);
      centerPointCheck = isValueInScale(inchXPos, currentState, 0, 0);

    } else {
      let modelIndex = isValueInScale(inchXPos, curState, 0, 0);
      let startIndex = isValueInScale(inchXPos, curState, xRadius/2, 0);
      let endIndex = isValueInScale(inchXPos, curState, xRadius/2, 0);
      if(modelIndex == startIndex && modelIndex == endIndex) {
        return modelIndex
      } else {
        return -1;
      }
    }
    if(startPointCheck == -1 && endPointCheck == -1 && centerPointCheck == -1) {
      return true;
    } else return false;
  }

  function updateModelState(flag, modelType, xPos) {
    let productInfo = availableProducts.filter((product) => product.type == modelType)[0];
    let xRadius = productInfo.xRadius;
    let inchXPos = -1 * xPos/0.0254
    let startValue = inchXPos - xRadius;
    let endValue = inchXPos + xRadius;

    if(modelType == "ladder" || modelType == "sp_ladder" || modelType == "sp_wheel_ladder" || modelType == "ladder_tr_medium") return
    else if(modelType == 'solar55'){
      const selAreaIndex = solar55Area.findIndex((area) => area.position > (inchXPos - xRadius / 2) && area.position < (inchXPos + xRadius / 2));
      let selectedArea = {...solar55Area[selAreaIndex]};
      selectedArea.confState = false;
      if(selAreaIndex >= 0) solar55Area[selAreaIndex] = selectedArea;
      return;

    } else if(modelType == 'solar30') {
      const selAreaIndex = solar35Area.findIndex((area) => area.position > (inchXPos - xRadius / 2) && area.position < (inchXPos + xRadius / 2));
      let selectedArea = {...solar35Area[selAreaIndex]};
      selectedArea.confState = false;
      if(selAreaIndex >= 0) solar35Area[selAreaIndex] = selectedArea;
      return;
    } else if(modelType == 'maxxair' && flag == 3) {
      const selAreaIndex = solar55Area.findIndex((area) => area.position > (inchXPos - xRadius / 2) && area.position < (inchXPos + xRadius / 2));
      if(selAreaIndex >= 0) solar55Area.splice(selAreaIndex, 1);
    }
    else if(modelType == 'air_conditioner' && flag == 3) {
      const selAreaIndex = solar35Area.findIndex((area) => area.position > (inchXPos - xRadius / 2) && area.position < (inchXPos + xRadius / 2));
      if(selAreaIndex >= 0) solar35Area.splice(selAreaIndex, 1);
    }

    switch(flag) {
      case 1: 
        addedState.push(startValue, endValue)
        break;
      case 2: 
        if(selectedIndexOfState >= 0) {
          addedState.splice(selectedIndexOfState, 2);
          addedState.splice(selectedIndexOfState, 0, startValue, endValue)
        }
        break;
      case 3:
        if(selectedIndexOfState >= 0) {
          addedState.splice(selectedIndexOfState, 2);
        }
        break;
    }
  }

  const removeDuplicates = (arr, key) => {
    const seen = new Map();
    return arr.filter(item => {
      const identifier = key ? item[key] : JSON.stringify(item);
      return seen.has(identifier) ? false : seen.set(identifier, true);
    });
  };

  function updateBuildState(products) {
    const buildListDom = document.getElementById('build-list');
    let buildText = ''
    const totalProduct = mergeDeckPanelProducts(products)
    for(let i=0; i < totalProduct.length; i++) {
      const availableProduct = totalProduct[i];
      let productAmount = availableProduct.quantity; 
      if(availableProduct?.type == 'solar_cross') {
        if(productAmount <= 2) continue;
        else productAmount -= 2;
      }
      if(productAmount > 0) {
        buildText += '<div class="build-item"><div class="item-overview">'
        buildText += '<div class="product-info"><img src="'+ availableProduct?.image +'&width=50" width="50" height="50"/>'
        buildText += '<a class="item-name" href="'+availableProduct?.url + (availableProduct?.id ? ("?variant="+ availableProduct?.id ) : "" ) + '" target="_blank">'+ availableProduct?.title +'</a></div><button class="remove-product" id="'+ (availableProduct?.type + "___") +'">&#10799;</div>'
        if(availableProduct.availability){
          if(availableProduct?.type != "rack") {
            buildText += '<div class="item-variants">'
            availableProduct?.variants?.map((variant, index) => {
              buildText += '<div class="variant"><div>'
              buildText += '<label for="'+ (availableProduct?.type+"___"+variant?.id) +'" class="' + (Number(variant?.id) == Number(availableProduct?.id) ? 'selected-variant' : '') + '">'+ (variant.public_title ? variant.public_title : variant.name) +'</label>'
              buildText += '</div><div>'
              buildText += '$<span class="price">'+ variant.price / 100 +'</span>'
              buildText += '</div></div>'
            })
            buildText += '</div>'
          }
        } else {
          buildText += '<div class="not-sell">This item is not available for sale from Unaka Gear Co. Please contact support for any questions</div>'
        }
        buildText += '<div style="display: flex; justify-content: end">Qty. '+ productAmount +'</div>'
        buildText += '<div class="divider"></div></div>'
      }
    }
    buildListDom.innerHTML = buildText;
    buildListDom.addEventListener('click', handleRadioChange);
  }

  function handleRadioChange(event) {
    if (event.target.type === 'radio') {
      const targetVariant = event.target.id?.split('___');
      availableProducts = availableProducts.map((product) => {
        if(targetVariant[0] == product.type) {
          const selectedProduct = product.variants.find((variant) => variant.id == targetVariant[1]);
          let newProduct = {...product, id: selectedProduct.id, price: selectedProduct.price / 100};
          return newProduct;
        }
        else return product;
      });
      calculatePrice(availableProducts)
    } else if(event.target.type === 'submit') {
      const targetType = event.target.id?.split('___')[0];
      if(targetType == 'ac_cross' || targetType == 'solar_cross' || targetType == 'max_cross' || targetType == 'rack') {
        const toRemoveIndex = availableProducts.findIndex((product) => product.type == targetType);
        const quantity = availableProducts[toRemoveIndex].quantity;
        if(quantity > 0) availableProducts[toRemoveIndex].quantity = quantity - 1;
        updateBuildState(availableProducts)
        calculatePrice(availableProducts)
        updateCartState(availableProducts);
      } else {
        const toRemoveModel = availableProducts.find((product) => product.type == targetType)?.model;
        scene.remove(toRemoveModel);
        selectedIndexOfState = checkIsAvailable(toRemoveModel.position.x, toRemoveModel.children[0].name, 3);
        calcPrice(toRemoveModel.children[0].name, false, null)
        updateModelState(3, toRemoveModel.children[0].name, toRemoveModel.position.x)
      }
    }
  }

  function mergeDeckPanelProducts(productsList) {
    let deckPanelProducts = {
      "45804602917083": {
        count: 0
      },
      "45804602884315": {
        count: 0
      },
      "45804602949851": {
        count: 0
      },
    }
    const deckPanelIds = [45804602917083, 45804602884315, 45804602949851]  
    for(let x=0; x < productsList.length; x++) {
      const productItem = productsList[x];
      if(deckPanelIds.includes(productItem.id)) {
        if(productItem.type == "mk20-w3" || productItem.type == "mk22-w3") {
          deckPanelProducts[productItem.id]["count"] += productItem.quantity * 3
        } else if(productItem.type == "mk20-l2" || productItem.type == "mk20-maxxair" || productItem.type == "mk23-ac") {
          deckPanelProducts[productItem.id]["count"] += productItem.quantity * 2
        }
      }
    }
    let nonDeckProducts = productsList.filter(product => !deckPanelIds.includes(product.id))
    let deckProducts = removeDuplicates(productsList.filter(product => deckPanelIds.includes(product.id)), 'id')
    let deckItemsList = deckProducts.map((item) => {
      let deckItem = {...item};
      deckItem.quantity = deckPanelProducts[deckItem.id]["count"]
      return deckItem
    })
    const totalProduct = [...nonDeckProducts, ...deckItemsList]
    return totalProduct
  }

  function calculatePrice(products) {
    let totalPrice = 0;
    const totalProduct = mergeDeckPanelProducts(products)
    totalProduct.map((product) => {
      let productAmount = product.quantity; 

      if(product?.type == 'solar_cross') {
        if(productAmount <= 2) productAmount = 0;
        else productAmount -= 2;
      }

      if(productAmount > 0 && product.availability){
        totalPrice += productAmount * product.price;
      }
    })
    document.getElementById("products-cost").innerHTML = totalPrice.toFixed(2);
  }

  function getPositionIndex(areaArr, pos, radius) {
    const startPoint = pos - radius / 2;
    const endPoint = pos + radius / 2;
    for(let i=0; i< areaArr.length; i++) {
      if(areaArr[i].position > startPoint && areaArr[i].position < endPoint) return i;
    }
    return -1;
  }

  async function initVan(vanModelLink, shadowLink, rackModel, crossbarXPos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarLink){

    console.log("Initialize van")

    let selectableProductsText = ""

    for (const productItem of selectableProducts) {
      let productDropdownItemDetails = "";
      let productDropdownItemDetails2 = "";

      for (const productDropdownItem of productItem.products) {
        productDropdownItemDetails2 = "";
        if (productDropdownItem.items) {
          for (const productDropdownItem2 of productDropdownItem.items) {
            productDropdownItemDetails2 += `
              <div class="dropdown-sub-item">
                  <div class="dropdown-item-img" id="` + productDropdownItem2.id + `">
                      <div class="carted-item">1</div>
                  </div>
                  <div class="dropdown-item-name">` + productDropdownItem2.name + `</div>
              </div>
            `
          }
        }
        productDropdownItemDetails += `
          <div class="dropdown-item">
              <div class="dropdown-item-img" id="` + productDropdownItem.id + `">
                  <div class="carted-item">1</div>
              </div>
              <div class="dropdown-item-name">` + productDropdownItem.name + `</div>
              <div id="`+productDropdownItem.id+`_items">`+ productDropdownItemDetails2 + `</div>
          </div>
        `
      }

      selectableProductsText += `
        <div class="swiper-slide">
            <div class="item-box" data-category="` + productItem.id + `">
                <div class="item-img" id="` + productItem.id + `" draggable="false"></div>
                <div class="item-name">
                    <p style="text-transform:capitalize">` + removeDash(productItem.id) + `</p>
                </div>
                <div class="product-dropdown" id="` + productItem.id + `-dropdown">
                    <div class="dropdown-title" style="text-transform:capitalize">` + removeDash(productItem.id) + `</div>
                    <div class="dropdown-items">
                        `+ productDropdownItemDetails + `
                    </div >
                </div >
            </div >
          </div > `;
    }
    document.getElementById("selectableProducts").innerHTML = selectableProductsText;
    swiper.update();

    for (var i = 0; i < productElements.length; i++) {
      productElements[i].addEventListener('click', event => { handleClickProduct(event); handleEnableResetBtn(); }, false);
    }

    const itemBoxes = document.querySelectorAll('.item-box');
    const overlay = document.getElementById('overlay');
    let activeDropdown = null;

    // Function to close all dropdowns
    function closeAllDropdowns() {
      // Remove active class from all item images
      document.querySelectorAll('.item-img').forEach(img => {
          img.classList.remove('active');
      });

      // Hide all dropdowns
      document.querySelectorAll('.product-dropdown').forEach(dropdown => {
          dropdown.classList.remove('active');
      });

      // Hide overlay
      overlay.style.display = 'none';
      activeDropdown = null;
    }

    // Add click event to category items
    itemBoxes.forEach(box => {
      const category = box.getAttribute('data-category');
      if (!category) return; // Skip if no category

      const dropdown = document.getElementById(`${category}-dropdown`);
      const itemImg = box.querySelector('.item-img');

      if (!dropdown) {
        console.error(`Dropdown not found for category: ${category} `);
        return;
      }

      itemImg.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        // If this dropdown is already active, close it
        if (activeDropdown === dropdown) {
            closeAllDropdowns();
            return;
        }

        // Close any open dropdown
        closeAllDropdowns();

        // Add active class to this item
        this.classList.add('active');

        // Open this dropdown
        dropdown.classList.add('active');
        overlay.style.display = 'block';
        activeDropdown = dropdown;
      });
    });

    // Close dropdown when clicking outside
    overlay.addEventListener('click', closeAllDropdowns);

    // Add click functionality to dropdown items
    document.querySelectorAll('.dropdown-item').forEach(item => {
      item.addEventListener('click', function (e) {
          e.stopPropagation();

          const productId = this.querySelector('.dropdown-item-name').textContent.split(' ')[1];
          const productName = this.querySelector('.dropdown-item-name').textContent;
      });
    });
    await loader.load(vanModelLink, function (gltf) {
      carModel = gltf.scene;
      carModel.traverse(function (node) {
        if (node.isMesh) {
          node.castShadow = true;
          node.receiveShadow = true;
        }
      });

      console.log(carModel)

      bodyMesh = carModel.getObjectByName("van").getObjectByName("van_1");
      const bodyMaterial = new THREE.MeshPhysicalMaterial( {
        color: 0xffffff, metalness: 1.0, roughness: 0.9, clearcoat: 1.0, clearcoatRoughness: 0.1
      } );
      bodyMesh.material = bodyMaterial
      scene.add(carModel);

      loader.load(rackModel,  function (gltf) {
        let rackModel = gltf.scene;
        rackModel.position.y = rackYPos
        rackModel.position.x = rackXPos
        scene.add(rackModel);

        vanRoofHeight = rackYPos + 0.03

        let models = [
          {
            path: crossbarLink,
            xPos: crossbarXPos
          }
        ]
        models.map((model) => {
          loader.load(model.path, function (gltf) {
            let crossBarModel = gltf.scene;
            crossBarModel.position.y = rackYPos + 0.04
            crossBarModel.position.x = model.xPos
            let bbox1 = getModelBoundingBox(crossBarModel);
            scene.add(crossBarModel);
          })
        })
      })

      workPlane = new THREE.Mesh(
        new THREE.BoxGeometry(...workPlaneValues),
        new THREE.MeshLambertMaterial({ color: "green" })
      );
      workPlane.material.visible = false;

      workPlane.position.set(-1.08, vanRoofHeight, 0);
      scene.add(workPlane);

      ladderPlane = new THREE.Mesh(
        new THREE.BoxGeometry(...ladderPlaneValues),
        new THREE.MeshLambertMaterial({color: 'green'})
      )
      ladderPlane.material.visible = false;
      ladderPlane.position.set(-1.08, 1.3, -0.85); 
      scene.add(ladderPlane);

      targetForDragging = new THREE.Mesh(
        new THREE.BoxGeometry(100, 0.01, 100),
        new THREE.MeshBasicMaterial()
      );
      targetForDragging.material.visible = false;
      raycaster = new THREE.Raycaster();

      const groundGeometry = new THREE.PlaneGeometry(500, 500);
      const groundMaterial = new THREE.ShadowMaterial({ opacity: 0.5 });
      const ground = new THREE.Mesh(groundGeometry, groundMaterial);
      ground.rotation.x = -Math.PI / 2;
      ground.position.y = 0
      ground.receiveShadow = true;
      scene.add(ground);
    });
  }

  function removeDash(str) {
    return str.replace(/-/g, ' ');
  }

  function selectVan() {
    if(vanSelected) return 
    vanSelected = true;
    const selectedVan = document.getElementById("vanVariant").value;
    document.getElementById("vanVariant").value = ""
    if(!selectedVan > 0) return;

    availableProducts = availableProducts.map((product) => {
      if(product.type == "rack") {
        const selectedRack = product.products.find((rack) => rack.variants.find(variant => variant.id == selectedVan));
        const selectedProduct = selectedRack.variants.find((variant) => variant.id == selectedVan);
        
        let newProduct = {...selectedRack, type: product.type, id: selectedProduct.id, price: selectedProduct.price / 100, image: selectedProduct?.featured_image?.src, quantity: 1, availability: true};
        document.getElementById("rack_title").innerHTML = selectedProduct?.title;
        return newProduct;
      }
      else return product;
    });

    let vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel;
    let solar100Product
    switch (selectedVan) {
      case "45730334703835":
        vanModelLink = "https://cdn.shopify.com/3d/models/713d5b23692645f2/van-tr148.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/transit-148.png?v=1733113860";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/transit-148.png?v=1733113860";
        rackModel = 'https://cdn.shopify.com/3d/models/9ec7af085980c73f/148_lightbar_-v2.glb'
        crossbarModel = 'https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb';
        ladderPos = [-1, 1.435, -1.012]
        crossbarXpos = -2.68
        rackYPos = 2.74
        rackXPos = -0.9
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        vanArea = [-10.535, 107.968]
        cutOffArea = [3.19, 25.7, 32.09, 64.72, 71.11, 85.19];
        vanDiff = -1.4
        lightbarXPos = 0.3149
        movingOffset = 0.265;
        owningPosZ = 0.84
        typeOfVan = "fordtransit"
        awningArea = [0.778, -2.93]
        selectableProducts = [
          {
            id: "airconditioners",
            products: [
              { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
              { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
              { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
              { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
              { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
            ]
          },
          {
            id: "fans",
            products: [
              { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
            ]
          },
          {
            id: "solar-panels",
            products: [
              { name: "Rich Solar Panel 250w", id: "solar_panel250", model: "https://cdn.shopify.com/3d/models/5b0bf30f3bc0bc5b/250W.glb" },
              { name: "Rich Solar Panel 200w", id: "solar_panel200", model: "https://cdn.shopify.com/3d/models/41179ec7afded29e/200W.glb" },
              { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/bba013cfe5d76ce7/100W-1.glb" },
              { name: "Rich Solar Panel 50w", id: "solar_panel50", model: "https://cdn.shopify.com/3d/models/cfce53c8523cbc41/55W.glb" },
              { name: "Rich Solar Panel 30w", id: "solar_panel30", model: "https://cdn.shopify.com/3d/models/dfcf1aaf24802514/30W.glb" },
              { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/c428d2a3aaa669d2/250W_newpowa.glb" },
              { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/d0869d71e3574000/220W_newpowa.glb" },
              { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/7745111021b38644/200W_newpowa.glb" },
              { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/5d5e861aa0b3b30a/100W_newpowa.glb" }
            ]
          },
          {
            id: "accessories",
            products: [
              { name: "Side Mount Ladder", id: "ladder", model: "https://cdn.shopify.com/3d/models/0009a829fc99c0cf/transit_ladder_v2.glb" },
              { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb" }
            ]
          },
          {
            id: "awnings",
            products: [
              { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
              { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" }
            ]
          },
          {
            id: "lights",
            products: [
              { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
              { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
            ]
          },
          {
            id: "deck-panels",
            products: [
              { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/c283b63c9eaef7bd/mk20-l2.glb" },
              { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/30941932346f43a7/mk20-w3.glb" },
              { name: "Deck Panels(Medium) - fit maxxfan", id: "mk20-maxxair", model: "https://cdn.shopify.com/3d/models/e5827b72fd891d4e/mk20-w2-maxxair.glb" },
              { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/6bbc46eee67042ad/mk22-w3.glb" },
              { name: "Deck Panels(Small) - fit AC unit", id: "mk23-ac", model: "https://cdn.shopify.com/3d/models/ba54ea390ddcff2c/mk23-ac.glb" }
            ]
          }
        ];
        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel)
        break;

      case "45730334671067":
        vanModelLink = "https://cdn.shopify.com/3d/models/713d5b23692645f2/van-tr148.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/transit-148.png?v=1733113860";
        rackModel = 'https://cdn.shopify.com/3d/models/cb78c2d5a0675b86/148_rack-v2.glb'
        crossbarModel = 'https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb';
        ladderPos = [-1.02, 1.4, -1.012]
        crossbarXpos = -2.68
        rackYPos = 2.74
        rackXPos = -0.9
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        vanArea = [-10.535, 107.968]
        cutOffArea = [3.19, 25.7, 32.09, 64.72, 71.11, 85.19];
        vanDiff = -1.4
        lightbarXPos = 0.3149
        movingOffset = 0.265;
        owningPosZ = 0.84
        typeOfVan = "fordtransit"
        awningArea = [0.778, -2.93]
        selectableProducts = [
          {
            id: "airconditioners",
            products: [
              { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
              { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
              { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
              { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
              { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
            ]
          },
          {
              id: "fans",
              products: [
                  { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
              ]
          },
          {
            id: "solar-panels",
            products: [
              { name: "Rich Solar Panel 250w", id: "solar_panel250", model: "https://cdn.shopify.com/3d/models/5b0bf30f3bc0bc5b/250W.glb" },
              { name: "Rich Solar Panel 200w", id: "solar_panel200", model: "https://cdn.shopify.com/3d/models/41179ec7afded29e/200W.glb" },
              { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/bba013cfe5d76ce7/100W-1.glb" },
              { name: "Rich Solar Panel 50w", id: "solar_panel50", model: "https://cdn.shopify.com/3d/models/cfce53c8523cbc41/55W.glb" },
              { name: "Rich Solar Panel 30w", id: "solar_panel30", model: "https://cdn.shopify.com/3d/models/dfcf1aaf24802514/30W.glb" },
              { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/c428d2a3aaa669d2/250W_newpowa.glb" },
              { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/d0869d71e3574000/220W_newpowa.glb" },
              { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/7745111021b38644/200W_newpowa.glb" },
              { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/5d5e861aa0b3b30a/100W_newpowa.glb" }
            ]
          },
          {
            id: "accessories",
            products: [
              { name: "Side Mount Ladder", id: "ladder", model: "https://cdn.shopify.com/3d/models/0009a829fc99c0cf/transit_ladder_v2.glb" },
              { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb" }
            ]
          },
          {
            id: "awnings",
            products: [
              { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
              { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" }
            ]
          },
          {
            id: "deck-panels",
            products: [
              { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/c283b63c9eaef7bd/mk20-l2.glb" },
              { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/30941932346f43a7/mk20-w3.glb" },
              { name: "Deck Panels(Medium) - fit maxxfan", id: "mk20-maxxair", model: "https://cdn.shopify.com/3d/models/e5827b72fd891d4e/mk20-w2-maxxair.glb" },
              { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/6bbc46eee67042ad/mk22-w3.glb" },
              { name: "Deck Panels(Small) - fit AC unit", id: "mk23-ac", model: "https://cdn.shopify.com/3d/models/ba54ea390ddcff2c/mk23-ac.glb" }
            ]
          }
        ];
        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      case "45730334802139": // transit 148 extended premium
        vanModelLink = "https://cdn.shopify.com/3d/models/1ac9fb4b911800be/transit_148_ext_van.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/transit-ext.png?v=1733115711";
        rackModel = 'https://cdn.shopify.com/3d/models/a2d58eb309a8c441/148_ext_rack-v2.glb'
        crossbarModel = 'https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb';
        ladderPos = [-1.02, 1.42, -1.012]
        crossbarXpos = -3.29
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        vanArea = [-14.535, 129.527]
        cutOffArea = [3.2, 25.7, 32.09, 64.72, 71.11, 85.19, 91.58, 101.33, 107.72, 124.72];
        vanDiff = -1.6
        rackYPos = 2.757
        rackXPos = -0.8
        movingOffset = 0.365;
        owningPosZ = 0.84
        typeOfVan = "fordtransit"
        awningArea = [0.98, -3.39]
        selectableProducts = [
          {
            id: "airconditioners",
            products: [
              { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
              { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
              { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
              { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
              { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
            ]
          },
          {
            id: "fans",
            products: [
              { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
            ]
          },
          {
            id: "solar-panels",
            products: [
              { name: "Rich Solar Panel 250w", id: "solar_panel250", model: "https://cdn.shopify.com/3d/models/5b0bf30f3bc0bc5b/250W.glb" },
              { name: "Rich Solar Panel 200w", id: "solar_panel200", model: "https://cdn.shopify.com/3d/models/41179ec7afded29e/200W.glb" },
              { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/bba013cfe5d76ce7/100W-1.glb" },
              { name: "Rich Solar Panel 50w", id: "solar_panel50", model: "https://cdn.shopify.com/3d/models/cfce53c8523cbc41/55W.glb" },
              { name: "Rich Solar Panel 30w", id: "solar_panel30", model: "https://cdn.shopify.com/3d/models/dfcf1aaf24802514/30W.glb" },
              { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/c428d2a3aaa669d2/250W_newpowa.glb" },
              { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/d0869d71e3574000/220W_newpowa.glb" },
              { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/7745111021b38644/200W_newpowa.glb" },
              { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/5d5e861aa0b3b30a/100W_newpowa.glb" }
            ]
          },
          {
            id: "accessories",
            products: [
              { name: "Side Mount Ladder", id: "ladder", model: 'https://cdn.shopify.com/3d/models/0009a829fc99c0cf/transit_ladder_v2.glb' },
              { name: "8020 cross bar", id: "cross_bar", model: 'https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb' }
            ]
          },
          {
            id: "awnings",
            products: [
              { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
              { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" }
            ]
          },
          {
            id: "deck-panels",
            products: [
              { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/c283b63c9eaef7bd/mk20-l2.glb" },
              { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/30941932346f43a7/mk20-w3.glb" },
              { name: "Deck Panels(Medium) - fit maxxfan", id: "mk20-maxxair", model: "https://cdn.shopify.com/3d/models/e5827b72fd891d4e/mk20-w2-maxxair.glb" },
              { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/6bbc46eee67042ad/mk22-w3.glb" },
              { name: "Deck Panels(Small) - fit AC unit", id: "mk23-ac", model: "https://cdn.shopify.com/3d/models/ba54ea390ddcff2c/mk23-ac.glb" }
            ]
          }
        ];
        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      case "45730334834907": // transit 148 extended lightbar
        vanModelLink = "https://cdn.shopify.com/3d/models/1ac9fb4b911800be/transit_148_ext_van.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/transit-ext.png?v=1733115711";
        rackModel = 'https://cdn.shopify.com/3d/models/5596f73169ab258b/148_ext_lightbar-v2.glb'
        crossbarModel = 'https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb';
        ladderPos = [-1.02, 1.42, -1.012]
        crossbarXpos = -3.29
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        vanArea = [-14.535, 129.527]
        cutOffArea = [3.2, 25.7, 32.09, 64.72, 71.11, 85.19, 91.58, 101.33, 107.72, 124.72];
        vanDiff = -1.6
        rackYPos = 2.757
        rackXPos = -0.8
        movingOffset = 0.365;
        owningPosZ = 0.84
        typeOfVan = "fordtransit"
        lightbarXPos = 0.4
        awningArea = [0.98, -3.39]
        selectableProducts = [
          {
            id: "airconditioners",
            products: [
              { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
              { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
              { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
              { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
              { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
            ]
          },
          {
            id: "fans",
            products: [
              { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
            ]
          },
          {
            id: "solar-panels",
            products: [
              { name: "Rich Solar Panel 250w", id: "solar_panel250", model: "https://cdn.shopify.com/3d/models/5b0bf30f3bc0bc5b/250W.glb" },
              { name: "Rich Solar Panel 200w", id: "solar_panel200", model: "https://cdn.shopify.com/3d/models/41179ec7afded29e/200W.glb" },
              { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/bba013cfe5d76ce7/100W-1.glb" },
              { name: "Rich Solar Panel 50w", id: "solar_panel50", model: "https://cdn.shopify.com/3d/models/cfce53c8523cbc41/55W.glb" },
              { name: "Rich Solar Panel 30w", id: "solar_panel30", model: "https://cdn.shopify.com/3d/models/dfcf1aaf24802514/30W.glb" },
              { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/c428d2a3aaa669d2/250W_newpowa.glb" },
              { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/d0869d71e3574000/220W_newpowa.glb" },
              { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/7745111021b38644/200W_newpowa.glb" },
              { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/5d5e861aa0b3b30a/100W_newpowa.glb" }
            ]
          },
          {
            id: "accessories",
            products: [
              { name: "Side Mount Ladder", id: "ladder", model: 'https://cdn.shopify.com/3d/models/0009a829fc99c0cf/transit_ladder_v2.glb' },
              { name: "8020 cross bar", id: "cross_bar", model: 'https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb' }
            ]
          },
          {
            id: "awnings",
            products: [
              { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
              { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" }
            ]
          },
          {
            id: "lights",
            products: [
              { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
              { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
            ]
          },
          {
            id: "deck-panels",
            products: [
              { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/c283b63c9eaef7bd/mk20-l2.glb" },
              { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/30941932346f43a7/mk20-w3.glb" },
              { name: "Deck Panels(Medium) - fit maxxfan", id: "mk20-maxxair", model: "https://cdn.shopify.com/3d/models/e5827b72fd891d4e/mk20-w2-maxxair.glb" },
              { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/6bbc46eee67042ad/mk22-w3.glb" },
              { name: "Deck Panels(Small) - fit AC unit", id: "mk23-ac", model: "https://cdn.shopify.com/3d/models/ba54ea390ddcff2c/mk23-ac.glb" }
            ]
          }
        ];

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      case "45730334539995": // transit 148 medium
        vanModelLink = "https://cdn.shopify.com/3d/models/31e857084b6dc8ec/van-tr148-m.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/transit-ext.png?v=1733115711";
        rackModel = 'https://cdn.shopify.com/3d/models/86423cccef227667/transit_148_medium-roof.glb'
        crossbarModel = 'https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb';
        ladderPos = [-1.054, 1.337, -1.033]
        crossbarXpos = -2.73577 
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        vanArea = [-17.8, 109.3]
        cutOffArea = [3.2, 25.7, 32.09, 64.72, 71.11, 85.19];
        vanDiff = 0
        rackYPos = 2.525
        rackXPos = -0.715
        lightbarXPos = 0.3149
        movingOffset = 0.45;
        owningPosZ = 0.84
        typeOfVan = "fordtransit"
        awningArea = [0.778, -2.93]
        selectableProducts = [
          {
            id: "airconditioners",
            products: [
              { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
              { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
              { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
              { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
              { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
            ]
          },
          {
              id: "fans",
              products: [
                  { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
              ]
          },
          {
            id: "solar-panels",
            products: [
              { name: "Rich Solar Panel 250w", id: "solar_panel250", model: "https://cdn.shopify.com/3d/models/5b0bf30f3bc0bc5b/250W.glb" },
              { name: "Rich Solar Panel 200w", id: "solar_panel200", model: "https://cdn.shopify.com/3d/models/41179ec7afded29e/200W.glb" },
              { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/bba013cfe5d76ce7/100W-1.glb" },
              { name: "Rich Solar Panel 50w", id: "solar_panel50", model: "https://cdn.shopify.com/3d/models/cfce53c8523cbc41/55W.glb" },
              { name: "Rich Solar Panel 30w", id: "solar_panel30", model: "https://cdn.shopify.com/3d/models/dfcf1aaf24802514/30W.glb" },
              { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/c428d2a3aaa669d2/250W_newpowa.glb" },
              { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/d0869d71e3574000/220W_newpowa.glb" },
              { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/7745111021b38644/200W_newpowa.glb" },
              { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/5d5e861aa0b3b30a/100W_newpowa.glb" }
            ]
          },
          {
            id: "accessories",
            products: [
              { name: "Side Mount Ladder", id: "ladder_tr_medium", model: "https://cdn.shopify.com/3d/models/0a0925fb3bc549e8/tr-medium-ladder.glb" },
              { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/543cc594a487aecf/8020_cross.glb" }
            ]
          },
          {
            id: "awnings",
            products: [
              { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
              { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" }
            ]
          },
          {
            id: "deck-panels",
            products: [
              { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/c283b63c9eaef7bd/mk20-l2.glb" },
              { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/30941932346f43a7/mk20-w3.glb" },
              { name: "Deck Panels(Medium) - fit maxxfan", id: "mk20-maxxair", model: "https://cdn.shopify.com/3d/models/e5827b72fd891d4e/mk20-w2-maxxair.glb" },
              { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/6bbc46eee67042ad/mk22-w3.glb" },
              { name: "Deck Panels(Small) - fit AC unit", id: "mk23-ac", model: "https://cdn.shopify.com/3d/models/ba54ea390ddcff2c/mk23-ac.glb" }
            ]
          }
        ];

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;
      
      
      case "45730446803163":
        vanModelLink = "https://cdn.shopify.com/3d/models/4f78aa938db8d413/sprinter-2.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/sprinter.png?v=1733116281";
        rackModel = 'https://cdn.shopify.com/3d/models/c7be56e9f2b42a7e/new_sprinter-rack.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb";
        crossbarXpos = -2.885
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.32144, 1.523, -0.9777]
        vanArea = [-12.785, 114.55]
        cutOffArea = [0, 18.25, 22.27, 40.2, 44.21, 56.85, 60.87, 80.67, 84.68, 104.49];
        vanDiff = 13.38
        rackYPos = 2.728
        rackXPos = -0.98
        movingOffset = 0.3325;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "sprinter"
        awningArea = [0.98, -3.00]
        rearLadderConf = {
          "ds_base_kit": [-3.121, 1.357, -0.4873],
          "ps_base_kit": [-3.121, 1.357, 0.48],
          "ds_ladder_extension": [-3.0965, 2.0882, -0.6598],
          "ps_ladder_extension": [-3.098, 2.075, 0.6625],
          "ds_easy_step": [-3.129, 0.611, -0.8109],
          "ps_easy_step": [-3.129, 0.611, 0.81],
          "ds_tire_carrier": [-3.311, 1.1222, -0.4613],
          "ps_tire_carrier": [-3.311, 1.1222, 0.459],
          "ds_tire": [-3.317, 1.268, -0.4613],
          "ps_tire": [-3.317, 1.268, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "fans",
              products: [
                  { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" },
              ]
          },
          {
            id: "rear-ladder-system",
            products: [
              {
                name: "Driver Side Base Kit", id: "ds_base_kit", model: "https://cdn.shopify.com/3d/models/ecca978be36e18ae/ds_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ds_ladder_extension", model: "https://cdn.shopify.com/3d/models/d972e666dd9145f7/ds_ladder_extension.glb" },
                  { name: "Easy Step", id: "ds_easy_step", model: "https://cdn.shopify.com/3d/models/1b5aef78bf7cfe34/ds_easy_step.glb" },
                  { name: "Tire Carrier", id: "ds_tire_carrier", model: "https://cdn.shopify.com/3d/models/785c22e74aa50338/ds_tire_carrier.glb" },
                ]
              },
              {
                name: "Passenger Side Base Kit", id: "ps_base_kit", model: "https://cdn.shopify.com/3d/models/8908093dd475a0f8/ps_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ps_ladder_extension", model: "https://cdn.shopify.com/3d/models/79cf8401af18f243/ps_ladder_extension.glb" },
                  { name: "Easy Step", id: "ps_easy_step", model: "https://cdn.shopify.com/3d/models/ae9b05d9988de031/ps_easy_step.glb" },
                  { name: "Tire Carrier", id: "ps_tire_carrier", model: "https://cdn.shopify.com/3d/models/7e310bbcc8b688b7/ps_tire_carrier.glb" },
                ]
              }
            ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" }
              ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;
      
      case "45910413181147":
        vanModelLink = "https://cdn.shopify.com/3d/models/4f78aa938db8d413/sprinter-2.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/sprinter.png?v=1733116281";
        rackModel = 'https://cdn.shopify.com/3d/models/99a1fdcc9ad2adbe/sprinter-rack-rightbar.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb";
        crossbarXpos = -2.885
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.32144, 1.523, -0.9777]
        vanArea = [-12.785, 114.55]
        cutOffArea = [0, 18.25, 22.27, 40.2, 44.21, 56.85, 60.87, 80.67, 84.68, 104.49];
        vanDiff = 13.38
        rackYPos = 2.728
        rackXPos = -0.98
        movingOffset = 0.3325;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "sprinter"
        lightbarXPos = 0.376
        awningArea = [0.98, -3.00]
        rearLadderConf = {
          "ds_base_kit": [-3.121, 1.357, -0.4873],
          "ps_base_kit": [-3.121, 1.357, 0.48],
          "ds_ladder_extension": [-3.0965, 2.0882, -0.6598],
          "ps_ladder_extension": [-3.098, 2.075, 0.6625],
          "ds_easy_step": [-3.129, 0.611, -0.8109],
          "ps_easy_step": [-3.129, 0.611, 0.81],
          "ds_tire_carrier": [-3.311, 1.1222, -0.4613],
          "ps_tire_carrier": [-3.311, 1.1222, 0.459],
          "ds_tire": [-3.317, 1.268, -0.4613],
          "ps_tire": [-3.317, 1.268, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "fans",
              products: [
                  { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
            id: "rear-ladder-system",
            products: [
              {
                name: "Driver Side Base Kit", id: "ds_base_kit", model: "https://cdn.shopify.com/3d/models/ecca978be36e18ae/ds_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ds_ladder_extension", model: "https://cdn.shopify.com/3d/models/d972e666dd9145f7/ds_ladder_extension.glb" },
                  { name: "Easy Step", id: "ds_easy_step", model: "https://cdn.shopify.com/3d/models/1b5aef78bf7cfe34/ds_easy_step.glb" },
                  { name: "Tire Carrier", id: "ds_tire_carrier", model: "https://cdn.shopify.com/3d/models/785c22e74aa50338/ds_tire_carrier.glb" },
                ]
              },
              {
                name: "Passenger Side Base Kit", id: "ps_base_kit", model: "https://cdn.shopify.com/3d/models/8908093dd475a0f8/ps_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ps_ladder_extension", model: "https://cdn.shopify.com/3d/models/79cf8401af18f243/ps_ladder_extension.glb" },
                  { name: "Easy Step", id: "ps_easy_step", model: "https://cdn.shopify.com/3d/models/ae9b05d9988de031/ps_easy_step.glb" },
                  { name: "Tire Carrier", id: "ps_tire_carrier", model: "https://cdn.shopify.com/3d/models/7e310bbcc8b688b7/ps_tire_carrier.glb" },
                ]
              }
            ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" }
              ]
          },
          {
              id: "lights",
              products: [
                  { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
                  { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
              ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      {% comment %} Sprinter 170 {% endcomment %}
      case "45730446868699":
        vanModelLink = "https://cdn.shopify.com/3d/models/5dc70b5924a2ae5c/sprinter-170.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/sprinter.png?v=1733116281";
        rackModel = 'https://cdn.shopify.com/3d/models/8f0cedd046b26892/new_sp-170-rack.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb";
        crossbarXpos = -3.655
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.792, 1.527, -0.9777]
        vanArea = [-21.185, 144.62]
        cutOffArea = [0, 18.57, 22.59, 40.52, 44.54, 57.18, 61.19, 81, 85.01, 104.81, 109.23, 128.64, 132.65, 152.45];
        vanDiff = 23.43
        rackYPos = 2.738
        rackXPos = -1.068
        movingOffset = 0.5425;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "sprinter"
        lightbarXPos = 0.376
        awningArea = [1.16, -3.91]
        rearLadderConf = {
          "ds_base_kit": [-3.9763, 1.362, -0.4873],
          "ps_base_kit": [-3.9763, 1.362, 0.48],
          "ds_ladder_extension": [-3.952, 2.0932, -0.6598],
          "ps_ladder_extension": [-3.9535, 2.080, 0.6625],
          "ds_easy_step": [-3.9845, 0.616, -0.8109],
          "ps_easy_step": [-3.9845, 0.616, 0.81],
          "ds_tire_carrier": [-4.1665, 1.1272, -0.4613],
          "ps_tire_carrier": [-4.1665, 1.1272, 0.459],
          "ds_tire": [-4.1725, 1.273, -0.4613],
          "ps_tire": [-4.1725, 1.273, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "fans",
              products: [
                  { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
            id: "rear-ladder-system",
            products: [
              {
                name: "Driver Side Base Kit", id: "ds_base_kit", model: "https://cdn.shopify.com/3d/models/ecca978be36e18ae/ds_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ds_ladder_extension", model: "https://cdn.shopify.com/3d/models/d972e666dd9145f7/ds_ladder_extension.glb" },
                  { name: "Easy Step", id: "ds_easy_step", model: "https://cdn.shopify.com/3d/models/1b5aef78bf7cfe34/ds_easy_step.glb" },
                  { name: "Tire Carrier", id: "ds_tire_carrier", model: "https://cdn.shopify.com/3d/models/785c22e74aa50338/ds_tire_carrier.glb" },
                ]
              },
              {
                name: "Passenger Side Base Kit", id: "ps_base_kit", model: "https://cdn.shopify.com/3d/models/8908093dd475a0f8/ps_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ps_ladder_extension", model: "https://cdn.shopify.com/3d/models/79cf8401af18f243/ps_ladder_extension.glb" },
                  { name: "Easy Step", id: "ps_easy_step", model: "https://cdn.shopify.com/3d/models/ae9b05d9988de031/ps_easy_step.glb" },
                  { name: "Tire Carrier", id: "ps_tire_carrier", model: "https://cdn.shopify.com/3d/models/7e310bbcc8b688b7/ps_tire_carrier.glb" },
                ]
              }
            ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" },
                  { name: "F45-400 Awning", id: "awning_400", model: "https://cdn.shopify.com/3d/models/ea6426d022ef91ed/awning_400.glb" },
                  { name: "F45-450 Awning", id: "awning_450", model: "https://cdn.shopify.com/3d/models/d0287e16f76cad27/awning_450.glb" }
              ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;
      
      case "45910413213915":
        vanModelLink = "https://cdn.shopify.com/3d/models/5dc70b5924a2ae5c/sprinter-170.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/sprinter.png?v=1733116281";
        rackModel = 'https://cdn.shopify.com/3d/models/5f7fc71c5cf659db/sp-170-rack-lightbar-1.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb";
        crossbarXpos = -3.655
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.792, 1.527, -0.9777]
        vanArea = [-21.185, 144.62]
        cutOffArea = [0, 18.57, 22.59, 40.52, 44.54, 57.18, 61.19, 81, 85.01, 104.81, 109.23, 128.64, 132.65, 152.45];
        vanDiff = 23.43
        rackYPos = 2.738
        rackXPos = -1.043
        movingOffset = 0.5425;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "sprinter"
        lightbarXPos = 0.58907
        awningArea = [1.16, -3.91]
        rearLadderConf = {
          "ds_base_kit": [-3.9763, 1.362, -0.4873],
          "ps_base_kit": [-3.9763, 1.362, 0.48],
          "ds_ladder_extension": [-3.952, 2.0932, -0.6598],
          "ps_ladder_extension": [-3.9535, 2.080, 0.6625],
          "ds_easy_step": [-3.9845, 0.616, -0.8109],
          "ps_easy_step": [-3.9845, 0.616, 0.81],
          "ds_tire_carrier": [-4.1665, 1.1272, -0.4613],
          "ps_tire_carrier": [-4.1665, 1.1272, 0.459],
          "ds_tire": [-4.1725, 1.273, -0.4613],
          "ps_tire": [-4.1725, 1.273, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "fans",
              products: [
                  { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
            id: "rear-ladder-system",
            products: [
              {
                name: "Driver Side Base Kit", id: "ds_base_kit", model: "https://cdn.shopify.com/3d/models/ecca978be36e18ae/ds_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ds_ladder_extension", model: "https://cdn.shopify.com/3d/models/d972e666dd9145f7/ds_ladder_extension.glb" },
                  { name: "Easy Step", id: "ds_easy_step", model: "https://cdn.shopify.com/3d/models/1b5aef78bf7cfe34/ds_easy_step.glb" },
                  { name: "Tire Carrier", id: "ds_tire_carrier", model: "https://cdn.shopify.com/3d/models/785c22e74aa50338/ds_tire_carrier.glb" },
                ]
              },
              {
                name: "Passenger Side Base Kit", id: "ps_base_kit", model: "https://cdn.shopify.com/3d/models/8908093dd475a0f8/ps_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ps_ladder_extension", model: "https://cdn.shopify.com/3d/models/79cf8401af18f243/ps_ladder_extension.glb" },
                  { name: "Easy Step", id: "ps_easy_step", model: "https://cdn.shopify.com/3d/models/ae9b05d9988de031/ps_easy_step.glb" },
                  { name: "Tire Carrier", id: "ps_tire_carrier", model: "https://cdn.shopify.com/3d/models/7e310bbcc8b688b7/ps_tire_carrier.glb" },
                ]
              }
            ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" },
                  { name: "F45-400 Awning", id: "awning_400", model: "https://cdn.shopify.com/3d/models/ea6426d022ef91ed/awning_400.glb" },
                  { name: "F45-450 Awning", id: "awning_450", model: "https://cdn.shopify.com/3d/models/d0287e16f76cad27/awning_450.glb" }
              ]
          },
          {
              id: "lights",
              products: [
                  { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
                  { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
              ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      {% comment %} Sprinter 170 {% endcomment %}
      case "45730446934235":
        vanModelLink = "https://cdn.shopify.com/3d/models/279afc757895c1b2/sprinter-170-ext.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/sprinter.png?v=1733116281";
        rackModel = 'https://cdn.shopify.com/3d/models/8c30524c68a1c6a9/sp-170ext-rack.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb";
        crossbarXpos = -4.06
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.792, 1.527, -0.9777]
        vanArea = [-21.185, 160.4]
        cutOffArea = [0, 18.57, 22.59, 40.52, 44.54, 57.18, 61.19, 81, 85.01, 104.81, 109.23, 128.64, 132.65, 152.45];
        vanDiff = 23.43
        rackYPos = 2.738
        rackXPos = -1.068
        movingOffset = 0.5425;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "sprinter"
        lightbarXPos = 0.376
        awningArea = [1.14, -4.3]
        rearLadderConf = {
          "ds_base_kit": [-4.3843, 1.362, -0.4873],
          "ps_base_kit": [-4.3843, 1.362, 0.48],
          "ds_ladder_extension": [-4.3598, 2.0932, -0.6598],
          "ps_ladder_extension": [-4.3613, 2.080, 0.6625],
          "ds_easy_step": [-4.3923, 0.616, -0.8109],
          "ps_easy_step": [-4.3923, 0.616, 0.81],
          "ds_tire_carrier": [-4.5743, 1.1272, -0.4613],
          "ps_tire_carrier": [-4.5743, 1.1272, 0.459],
          "ds_tire": [-4.5803, 1.273, -0.4613],
          "ps_tire": [-4.5803, 1.273, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "fans",
              products: [
                  { name: "Maxxair Deluxe", id: "maxxair", model: "https://cdn.shopify.com/3d/models/9f3e8c568b76b1f4/maxxair-2.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
            id: "rear-ladder-system",
            products: [
              {
                name: "Driver Side Base Kit", id: "ds_base_kit", model: "https://cdn.shopify.com/3d/models/ecca978be36e18ae/ds_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ds_ladder_extension", model: "https://cdn.shopify.com/3d/models/d972e666dd9145f7/ds_ladder_extension.glb" },
                  { name: "Easy Step", id: "ds_easy_step", model: "https://cdn.shopify.com/3d/models/1b5aef78bf7cfe34/ds_easy_step.glb" },
                  { name: "Tire Carrier", id: "ds_tire_carrier", model: "https://cdn.shopify.com/3d/models/785c22e74aa50338/ds_tire_carrier.glb" },
                ]
              },
              {
                name: "Passenger Side Base Kit", id: "ps_base_kit", model: "https://cdn.shopify.com/3d/models/8908093dd475a0f8/ps_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ps_ladder_extension", model: "https://cdn.shopify.com/3d/models/79cf8401af18f243/ps_ladder_extension.glb" },
                  { name: "Easy Step", id: "ps_easy_step", model: "https://cdn.shopify.com/3d/models/ae9b05d9988de031/ps_easy_step.glb" },
                  { name: "Tire Carrier", id: "ps_tire_carrier", model: "https://cdn.shopify.com/3d/models/7e310bbcc8b688b7/ps_tire_carrier.glb" },
                ]
              }
            ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" },
                  { name: "F45-400 Awning", id: "awning_400", model: "https://cdn.shopify.com/3d/models/ea6426d022ef91ed/awning_400.glb" },
                  { name: "F45-450 Awning", id: "awning_450", model: "https://cdn.shopify.com/3d/models/d0287e16f76cad27/awning_450.glb" }
              ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      case "45910413246683":
        vanModelLink = "https://cdn.shopify.com/3d/models/279afc757895c1b2/sprinter-170-ext.glb";
        shadowLink = "https://cdn.shopify.com/s/files/1/0412/9898/5124/files/sprinter.png?v=1733116281";
        rackModel = 'https://cdn.shopify.com/3d/models/bba50bba903c3ab4/sp-170ext-rack-light-1.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb";
        crossbarXpos = -4.06
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.792, 1.527, -0.9777]
        vanArea = [-21.185, 160.4]
        cutOffArea = [0, 18.57, 22.59, 40.52, 44.54, 57.18, 61.19, 81, 85.01, 104.81, 109.23, 128.64, 132.65, 152.45];
        vanDiff = 23.43
        rackYPos = 2.738
        rackXPos = -1.068
        movingOffset = 0.5425;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "sprinter"
        lightbarXPos = 0.57
        awningArea = [1.14, -4.3]
        rearLadderConf = {
          "ds_base_kit": [-4.3843, 1.362, -0.4873],
          "ps_base_kit": [-4.3843, 1.362, 0.48],
          "ds_ladder_extension": [-4.3598, 2.0932, -0.6598],
          "ps_ladder_extension": [-4.3613, 2.080, 0.6625],
          "ds_easy_step": [-4.3923, 0.616, -0.8109],
          "ps_easy_step": [-4.3923, 0.616, 0.81],
          "ds_tire_carrier": [-4.5743, 1.1272, -0.4613],
          "ps_tire_carrier": [-4.5743, 1.1272, 0.459],
          "ds_tire": [-4.5803, 1.273, -0.4613],
          "ps_tire": [-4.5803, 1.273, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
            id: "rear-ladder-system",
            products: [
              {
                name: "Driver Side Base Kit", id: "ds_base_kit", model: "https://cdn.shopify.com/3d/models/ecca978be36e18ae/ds_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ds_ladder_extension", model: "https://cdn.shopify.com/3d/models/d972e666dd9145f7/ds_ladder_extension.glb" },
                  { name: "Easy Step", id: "ds_easy_step", model: "https://cdn.shopify.com/3d/models/1b5aef78bf7cfe34/ds_easy_step.glb" },
                  { name: "Tire Carrier", id: "ds_tire_carrier", model: "https://cdn.shopify.com/3d/models/785c22e74aa50338/ds_tire_carrier.glb" },
                ]
              },
              {
                name: "Passenger Side Base Kit", id: "ps_base_kit", model: "https://cdn.shopify.com/3d/models/8908093dd475a0f8/ps_base_kit.glb",
                items: [
                  { name: "Ladder Extension", id: "ps_ladder_extension", model: "https://cdn.shopify.com/3d/models/79cf8401af18f243/ps_ladder_extension.glb" },
                  { name: "Easy Step", id: "ps_easy_step", model: "https://cdn.shopify.com/3d/models/ae9b05d9988de031/ps_easy_step.glb" },
                  { name: "Tire Carrier", id: "ps_tire_carrier", model: "https://cdn.shopify.com/3d/models/7e310bbcc8b688b7/ps_tire_carrier.glb" },
                ]
              }
            ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" },
                  { name: "F45-400 Awning", id: "awning_400", model: "https://cdn.shopify.com/3d/models/ea6426d022ef91ed/awning_400.glb" },
                  { name: "F45-450 Awning", id: "awning_450", model: "https://cdn.shopify.com/3d/models/d0287e16f76cad27/awning_450.glb" }
              ]
          },
          {
            id: "lights",
            products: [
                { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
                { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
            ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      case "45724558229723": // promaster 136 premium
        vanModelLink = "https://cdn.shopify.com/3d/models/c75719c5df288f92/van-promaster-136.glb";
        rackModel = 'https://cdn.shopify.com/3d/models/3b728c1a53ba0339/roof_rack_promaster_136_premium.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/776115be78f2b47a/promaster_crossbar.glb";
        crossbarXpos = -2.50803
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.792, 1.527, -0.9777]
        vanArea = [-23.36, 99.37]
        cutOffArea = [0, 18.57, 22.59, 40.52, 44.54, 57.18, 61.19, 81, 85.01, 104.81, 109.23, 128.64, 132.65, 152.45];
        vanDiff = 23.36
        rackYPos = 2.5
        rackXPos = -0.677
        movingOffset = 0.5933;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "promaster"
        lightbarXPos = 0.57
        awningArea = [1.14, -4.3]
        rearLadderConf = {
          "ds_base_kit": [-4.3843, 1.362, -0.4873],
          "ps_base_kit": [-4.3843, 1.362, 0.48],
          "ds_ladder_extension": [-4.3598, 2.0932, -0.6598],
          "ps_ladder_extension": [-4.3613, 2.080, 0.6625],
          "ds_easy_step": [-4.3923, 0.616, -0.8109],
          "ps_easy_step": [-4.3923, 0.616, 0.81],
          "ds_tire_carrier": [-4.5743, 1.1272, -0.4613],
          "ps_tire_carrier": [-4.5743, 1.1272, 0.459],
          "ds_tire": [-4.5803, 1.273, -0.4613],
          "ps_tire": [-4.5803, 1.273, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" },
                  { name: "F45-400 Awning", id: "awning_400", model: "https://cdn.shopify.com/3d/models/ea6426d022ef91ed/awning_400.glb" },
                  { name: "F45-450 Awning", id: "awning_450", model: "https://cdn.shopify.com/3d/models/d0287e16f76cad27/awning_450.glb" }
              ]
          },
          {
            id: "lights",
            products: [
                { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
                { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
            ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      case "45724558196955": // promaster 136 standard
        vanModelLink = "https://cdn.shopify.com/3d/models/c75719c5df288f92/van-promaster-136.glb";
        rackModel = 'https://cdn.shopify.com/3d/models/e837a451a8822caa/roof_rack_promaster_136_standard.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/776115be78f2b47a/promaster_crossbar.glb";
        crossbarXpos = -2.50803
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.792, 1.527, -0.9777]
        vanArea = [-23.36, 99.37]
        cutOffArea = [0, 18.57, 22.59, 40.52, 44.54, 57.18, 61.19, 81, 85.01, 104.81, 109.23, 128.64, 132.65, 152.45];
        vanDiff = 23.36
        rackYPos = 2.5
        rackXPos = -0.677
        movingOffset = 0.5933;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "promaster"
        lightbarXPos = 0.57
        awningArea = [1.14, -4.3]
        rearLadderConf = {
          "ds_base_kit": [-4.3843, 1.362, -0.4873],
          "ps_base_kit": [-4.3843, 1.362, 0.48],
          "ds_ladder_extension": [-4.3598, 2.0932, -0.6598],
          "ps_ladder_extension": [-4.3613, 2.080, 0.6625],
          "ds_easy_step": [-4.3923, 0.616, -0.8109],
          "ps_easy_step": [-4.3923, 0.616, 0.81],
          "ds_tire_carrier": [-4.5743, 1.1272, -0.4613],
          "ps_tire_carrier": [-4.5743, 1.1272, 0.459],
          "ds_tire": [-4.5803, 1.273, -0.4613],
          "ps_tire": [-4.5803, 1.273, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" },
                  { name: "F45-400 Awning", id: "awning_400", model: "https://cdn.shopify.com/3d/models/ea6426d022ef91ed/awning_400.glb" },
                  { name: "F45-450 Awning", id: "awning_450", model: "https://cdn.shopify.com/3d/models/d0287e16f76cad27/awning_450.glb" }
              ]
          },
          {
            id: "lights",
            products: [
                { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
                { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
            ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      case "45724558295259": // promaster 159 premium
        vanModelLink = "https://cdn.shopify.com/3d/models/6102f69f9740c1a7/promaster_159_van.glb";
        rackModel = 'https://cdn.shopify.com/3d/models/ccdbf81c1ad19b83/promaster_159_premium_roof.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/776115be78f2b47a/promaster_crossbar.glb";
        crossbarXpos = -2.50803
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.792, 1.527, -0.9777]
        vanArea = [-23.36, 99.37]
        cutOffArea = [0, 18.57, 22.59, 40.52, 44.54, 57.18, 61.19, 81, 85.01, 104.81, 109.23, 128.64, 132.65, 152.45];
        vanDiff = 23.36
        rackYPos = 2.5
        rackXPos = -0.677
        movingOffset = 0.5933;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "promaster"
        lightbarXPos = 0.57
        awningArea = [1.14, -4.3]
        rearLadderConf = {
          "ds_base_kit": [-4.3843, 1.362, -0.4873],
          "ps_base_kit": [-4.3843, 1.362, 0.48],
          "ds_ladder_extension": [-4.3598, 2.0932, -0.6598],
          "ps_ladder_extension": [-4.3613, 2.080, 0.6625],
          "ds_easy_step": [-4.3923, 0.616, -0.8109],
          "ps_easy_step": [-4.3923, 0.616, 0.81],
          "ds_tire_carrier": [-4.5743, 1.1272, -0.4613],
          "ps_tire_carrier": [-4.5743, 1.1272, 0.459],
          "ds_tire": [-4.5803, 1.273, -0.4613],
          "ps_tire": [-4.5803, 1.273, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" },
                  { name: "F45-400 Awning", id: "awning_400", model: "https://cdn.shopify.com/3d/models/ea6426d022ef91ed/awning_400.glb" },
                  { name: "F45-450 Awning", id: "awning_450", model: "https://cdn.shopify.com/3d/models/d0287e16f76cad27/awning_450.glb" }
              ]
          },
          {
            id: "lights",
            products: [
                { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
                { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
            ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;

      case "45724558262491": // promaster 159 standard
        vanModelLink = "https://cdn.shopify.com/3d/models/6102f69f9740c1a7/promaster_159_van.glb";
        rackModel = 'https://cdn.shopify.com/3d/models/a387924d22a31795/promaster_159_standard_roof.glb'
        crossbarModel = "https://cdn.shopify.com/3d/models/776115be78f2b47a/promaster_crossbar.glb";
        crossbarXpos = -2.50803
        workPlaneValues = [3, 0.01, 1.55];
        ladderPlaneValues = [3, 2, 0.01];
        ladderPos = [-1.1986, 1.5314, -0.9777]
        wheelLadderPos = [-1.792, 1.527, -0.9777]
        vanArea = [-23.36, 99.37]
        cutOffArea = [0, 18.57, 22.59, 40.52, 44.54, 57.18, 61.19, 81, 85.01, 104.81, 109.23, 128.64, 132.65, 152.45];
        vanDiff = 23.36
        rackYPos = 2.5
        rackXPos = -0.677
        movingOffset = 0.5933;
        crossbarWidth = 1.6
        owningPosZ = 0.78
        typeOfVan = "promaster"
        lightbarXPos = 0.57
        awningArea = [1.14, -4.3]
        rearLadderConf = {
          "ds_base_kit": [-4.3843, 1.362, -0.4873],
          "ps_base_kit": [-4.3843, 1.362, 0.48],
          "ds_ladder_extension": [-4.3598, 2.0932, -0.6598],
          "ps_ladder_extension": [-4.3613, 2.080, 0.6625],
          "ds_easy_step": [-4.3923, 0.616, -0.8109],
          "ps_easy_step": [-4.3923, 0.616, 0.81],
          "ds_tire_carrier": [-4.5743, 1.1272, -0.4613],
          "ps_tire_carrier": [-4.5743, 1.1272, 0.459],
          "ds_tire": [-4.5803, 1.273, -0.4613],
          "ps_tire": [-4.5803, 1.273, 0.454]
        }
        selectableProducts = [
          {
              id: "airconditioners",
              products: [
                  { name: "Dometic RTX", id: "airconditioner", model: "https://cdn.shopify.com/3d/models/3fc52045eaa806f8/airconditioner-d.glb" },
                  { name: "VELIT 2000R", id: "airconditioner-v1", model: "https://cdn.shopify.com/3d/models/c55e579406be72d1/airconditioner-v1.glb" },
                  { name: "VELIT 2000R MINI", id: "airconditioner-v2", model: "https://cdn.shopify.com/3d/models/575a822893d82486/airconditioner-v2.glb" },
                  { name: "Nomadic Innovations AC X2", id: "airconditioner-x2", model: "https://cdn.shopify.com/3d/models/8f9f98cdd33f3a4f/airconditioner-x2.glb" },
                  { name: "Nomadic Innovations AC X3", id: "airconditioner-x3", model: "https://cdn.shopify.com/3d/models/fa056a2235adba37/airconditioner-x3.glb" }
              ]
          },
          {
              id: "solar-panels",
              products: [
                  { name: "Rich Solar Panel 220w", id: "solar_panel220", model: "https://cdn.shopify.com/3d/models/6f1510b8b1557a69/sp-solar220.glb" },
                  { name: "Rich Solar Panel 100w", id: "solar_panel100", model: "https://cdn.shopify.com/3d/models/502c0ee744921a4a/sp-solar100.glb" },
                  { name: "NewPowa Solar Panel 250w", id: "new_solar250", model: "https://cdn.shopify.com/3d/models/904757785c51a77a/250W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 220w", id: "new_solar220", model: "https://cdn.shopify.com/3d/models/3084b3452d33bf20/220W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 200w", id: "new_solar200", model: "https://cdn.shopify.com/3d/models/d2ecc74512cb4b57/200W_newpowa_sp.glb" },
                  { name: "NewPowa Solar Panel 100w", id: "new_solar100", model: "https://cdn.shopify.com/3d/models/d676eedc944c3e99/100W_newpowa_sp.glb" }
              ]
          },
          {
              id: "accessories",
              products: [
                  { name: "Side Mount Ladder", id: "sp_ladder", model: "https://cdn.shopify.com/3d/models/163aa17f7cad2634/sprinter_ladder_v2.glb" },
                  { name: "Side Mount Ladder - Wheel Wrap", id: "sp_wheel_ladder", model: "https://cdn.shopify.com/3d/models/46d87bd3bb3d9405/sprinter_wheel_ladder.glb"},
                  { name: "8020 cross bar", id: "cross_bar", model: "https://cdn.shopify.com/3d/models/a6ed7ffc8e144cab/sprinter_crossbar.glb" }
              ]
          },
          {
              id: "awnings",
              products: [
                  { name: "F45-300 Awning", id: "awning", model: "https://cdn.shopify.com/3d/models/85085b43be1cd9cf/awning.glb" },
                  { name: "F45-350 Awning", id: "awning_350", model: "https://cdn.shopify.com/3d/models/431a3b45d712597f/awning_350.glb" },
                  { name: "F45-400 Awning", id: "awning_400", model: "https://cdn.shopify.com/3d/models/ea6426d022ef91ed/awning_400.glb" },
                  { name: "F45-450 Awning", id: "awning_450", model: "https://cdn.shopify.com/3d/models/d0287e16f76cad27/awning_450.glb" }
              ]
          },
          {
            id: "lights",
            products: [
                { name: "Tyri Light Bar", id: "light_bar", model: "https://cdn.shopify.com/3d/models/446727d744111fcc/light_bar.glb" },
                { name: "Diode Dynamics Light Bar", id: "light_bar_copy", model: "https://cdn.shopify.com/3d/models/7de4edf3ac049e1e/light_bar_1.glb" }
            ]
          },
          {
              id: "deck-panels",
              products: [
                  { name: "Deck Panels(Medium) - 2 length wise", id: "mk20-l2", model: "https://cdn.shopify.com/3d/models/834971040114a1af/mk20-l2-sp.glb" },
                  { name: "Deck Panels(Medium) - 3 width wise", id: "mk20-w3", model: "https://cdn.shopify.com/3d/models/436df7ea66129642/mk20-w3-sp.glb" },
                  { name: "Deck Panels(Large) - 3 width wise", id: "mk22-w3", model: "https://cdn.shopify.com/3d/models/26f539fd1a696c38/mk22-w3-sp.glb" }
              ]
          }
        ];
        solar100Product = {...availableProducts[15]};
        solar100Product.xRadius = 8
        availableProducts[15] = solar100Product;

        initVan(vanModelLink, shadowLink, rackModel, crossbarXpos, workPlaneValues, ladderPlaneValues, rackYPos, rackXPos, crossbarModel);
        break;
    }
    updateBuildState(availableProducts);
    calculatePrice(availableProducts)
    document.getElementById("van_modal_area").style.display = 'none'
  }
  init();
</script>

{% schema %}
{
  "name": "t:sections.model-visualization.name",
  "class": "section spacing-section",
  "settings": [],
  "presets": [
    {
      "name": "t:sections.model-visualization.presets.name"
    }
  ],
  "disabled_on": {
    "groups": ["custom.overlay"]
  }
}
{% endschema %}
